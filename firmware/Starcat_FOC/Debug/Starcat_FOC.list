
Starcat_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010364  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de8  080104f8  080104f8  000204f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122e0  080122e0  000304b0  2**0
                  CONTENTS
  4 .ARM          00000008  080122e0  080122e0  000222e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122e8  080122e8  000304b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122e8  080122e8  000222e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122ec  080122ec  000222ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b0  20000000  080122f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304b0  2**0
                  CONTENTS
 10 .bss          000012e8  200004b0  200004b0  000304b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001798  20001798  000304b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304b0  2**0
                  CONTENTS, READONLY
 13 .comment      000000b8  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001db3c  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004b3f  00000000  00000000  0004e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001598  00000000  00000000  00052c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000106b  00000000  00000000  000541b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000256e3  00000000  00000000  0005521b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021836  00000000  00000000  0007a8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d51aa  00000000  00000000  0009c134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006fb4  00000000  00000000  001712e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00178294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000001f4  00000000  00000000  001782ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001784e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004b0 	.word	0x200004b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104dc 	.word	0x080104dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004b4 	.word	0x200004b4
 80001cc:	080104dc 	.word	0x080104dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_GPIO_EXTI_Callback>:



//NFAULT报错引脚中断
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DRV8301_1.GPIO_Parameter->NFAULT_PIN)
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001000:	88fa      	ldrh	r2, [r7, #6]
 8001002:	429a      	cmp	r2, r3
 8001004:	d103      	bne.n	800100e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		DRV8301_1.FAULT_FLAG = ON;
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
	}
	else if(GPIO_Pin == DRV8301_2.GPIO_Parameter->NFAULT_PIN)
	{
		DRV8301_2.FAULT_FLAG = ON;
	}
}
 800100c:	e008      	b.n	8001020 <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_Pin == DRV8301_2.GPIO_Parameter->NFAULT_PIN)
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_GPIO_EXTI_Callback+0x40>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001014:	88fa      	ldrh	r2, [r7, #6]
 8001016:	429a      	cmp	r2, r3
 8001018:	d102      	bne.n	8001020 <HAL_GPIO_EXTI_Callback+0x30>
		DRV8301_2.FAULT_FLAG = ON;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_GPIO_EXTI_Callback+0x40>)
 800101c:	2201      	movs	r2, #1
 800101e:	711a      	strb	r2, [r3, #4]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000030 	.word	0x20000030
 8001030:	2000007c 	.word	0x2000007c

08001034 <DRV8301_Init>:
*/


//芯片初始化
void DRV8301_Init(DRV8301_TypeDef *DRV8301)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]


	//根据初始参数，初始DRV8301使能
	DRV8301_EN(DRV8301,ON);
 800103c:	2101      	movs	r1, #1
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 fb4c 	bl	80016dc <DRV8301_EN>

	HAL_Delay(500);
 8001044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001048:	f004 fbb0 	bl	80057ac <HAL_Delay>

	//清零控制寄存器
	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,0,WRITE);
 800104c:	2301      	movs	r3, #1
 800104e:	2200      	movs	r2, #0
 8001050:	2102      	movs	r1, #2
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f9be 	bl	80013d4 <DRV8301_SPI_ReadWrite>
	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_2,0,WRITE);
 8001058:	2301      	movs	r3, #1
 800105a:	2200      	movs	r2, #0
 800105c:	2103      	movs	r1, #3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f9b8 	bl	80013d4 <DRV8301_SPI_ReadWrite>
	 * OCP_MODE:Current limit
	 * OC_ADJ_SET:Vds<0.06V -- 因为使用的NMOS导通电阻7mΩ,所以当NMOS中流过电流超过22A才会触发过流保护
	 * */

	//设置3pwm模式/6pwm模式
	DRV8301_PWM_Mode(DRV8301,DRV8301->PWM_Mode);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7e1b      	ldrb	r3, [r3, #24]
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fc19 	bl	80018a2 <DRV8301_PWM_Mode>
	DRV8301_Set_OC(DRV8301,Vds_0_109);
 8001070:	2105      	movs	r1, #5
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fb80 	bl	8001778 <DRV8301_Set_OC>
	DRV8301_Set_Gain(DRV8301,DRV8301->I_Gain_mode);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7c5b      	ldrb	r3, [r3, #17]
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fb9c 	bl	80017bc <DRV8301_Set_Gain>
	DRV8301_GATE_CURRENT(DRV8301,peak_current_1A7);
 8001084:	2100      	movs	r1, #0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fbe4 	bl	8001854 <DRV8301_GATE_CURRENT>
		data4=DRV8301_SPI_ReadWrite(DRV8301,Control_Register_2,0,READ);
		printBinary(data4);
		printf("\n\n");
#endif

}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <DRV8301_Check_Fault>:


//检查是否出错
int DRV8301_Check_Fault(DRV8301_TypeDef *DRV8301)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if(DRV8301->FAULT_FLAG==ON)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d107      	bne.n	80010b4 <DRV8301_Check_Fault+0x20>
	{
		DRV8301->FAULT_FLAG=OFF;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	711a      	strb	r2, [r3, #4]
		 return DRV8301_Read_Protect(DRV8301);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f808 	bl	80010c0 <DRV8301_Read_Protect>
 80010b0:	4603      	mov	r3, r0
 80010b2:	e000      	b.n	80010b6 <DRV8301_Check_Fault+0x22>
	}
	return 0;
 80010b4:	2300      	movs	r3, #0

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <DRV8301_Read_Protect>:

//读DRV8301里的保护参数,无异常返回1
int DRV8301_Read_Protect(DRV8301_TypeDef *DRV8301 )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	int flag=1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]

	uint16_t data1=DRV8301_SPI_ReadWrite(DRV8301,Status_Register_1,0,READ) & 0x7ff;
 80010cc:	2300      	movs	r3, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f97e 	bl	80013d4 <DRV8301_SPI_ReadWrite>
 80010d8:	4603      	mov	r3, r0
 80010da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010de:	817b      	strh	r3, [r7, #10]
	uint16_t data2=DRV8301_SPI_ReadWrite(DRV8301,Status_Register_2,0,READ) & 0x7ff;
 80010e0:	2300      	movs	r3, #0
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f974 	bl	80013d4 <DRV8301_SPI_ReadWrite>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f2:	813b      	strh	r3, [r7, #8]

	DRV8301->Protect_Parameter->Device_ID =  data2 & (0x000f) ;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	893a      	ldrh	r2, [r7, #8]
 80010fa:	f002 020f 	and.w	r2, r2, #15
 80010fe:	b292      	uxth	r2, r2
 8001100:	819a      	strh	r2, [r3, #12]
	DRV8301->Protect_Parameter->GVDD_OV = ((data2 & (0x0080))>0)?1:0;
 8001102:	893b      	ldrh	r3, [r7, #8]
 8001104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001108:	2b00      	cmp	r3, #0
 800110a:	bfcc      	ite	gt
 800110c:	2301      	movgt	r3, #1
 800110e:	2300      	movle	r3, #0
 8001110:	b2da      	uxtb	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	72da      	strb	r2, [r3, #11]

	DRV8301->Protect_Parameter->FAULT = ((data1 & (0x0400))>0)?1:0;
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111e:	2b00      	cmp	r3, #0
 8001120:	bfcc      	ite	gt
 8001122:	2301      	movgt	r3, #1
 8001124:	2300      	movle	r3, #0
 8001126:	b2da      	uxtb	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	701a      	strb	r2, [r3, #0]
	DRV8301->Protect_Parameter->GVDD_UV =  ((data1 & (0x0200))>0)?1:0;
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001134:	2b00      	cmp	r3, #0
 8001136:	bfcc      	ite	gt
 8001138:	2301      	movgt	r3, #1
 800113a:	2300      	movle	r3, #0
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	705a      	strb	r2, [r3, #1]
	DRV8301->Protect_Parameter->PVDD_UV =  ((data1 & (0x0100))>0)?1:0;
 8001144:	897b      	ldrh	r3, [r7, #10]
 8001146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	bfcc      	ite	gt
 800114e:	2301      	movgt	r3, #1
 8001150:	2300      	movle	r3, #0
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	709a      	strb	r2, [r3, #2]
	DRV8301->Protect_Parameter->OTSD =  ((data1 & (0x0080))>0)?1:0;
 800115a:	897b      	ldrh	r3, [r7, #10]
 800115c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001160:	2b00      	cmp	r3, #0
 8001162:	bfcc      	ite	gt
 8001164:	2301      	movgt	r3, #1
 8001166:	2300      	movle	r3, #0
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	70da      	strb	r2, [r3, #3]
	DRV8301->Protect_Parameter->OTW =  ((data1 & (0x0040))>0)?1:0;
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	bfcc      	ite	gt
 800117a:	2301      	movgt	r3, #1
 800117c:	2300      	movle	r3, #0
 800117e:	b2da      	uxtb	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	711a      	strb	r2, [r3, #4]
	DRV8301->Protect_Parameter->FETHA_OC =  ((data1 & (0x0020))>0)?1:0;
 8001186:	897b      	ldrh	r3, [r7, #10]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	2b00      	cmp	r3, #0
 800118e:	bfcc      	ite	gt
 8001190:	2301      	movgt	r3, #1
 8001192:	2300      	movle	r3, #0
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	715a      	strb	r2, [r3, #5]
	DRV8301->Protect_Parameter->FETLA_OC =  ((data1 & (0x0010))>0)?1:0;
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfcc      	ite	gt
 80011a6:	2301      	movgt	r3, #1
 80011a8:	2300      	movle	r3, #0
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	719a      	strb	r2, [r3, #6]
	DRV8301->Protect_Parameter->FETHB_OC =  ((data1 & (0x0008))>0)?1:0;
 80011b2:	897b      	ldrh	r3, [r7, #10]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bfcc      	ite	gt
 80011bc:	2301      	movgt	r3, #1
 80011be:	2300      	movle	r3, #0
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	71da      	strb	r2, [r3, #7]
	DRV8301->Protect_Parameter->FETLB_OC =  ((data1 & (0x0004))>0)?1:0;
 80011c8:	897b      	ldrh	r3, [r7, #10]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bfcc      	ite	gt
 80011d2:	2301      	movgt	r3, #1
 80011d4:	2300      	movle	r3, #0
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	721a      	strb	r2, [r3, #8]
	DRV8301->Protect_Parameter->FETHC_OC =  ((data1 & (0x0002))>0)?1:0;
 80011de:	897b      	ldrh	r3, [r7, #10]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bfcc      	ite	gt
 80011e8:	2301      	movgt	r3, #1
 80011ea:	2300      	movle	r3, #0
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	725a      	strb	r2, [r3, #9]
	DRV8301->Protect_Parameter->FETLC_OC =  ((data1 & (0x0001))>0)?1:0;
 80011f4:	897b      	ldrh	r3, [r7, #10]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bfcc      	ite	gt
 80011fe:	2301      	movgt	r3, #1
 8001200:	2300      	movle	r3, #0
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	729a      	strb	r2, [r3, #10]

	//读出来设备id=0，说明未通信成功
	if(DRV8301->Protect_Parameter->Device_ID==0)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	899b      	ldrh	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d107      	bne.n	8001224 <DRV8301_Read_Protect+0x164>
	{
	    printf("DRV8301_%1d:DRV8301 SPI Can‘t Work!\n",DRV8301->id);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	485f      	ldr	r0, [pc, #380]	; (8001398 <DRV8301_Read_Protect+0x2d8>)
 800121c:	f00a fea8 	bl	800bf70 <iprintf>
	    flag = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
	}
	if(DRV8301->Protect_Parameter->Device_ID>1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	899b      	ldrh	r3, [r3, #12]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d90a      	bls.n	8001244 <DRV8301_Read_Protect+0x184>
	{
	    printf("DRV8301_%1d:Read Device id = %1d!\n",DRV8301->id,DRV8301->Protect_Parameter->Device_ID);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	899b      	ldrh	r3, [r3, #12]
 8001238:	461a      	mov	r2, r3
 800123a:	4858      	ldr	r0, [pc, #352]	; (800139c <DRV8301_Read_Protect+0x2dc>)
 800123c:	f00a fe98 	bl	800bf70 <iprintf>
	    flag = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
	}
	// 判断 FAULT
	if (DRV8301->Protect_Parameter->FAULT!= 0)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <DRV8301_Read_Protect+0x19e>
	{
	    printf("DRV8301_%1d:There is a fault state.\n",DRV8301->id);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4852      	ldr	r0, [pc, #328]	; (80013a0 <DRV8301_Read_Protect+0x2e0>)
 8001256:	f00a fe8b 	bl	800bf70 <iprintf>
	    flag = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
	}

	// 判断 GVDD_UV
	if (DRV8301->Protect_Parameter->GVDD_UV!= 0)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <DRV8301_Read_Protect+0x1b8>
	{
	    printf("DRV8301_%1d:Gate drive under - voltage <8V.\n",DRV8301->id);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	484d      	ldr	r0, [pc, #308]	; (80013a4 <DRV8301_Read_Protect+0x2e4>)
 8001270:	f00a fe7e 	bl	800bf70 <iprintf>
	    flag = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
	}

	// 判断 PVDD_UV
	if (DRV8301->Protect_Parameter->PVDD_UV!= 0)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	789b      	ldrb	r3, [r3, #2]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <DRV8301_Read_Protect+0x1d2>
	{
	    printf("DRV8301_%1d:Power supply under - voltage <6V.\n",DRV8301->id);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	4847      	ldr	r0, [pc, #284]	; (80013a8 <DRV8301_Read_Protect+0x2e8>)
 800128a:	f00a fe71 	bl	800bf70 <iprintf>
	    flag = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
	}

	// 判断 OTSD
	if (DRV8301->Protect_Parameter->OTSD!= 0)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	78db      	ldrb	r3, [r3, #3]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <DRV8301_Read_Protect+0x1ec>
	{
	    printf("DRV8301_%1d:Over - temperature lockout driver flag set.\n",DRV8301->id);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4842      	ldr	r0, [pc, #264]	; (80013ac <DRV8301_Read_Protect+0x2ec>)
 80012a4:	f00a fe64 	bl	800bf70 <iprintf>
	    flag = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
	}

	// 判断 OTW
	if (DRV8301->Protect_Parameter->OTW!= 0)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <DRV8301_Read_Protect+0x206>
	{
	    printf("DRV8301_%1d:Over - temperature warning >150°.\n",DRV8301->id);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	483c      	ldr	r0, [pc, #240]	; (80013b0 <DRV8301_Read_Protect+0x2f0>)
 80012be:	f00a fe57 	bl	800bf70 <iprintf>
	    flag = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
	}

	// 判断 FETHA_OC
	if (DRV8301->Protect_Parameter->FETHA_OC!= 0)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	795b      	ldrb	r3, [r3, #5]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <DRV8301_Read_Protect+0x220>
	{
	    printf("DRV8301_%1d:MOSFET A_H over - current.\n",DRV8301->id);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4837      	ldr	r0, [pc, #220]	; (80013b4 <DRV8301_Read_Protect+0x2f4>)
 80012d8:	f00a fe4a 	bl	800bf70 <iprintf>
	    flag = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
	}

	// 判断 FETLA_OC
	if (DRV8301->Protect_Parameter->FETLA_OC!= 0)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	799b      	ldrb	r3, [r3, #6]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <DRV8301_Read_Protect+0x23a>
	{
	    printf("DRV8301_%1d:MOSFET A_L over - current.\n",DRV8301->id);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4831      	ldr	r0, [pc, #196]	; (80013b8 <DRV8301_Read_Protect+0x2f8>)
 80012f2:	f00a fe3d 	bl	800bf70 <iprintf>
	    flag = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
	}

	// 判断 FETHB_OC
	if (DRV8301->Protect_Parameter->FETHB_OC!= 0)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	79db      	ldrb	r3, [r3, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <DRV8301_Read_Protect+0x254>
	{
	    printf("DRV8301_%1d:MOSFET B_H over - current.\n",DRV8301->id);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	482c      	ldr	r0, [pc, #176]	; (80013bc <DRV8301_Read_Protect+0x2fc>)
 800130c:	f00a fe30 	bl	800bf70 <iprintf>
	    flag = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
	}

	// 判断 FETLB_OC
	if (DRV8301->Protect_Parameter->FETLB_OC!= 0)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	7a1b      	ldrb	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <DRV8301_Read_Protect+0x26e>
	{
	    printf("DRV8301_%1d:MOSFET B_L over - current.\n",DRV8301->id);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4826      	ldr	r0, [pc, #152]	; (80013c0 <DRV8301_Read_Protect+0x300>)
 8001326:	f00a fe23 	bl	800bf70 <iprintf>
	    flag = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
	}

	// 判断 FETHC_OC
	if (DRV8301->Protect_Parameter->FETHC_OC!= 0)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	7a5b      	ldrb	r3, [r3, #9]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <DRV8301_Read_Protect+0x288>
	{
	    printf("DRV8301_%1d:MOSFET C_H over - current.\n",DRV8301->id);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4821      	ldr	r0, [pc, #132]	; (80013c4 <DRV8301_Read_Protect+0x304>)
 8001340:	f00a fe16 	bl	800bf70 <iprintf>
	    flag = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
	}

	// 判断 FETLC_OC
	if (DRV8301->Protect_Parameter->FETLC_OC!= 0)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	7a9b      	ldrb	r3, [r3, #10]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <DRV8301_Read_Protect+0x2a2>
	{
	    printf("DRV8301_%1d:MOSFET C_L over - current.\n",DRV8301->id);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	481b      	ldr	r0, [pc, #108]	; (80013c8 <DRV8301_Read_Protect+0x308>)
 800135a:	f00a fe09 	bl	800bf70 <iprintf>
	    flag = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
	}

	// 判断 GVDD_OV
	if (DRV8301->Protect_Parameter->GVDD_OV!= 0)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	7adb      	ldrb	r3, [r3, #11]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <DRV8301_Read_Protect+0x2bc>
	{
	    printf("DRV8301_%1d:Gate drive over - voltage >16V.\n",DRV8301->id);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	4816      	ldr	r0, [pc, #88]	; (80013cc <DRV8301_Read_Protect+0x30c>)
 8001374:	f00a fdfc 	bl	800bf70 <iprintf>
	    flag = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
	}

	if(flag==1)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d105      	bne.n	800138e <DRV8301_Read_Protect+0x2ce>
	{
		printf("DRV8301_%1d is OK！\n",DRV8301->id);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <DRV8301_Read_Protect+0x310>)
 800138a:	f00a fdf1 	bl	800bf70 <iprintf>
	}
 return flag;
 800138e:	68fb      	ldr	r3, [r7, #12]

}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	080104f8 	.word	0x080104f8
 800139c:	08010520 	.word	0x08010520
 80013a0:	08010544 	.word	0x08010544
 80013a4:	0801056c 	.word	0x0801056c
 80013a8:	0801059c 	.word	0x0801059c
 80013ac:	080105cc 	.word	0x080105cc
 80013b0:	08010608 	.word	0x08010608
 80013b4:	08010638 	.word	0x08010638
 80013b8:	08010660 	.word	0x08010660
 80013bc:	08010688 	.word	0x08010688
 80013c0:	080106b0 	.word	0x080106b0
 80013c4:	080106d8 	.word	0x080106d8
 80013c8:	08010700 	.word	0x08010700
 80013cc:	08010728 	.word	0x08010728
 80013d0:	08010758 	.word	0x08010758

080013d4 <DRV8301_SPI_ReadWrite>:




// SPI 读写指定寄存器的值
uint16_t DRV8301_SPI_ReadWrite(DRV8301_TypeDef *DRV8301, uint8_t addr, uint16_t data, OperationType operation) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	70fb      	strb	r3, [r7, #3]
 80013e6:	460b      	mov	r3, r1
 80013e8:	803b      	strh	r3, [r7, #0]
 80013ea:	4613      	mov	r3, r2
 80013ec:	70bb      	strb	r3, [r7, #2]
    uint16_t sendData = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	81fb      	strh	r3, [r7, #14]


    if (operation == READ) {
 80013f2:	78bb      	ldrb	r3, [r7, #2]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <DRV8301_SPI_ReadWrite+0x30>
        sendData |= 0x8000;
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80013fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001402:	81fb      	strh	r3, [r7, #14]
				printf("Write:");
		#endif

    }

    sendData |= ((addr & 0xF) << 11);
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	02db      	lsls	r3, r3, #11
 8001408:	b21b      	sxth	r3, r3
 800140a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800140e:	b21a      	sxth	r2, r3
 8001410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001414:	4313      	orrs	r3, r2
 8001416:	b21b      	sxth	r3, r3
 8001418:	81fb      	strh	r3, [r7, #14]
    sendData |= (data & 0x7FF);
 800141a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800141e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001422:	b21a      	sxth	r2, r3
 8001424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001428:	4313      	orrs	r3, r2
 800142a:	b21b      	sxth	r3, r3
 800142c:	81fb      	strh	r3, [r7, #14]
	#endif



    //拉低sck
    HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->SCLK_PORT, DRV8301->GPIO_Parameter->SCLK_PIN, GPIO_PIN_RESET);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	6898      	ldr	r0, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	899b      	ldrh	r3, [r3, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	f006 fd75 	bl	8007f2c <HAL_GPIO_WritePin>
    // 发送命令，大端先行
    HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->NSCS_PORT, DRV8301->GPIO_Parameter->NSCS_PIN, GPIO_PIN_RESET);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	f006 fd6b 	bl	8007f2c <HAL_GPIO_WritePin>
    for (int8_t i = 15; i >= 0; i--) {
 8001456:	230f      	movs	r3, #15
 8001458:	737b      	strb	r3, [r7, #13]
 800145a:	e037      	b.n	80014cc <DRV8301_SPI_ReadWrite+0xf8>
        HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->SCLK_PORT, DRV8301->GPIO_Parameter->SCLK_PIN, GPIO_PIN_SET);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	6898      	ldr	r0, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	899b      	ldrh	r3, [r3, #12]
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	f006 fd5e 	bl	8007f2c <HAL_GPIO_WritePin>
        // 发送数据
        if (sendData & (0x0001 << i)) {
 8001470:	89fa      	ldrh	r2, [r7, #14]
 8001472:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001476:	fa42 f303 	asr.w	r3, r2, r3
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <DRV8301_SPI_ReadWrite+0xc4>
            HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->SDI_PORT, DRV8301->GPIO_Parameter->SDI_PIN, GPIO_PIN_SET);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	6918      	ldr	r0, [r3, #16]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	8a9b      	ldrh	r3, [r3, #20]
 800148e:	2201      	movs	r2, #1
 8001490:	4619      	mov	r1, r3
 8001492:	f006 fd4b 	bl	8007f2c <HAL_GPIO_WritePin>
 8001496:	e009      	b.n	80014ac <DRV8301_SPI_ReadWrite+0xd8>
        } else {
            HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->SDI_PORT, DRV8301->GPIO_Parameter->SDI_PIN, GPIO_PIN_RESET);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	6918      	ldr	r0, [r3, #16]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	8a9b      	ldrh	r3, [r3, #20]
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	f006 fd40 	bl	8007f2c <HAL_GPIO_WritePin>
        }
        HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->SCLK_PORT, DRV8301->GPIO_Parameter->SCLK_PIN, GPIO_PIN_RESET);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	6898      	ldr	r0, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	899b      	ldrh	r3, [r3, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f006 fd36 	bl	8007f2c <HAL_GPIO_WritePin>
    for (int8_t i = 15; i >= 0; i--) {
 80014c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	737b      	strb	r3, [r7, #13]
 80014cc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dac3      	bge.n	800145c <DRV8301_SPI_ReadWrite+0x88>
    }
    HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->NSCS_PORT, DRV8301->GPIO_Parameter->NSCS_PIN, GPIO_PIN_SET);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4619      	mov	r1, r3
 80014e4:	f006 fd22 	bl	8007f2c <HAL_GPIO_WritePin>

    //CS由高到低
   HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->NSCS_PORT, DRV8301->GPIO_Parameter->NSCS_PIN, GPIO_PIN_RESET);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	889b      	ldrh	r3, [r3, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f006 fd18 	bl	8007f2c <HAL_GPIO_WritePin>
    // 接收数据，大端在前
    sendData = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 15; i >= 0; i--) {
 8001500:	230f      	movs	r3, #15
 8001502:	733b      	strb	r3, [r7, #12]
 8001504:	e031      	b.n	800156a <DRV8301_SPI_ReadWrite+0x196>
        HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->SCLK_PORT, DRV8301->GPIO_Parameter->SCLK_PIN, GPIO_PIN_SET);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	6898      	ldr	r0, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	899b      	ldrh	r3, [r3, #12]
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	f006 fd09 	bl	8007f2c <HAL_GPIO_WritePin>
        // 接收数据
        if (HAL_GPIO_ReadPin(DRV8301->GPIO_Parameter->SDO_PORT, DRV8301->GPIO_Parameter->SDO_PIN) == GPIO_PIN_SET) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	8b9b      	ldrh	r3, [r3, #28]
 8001526:	4619      	mov	r1, r3
 8001528:	4610      	mov	r0, r2
 800152a:	f006 fce7 	bl	8007efc <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10a      	bne.n	800154a <DRV8301_SPI_ReadWrite+0x176>
            sendData |= (0x0001 << i);
 8001534:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	81fb      	strh	r3, [r7, #14]
        }
        HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->SCLK_PORT, DRV8301->GPIO_Parameter->SCLK_PIN, GPIO_PIN_RESET);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	899b      	ldrh	r3, [r3, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	f006 fce7 	bl	8007f2c <HAL_GPIO_WritePin>
    for (int8_t i = 15; i >= 0; i--) {
 800155e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3b01      	subs	r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	733b      	strb	r3, [r7, #12]
 800156a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	dac9      	bge.n	8001506 <DRV8301_SPI_ReadWrite+0x132>
    }
    HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->NSCS_PORT, DRV8301->GPIO_Parameter->NSCS_PIN, GPIO_PIN_SET);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	889b      	ldrh	r3, [r3, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	4619      	mov	r1, r3
 8001582:	f006 fcd3 	bl	8007f2c <HAL_GPIO_WritePin>

    //如果错误位置1，则发送出错
    if((sendData & (0x0001<<15))!=0)
 8001586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da03      	bge.n	8001596 <DRV8301_SPI_ReadWrite+0x1c2>
    {
    	printf("RxData Frame error! \n");
 800158e:	4850      	ldr	r0, [pc, #320]	; (80016d0 <DRV8301_SPI_ReadWrite+0x2fc>)
 8001590:	f00a fd54 	bl	800c03c <puts>
 8001594:	e096      	b.n	80016c4 <DRV8301_SPI_ReadWrite+0x2f0>
    }
    //如果是读命令，则接收的地址与读地址一致
    else if((((sendData&0x7800)>>11) != ((uint16_t)addr)) && (operation == READ))
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	12db      	asrs	r3, r3, #11
 800159a:	f003 020f 	and.w	r2, r3, #15
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d006      	beq.n	80015b2 <DRV8301_SPI_ReadWrite+0x1de>
 80015a4:	78bb      	ldrb	r3, [r7, #2]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <DRV8301_SPI_ReadWrite+0x1de>
    {
    	printf("Read:RxData Addr error! \n");
 80015aa:	484a      	ldr	r0, [pc, #296]	; (80016d4 <DRV8301_SPI_ReadWrite+0x300>)
 80015ac:	f00a fd46 	bl	800c03c <puts>
 80015b0:	e088      	b.n	80016c4 <DRV8301_SPI_ReadWrite+0x2f0>
    }
    //如果是写命令，则接收的地址是0x00
    else if((((sendData&0x7800)>>11) != 0) && (operation == WRITE))
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	12db      	asrs	r3, r3, #11
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <DRV8301_SPI_ReadWrite+0x1f8>
 80015be:	78bb      	ldrb	r3, [r7, #2]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d103      	bne.n	80015cc <DRV8301_SPI_ReadWrite+0x1f8>
    {
    	printf("Write:RxData Addr error! \n");
 80015c4:	4844      	ldr	r0, [pc, #272]	; (80016d8 <DRV8301_SPI_ReadWrite+0x304>)
 80015c6:	f00a fd39 	bl	800c03c <puts>
 80015ca:	e07b      	b.n	80016c4 <DRV8301_SPI_ReadWrite+0x2f0>
    }
    //读命令会返回状态寄存器1的值
    else if(operation == WRITE)
 80015cc:	78bb      	ldrb	r3, [r7, #2]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d178      	bne.n	80016c4 <DRV8301_SPI_ReadWrite+0x2f0>
    {
    	DRV8301->Protect_Parameter->FAULT = ((sendData & (0x0400))>0)?1:0;
 80015d2:	89fb      	ldrh	r3, [r7, #14]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bfcc      	ite	gt
 80015dc:	2301      	movgt	r3, #1
 80015de:	2300      	movle	r3, #0
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	701a      	strb	r2, [r3, #0]
    	DRV8301->Protect_Parameter->GVDD_UV =  ((sendData & (0x0200))>0)?1:0;
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bfcc      	ite	gt
 80015f2:	2301      	movgt	r3, #1
 80015f4:	2300      	movle	r3, #0
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	705a      	strb	r2, [r3, #1]
    	DRV8301->Protect_Parameter->PVDD_UV =  ((sendData & (0x0100))>0)?1:0;
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	bfcc      	ite	gt
 8001608:	2301      	movgt	r3, #1
 800160a:	2300      	movle	r3, #0
 800160c:	b2da      	uxtb	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	709a      	strb	r2, [r3, #2]
    	DRV8301->Protect_Parameter->OTSD =  ((sendData & (0x0080))>0)?1:0;
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b00      	cmp	r3, #0
 800161c:	bfcc      	ite	gt
 800161e:	2301      	movgt	r3, #1
 8001620:	2300      	movle	r3, #0
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	70da      	strb	r2, [r3, #3]
    	DRV8301->Protect_Parameter->OTW =  ((sendData & (0x0040))>0)?1:0;
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	bfcc      	ite	gt
 8001634:	2301      	movgt	r3, #1
 8001636:	2300      	movle	r3, #0
 8001638:	b2da      	uxtb	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	711a      	strb	r2, [r3, #4]
    	DRV8301->Protect_Parameter->FETHA_OC =  ((sendData & (0x0020))>0)?1:0;
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	2b00      	cmp	r3, #0
 8001648:	bfcc      	ite	gt
 800164a:	2301      	movgt	r3, #1
 800164c:	2300      	movle	r3, #0
 800164e:	b2da      	uxtb	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	715a      	strb	r2, [r3, #5]
    	DRV8301->Protect_Parameter->FETLA_OC =  ((sendData & (0x0010))>0)?1:0;
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b00      	cmp	r3, #0
 800165e:	bfcc      	ite	gt
 8001660:	2301      	movgt	r3, #1
 8001662:	2300      	movle	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	719a      	strb	r2, [r3, #6]
    	DRV8301->Protect_Parameter->FETHB_OC =  ((sendData & (0x0008))>0)?1:0;
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	bfcc      	ite	gt
 8001676:	2301      	movgt	r3, #1
 8001678:	2300      	movle	r3, #0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	71da      	strb	r2, [r3, #7]
    	DRV8301->Protect_Parameter->FETLB_OC =  ((sendData & (0x0004))>0)?1:0;
 8001682:	89fb      	ldrh	r3, [r7, #14]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	bfcc      	ite	gt
 800168c:	2301      	movgt	r3, #1
 800168e:	2300      	movle	r3, #0
 8001690:	b2da      	uxtb	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	721a      	strb	r2, [r3, #8]
    	DRV8301->Protect_Parameter->FETHC_OC =  ((sendData & (0x0002))>0)?1:0;
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bfcc      	ite	gt
 80016a2:	2301      	movgt	r3, #1
 80016a4:	2300      	movle	r3, #0
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	725a      	strb	r2, [r3, #9]
    	DRV8301->Protect_Parameter->FETLC_OC =  ((sendData & (0x0001))>0)?1:0;
 80016ae:	89fb      	ldrh	r3, [r7, #14]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bfcc      	ite	gt
 80016b8:	2301      	movgt	r3, #1
 80016ba:	2300      	movle	r3, #0
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	729a      	strb	r2, [r3, #10]
		printf("RxData:");
		printBinary(sendData);
		printf("\n");
	#endif

    return sendData;
 80016c4:	89fb      	ldrh	r3, [r7, #14]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	08010770 	.word	0x08010770
 80016d4:	08010788 	.word	0x08010788
 80016d8:	080107a4 	.word	0x080107a4

080016dc <DRV8301_EN>:


//电机使能/失能
void DRV8301_EN(DRV8301_TypeDef *DRV8301,OperationType2 ON_OFF)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
	if(ON_OFF == ON)
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d10d      	bne.n	800170a <DRV8301_EN+0x2e>
	{
		DRV8301->EN_State = ON;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->EN_GATE_PORT , DRV8301->GPIO_Parameter->EN_GATE_PIN, GPIO_PIN_SET);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	6a18      	ldr	r0, [r3, #32]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001700:	2201      	movs	r2, #1
 8001702:	4619      	mov	r1, r3
 8001704:	f006 fc12 	bl	8007f2c <HAL_GPIO_WritePin>
	else
	{
		DRV8301->EN_State = OFF;
		HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->EN_GATE_PORT , DRV8301->GPIO_Parameter->EN_GATE_PIN, GPIO_PIN_RESET);
	}
}
 8001708:	e00c      	b.n	8001724 <DRV8301_EN+0x48>
		DRV8301->EN_State = OFF;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(DRV8301->GPIO_Parameter->EN_GATE_PORT , DRV8301->GPIO_Parameter->EN_GATE_PIN, GPIO_PIN_RESET);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	6a18      	ldr	r0, [r3, #32]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	f006 fc04 	bl	8007f2c <HAL_GPIO_WritePin>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <DRV8301_GATE_RESET>:

//清除电机错误状态
void DRV8301_GATE_RESET(DRV8301_TypeDef *DRV8301 )
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	uint16_t data=DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,0,READ) & 0x7ff;
 8001734:	2300      	movs	r3, #0
 8001736:	2200      	movs	r2, #0
 8001738:	2102      	movs	r1, #2
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fe4a 	bl	80013d4 <DRV8301_SPI_ReadWrite>
 8001740:	4603      	mov	r3, r0
 8001742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001746:	81fb      	strh	r3, [r7, #14]

	data |= (0x01<<GATE_RESET_OFFSET);//开启复位，清除错误状态
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	81fb      	strh	r3, [r7, #14]

	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,data,WRITE);
 8001750:	89fa      	ldrh	r2, [r7, #14]
 8001752:	2301      	movs	r3, #1
 8001754:	2102      	movs	r1, #2
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fe3c 	bl	80013d4 <DRV8301_SPI_ReadWrite>

	data &= (~(0x01<<GATE_RESET_OFFSET));//关闭复位，继续运行
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	f023 0304 	bic.w	r3, r3, #4
 8001762:	81fb      	strh	r3, [r7, #14]

	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,data,WRITE);
 8001764:	89fa      	ldrh	r2, [r7, #14]
 8001766:	2301      	movs	r3, #1
 8001768:	2102      	movs	r1, #2
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe32 	bl	80013d4 <DRV8301_SPI_ReadWrite>

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <DRV8301_Set_OC>:
}


//设置NMOS过流保护值为0.109V，因为使用的NMOS导通电阻7mΩ,所以当NMOS中流过电流超过15.5A才会触发过流保护
void DRV8301_Set_OC(DRV8301_TypeDef *DRV8301,OC_Vds_Type Vds)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
	uint16_t data=DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,0,READ) & 0x7ff;
 8001784:	2300      	movs	r3, #0
 8001786:	2200      	movs	r2, #0
 8001788:	2102      	movs	r1, #2
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fe22 	bl	80013d4 <DRV8301_SPI_ReadWrite>
 8001790:	4603      	mov	r3, r0
 8001792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001796:	81fb      	strh	r3, [r7, #14]

	data |= ((uint16_t)Vds<<OC_ADJ_SET_OFFSET);//设置NMOS过流保护值
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	019b      	lsls	r3, r3, #6
 800179c:	b21a      	sxth	r2, r3
 800179e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	81fb      	strh	r3, [r7, #14]

	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,data,WRITE);
 80017a8:	89fa      	ldrh	r2, [r7, #14]
 80017aa:	2301      	movs	r3, #1
 80017ac:	2102      	movs	r1, #2
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fe10 	bl	80013d4 <DRV8301_SPI_ReadWrite>

}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <DRV8301_Set_Gain>:

//设置电流增益值
void DRV8301_Set_Gain(DRV8301_TypeDef *DRV8301,Gain_Type Gain)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
	uint16_t data=DRV8301_SPI_ReadWrite(DRV8301,Control_Register_2,0,READ) & 0x7ff;
 80017c8:	2300      	movs	r3, #0
 80017ca:	2200      	movs	r2, #0
 80017cc:	2103      	movs	r1, #3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fe00 	bl	80013d4 <DRV8301_SPI_ReadWrite>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017da:	81fb      	strh	r3, [r7, #14]



	data |= (((uint16_t)Gain)<<GAIN_OFFSET);//设置增益
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	81fb      	strh	r3, [r7, #14]

	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_2,data,WRITE);
 80017ec:	89fa      	ldrh	r2, [r7, #14]
 80017ee:	2301      	movs	r3, #1
 80017f0:	2103      	movs	r1, #3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fdee 	bl	80013d4 <DRV8301_SPI_ReadWrite>


	DRV8301->I_Gain_mode = Gain;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	745a      	strb	r2, [r3, #17]
	if(DRV8301->I_Gain_mode == Gain_10)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7c5b      	ldrb	r3, [r3, #17]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <DRV8301_Set_Gain+0x52>
	{
		DRV8301->I_Gain = 10.0f;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <DRV8301_Set_Gain+0x88>)
 800180a:	615a      	str	r2, [r3, #20]
	}
	else if(DRV8301->I_Gain_mode == Gain_80)
	{
		DRV8301->I_Gain = 80.0f;
	}
}
 800180c:	e016      	b.n	800183c <DRV8301_Set_Gain+0x80>
	else if(DRV8301->I_Gain_mode == Gain_20)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7c5b      	ldrb	r3, [r3, #17]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d103      	bne.n	800181e <DRV8301_Set_Gain+0x62>
		DRV8301->I_Gain = 20.0f;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <DRV8301_Set_Gain+0x8c>)
 800181a:	615a      	str	r2, [r3, #20]
}
 800181c:	e00e      	b.n	800183c <DRV8301_Set_Gain+0x80>
	else if(DRV8301->I_Gain_mode == Gain_40)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7c5b      	ldrb	r3, [r3, #17]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d103      	bne.n	800182e <DRV8301_Set_Gain+0x72>
		DRV8301->I_Gain = 40.0f;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a08      	ldr	r2, [pc, #32]	; (800184c <DRV8301_Set_Gain+0x90>)
 800182a:	615a      	str	r2, [r3, #20]
}
 800182c:	e006      	b.n	800183c <DRV8301_Set_Gain+0x80>
	else if(DRV8301->I_Gain_mode == Gain_80)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7c5b      	ldrb	r3, [r3, #17]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d102      	bne.n	800183c <DRV8301_Set_Gain+0x80>
		DRV8301->I_Gain = 80.0f;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <DRV8301_Set_Gain+0x94>)
 800183a:	615a      	str	r2, [r3, #20]
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	41200000 	.word	0x41200000
 8001848:	41a00000 	.word	0x41a00000
 800184c:	42200000 	.word	0x42200000
 8001850:	42a00000 	.word	0x42a00000

08001854 <DRV8301_GATE_CURRENT>:



//设置栅极驱动电流，不能太大
void DRV8301_GATE_CURRENT(DRV8301_TypeDef *DRV8301,Peak_Current_Type current)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
	uint16_t data=DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,0,READ);
 8001860:	2300      	movs	r3, #0
 8001862:	2200      	movs	r2, #0
 8001864:	2102      	movs	r1, #2
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fdb4 	bl	80013d4 <DRV8301_SPI_ReadWrite>
 800186c:	4603      	mov	r3, r0
 800186e:	81fb      	strh	r3, [r7, #14]

	if(current == peak_current_1A7)
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <DRV8301_GATE_CURRENT+0x3a>
	{
		data &= (~(peak_current_1A7<<GATE_CURRENT_OFFSET));//1.7A
	}
	else if(current == peak_current_0A7){
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d104      	bne.n	8001886 <DRV8301_GATE_CURRENT+0x32>
		data |= (peak_current_0A7<<GATE_CURRENT_OFFSET);//0x7A
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	81fb      	strh	r3, [r7, #14]
 8001884:	e003      	b.n	800188e <DRV8301_GATE_CURRENT+0x3a>
	}
	else {
		data |= (peak_current_0A25<<GATE_CURRENT_OFFSET);//0x25A
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	81fb      	strh	r3, [r7, #14]
	}
	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,data,WRITE);
 800188e:	89fa      	ldrh	r2, [r7, #14]
 8001890:	2301      	movs	r3, #1
 8001892:	2102      	movs	r1, #2
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fd9d 	bl	80013d4 <DRV8301_SPI_ReadWrite>

}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <DRV8301_PWM_Mode>:



//3PWM mode / 6PWM mode切换
void DRV8301_PWM_Mode(DRV8301_TypeDef *DRV8301,Pwm_Mode_Type mode)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
	uint16_t data=DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,0,READ);
 80018ae:	2300      	movs	r3, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	2102      	movs	r1, #2
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff fd8d 	bl	80013d4 <DRV8301_SPI_ReadWrite>
 80018ba:	4603      	mov	r3, r0
 80018bc:	81fb      	strh	r3, [r7, #14]

	if(mode == PWM_6_MODE)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d104      	bne.n	80018ce <DRV8301_PWM_Mode+0x2c>
	{
		data &= (~(0x01<<PWM_MODE_OFFSET));//3pwm mode
 80018c4:	89fb      	ldrh	r3, [r7, #14]
 80018c6:	f023 0308 	bic.w	r3, r3, #8
 80018ca:	81fb      	strh	r3, [r7, #14]
 80018cc:	e003      	b.n	80018d6 <DRV8301_PWM_Mode+0x34>
	}
	else {
		data |= (0x01<<PWM_MODE_OFFSET);//3pwm mode
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	81fb      	strh	r3, [r7, #14]
	}

	DRV8301_SPI_ReadWrite(DRV8301,Control_Register_1,data,WRITE);
 80018d6:	89fa      	ldrh	r2, [r7, #14]
 80018d8:	2301      	movs	r3, #1
 80018da:	2102      	movs	r1, #2
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff fd79 	bl	80013d4 <DRV8301_SPI_ReadWrite>

	DRV8301->PWM_Mode = mode;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <TIM_US_COUNT>:
//用于计算FOC运行时长
TimerStruct timer_foc={0,0,&htim5};

//us计时,一个定时器只能有一个TimerStruct结构体，不然会混乱
static void TIM_US_COUNT(TimerStruct *timer)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    if(timer->flag == 0)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d112      	bne.n	8001926 <TIM_US_COUNT+0x36>
    {
        // 开始计时
        __HAL_TIM_SetCounter(timer->htim_us, 0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_TIM_ENABLE(timer->htim_us);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
        timer->flag = 1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
        timer->flag = 0;
        // 停止计时
        __HAL_TIM_DISABLE(timer->htim_us);
        timer->time = __HAL_TIM_GetCounter(timer->htim_us); // 计时完毕,最大只能计到 65ms
    }
}
 8001924:	e029      	b.n	800197a <TIM_US_COUNT+0x8a>
        timer->flag = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_DISABLE(timer->htim_us);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	f241 1311 	movw	r3, #4369	; 0x1111
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d112      	bne.n	8001964 <TIM_US_COUNT+0x74>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6a1a      	ldr	r2, [r3, #32]
 8001946:	f240 4344 	movw	r3, #1092	; 0x444
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <TIM_US_COUNT+0x74>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
        timer->time = __HAL_TIM_GetCounter(timer->htim_us); // 计时完毕,最大只能计到 65ms
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_IncTick>:
float TIME=0;
int FPS=0,fps=0;
int TIME_FPS=0;
int time_fps=0;
void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_IncTick+0x68>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_IncTick+0x6c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <HAL_IncTick+0x6c>)
 800199a:	6013      	str	r3, [r2, #0]
  if(uwTick%1000 == 0)
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_IncTick+0x6c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_IncTick+0x70>)
 80019a2:	fba3 1302 	umull	r1, r3, r3, r2
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_IncTick+0x3c>
  {
	  FPS=fps;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_IncTick+0x74>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_IncTick+0x78>)
 80019bc:	6013      	str	r3, [r2, #0]
	  fps=0;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_IncTick+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

  }
  //每100ms采样一次电源电压和双路温度
  if(uwTick%10 == 0)
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_IncTick+0x6c>)
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_IncTick+0x7c>)
 80019ca:	fba3 2301 	umull	r2, r3, r3, r1
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	1aca      	subs	r2, r1, r3
 80019da:	2a00      	cmp	r2, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_IncTick+0x5c>
  {
	  adc_flag=1;
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_IncTick+0x80>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
//	  TIME+=1;
  }
//  TIME+=0.001;	//ms计时
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200002e4 	.word	0x200002e4
 80019f4:	20001628 	.word	0x20001628
 80019f8:	10624dd3 	.word	0x10624dd3
 80019fc:	20000554 	.word	0x20000554
 8001a00:	20000550 	.word	0x20000550
 8001a04:	cccccccd 	.word	0xcccccccd
 8001a08:	200004ea 	.word	0x200004ea

08001a0c <HAL_ADCEx_InjectedConvCpltCallback>:


//注入通道adc中断
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    if(hadc->Instance==ADC1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d102      	bne.n	8001a24 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
        {
//        HAL_GPIO_TogglePin(SERVO0_GPIO_Port, SERVO0_Pin);

//        TIM_US_COUNT(&timer_foc);
        //进行三环运算，执行svpwm
        FOC_Run(&motor1);
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 8001a20:	f000 fb9e 	bl	8002160 <FOC_Run>
//        TIM_US_COUNT(&timer_foc);

//        HAL_GPIO_TogglePin(SERVO0_GPIO_Port, SERVO0_Pin);
        }
    if(hadc->Instance==ADC3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <HAL_ADCEx_InjectedConvCpltCallback+0x34>
        {
//    	HAL_GPIO_TogglePin(SERVO1_GPIO_Port, SERVO1_Pin);

    	TIM_US_COUNT(&timer_foc);
 8001a2e:	4809      	ldr	r0, [pc, #36]	; (8001a54 <HAL_ADCEx_InjectedConvCpltCallback+0x48>)
 8001a30:	f7ff ff5e 	bl	80018f0 <TIM_US_COUNT>
        //进行三环运算，执行svpwm
        FOC_Run(&motor2);
 8001a34:	4808      	ldr	r0, [pc, #32]	; (8001a58 <HAL_ADCEx_InjectedConvCpltCallback+0x4c>)
 8001a36:	f000 fb93 	bl	8002160 <FOC_Run>
        TIM_US_COUNT(&timer_foc);
 8001a3a:	4806      	ldr	r0, [pc, #24]	; (8001a54 <HAL_ADCEx_InjectedConvCpltCallback+0x48>)
 8001a3c:	f7ff ff58 	bl	80018f0 <TIM_US_COUNT>

//        HAL_GPIO_TogglePin(SERVO1_GPIO_Port, SERVO1_Pin);
        }
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	2000018c 	.word	0x2000018c
 8001a50:	40012200 	.word	0x40012200
 8001a54:	20000098 	.word	0x20000098
 8001a58:	200001f8 	.word	0x200001f8

08001a5c <FOC_Current_Init>:



//电流采样偏移值初始化，开启电源电压和温度采样
void FOC_Current_Init(Motor_Run_Typedef *motor)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    float ia = 0, ib = 0;
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
    int count = 100;
 8001a70:	2364      	movs	r3, #100	; 0x64
 8001a72:	613b      	str	r3, [r7, #16]
    int scale = 100; // 定义放大系数，用于消除小数点
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	60fb      	str	r3, [r7, #12]

    /****************************进行A,B两相电流检测通道校准***************************/
//    DRV8301_DC_CAL(motor->DRV8301, ON);
    // 采样count次取平均值
    for (int i = 0; i < count; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e03e      	b.n	8001afc <FOC_Current_Init+0xa0>
    {
        HAL_ADC_Start(motor->hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fefa 	bl	800587c <HAL_ADC_Start>
        while (HAL_ADC_PollForConversion(motor->hadc, 50));
 8001a88:	bf00      	nop
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2132      	movs	r1, #50	; 0x32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 ffc5 	bl	8005a20 <HAL_ADC_PollForConversion>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f6      	bne.n	8001a8a <FOC_Current_Init+0x2e>
        ia += (float)HAL_ADC_GetValue(motor->hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fa69 	bl	8005f78 <HAL_ADC_GetValue>
 8001aa6:	ee07 0a90 	vmov	s15, r0
 8001aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aae:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        HAL_ADC_Start(motor->hadc);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fedc 	bl	800587c <HAL_ADC_Start>
        while (HAL_ADC_PollForConversion(motor->hadc, 50));
 8001ac4:	bf00      	nop
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2132      	movs	r1, #50	; 0x32
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 ffa7 	bl	8005a20 <HAL_ADC_PollForConversion>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f6      	bne.n	8001ac6 <FOC_Current_Init+0x6a>
        ib += (float)HAL_ADC_GetValue(motor->hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fa4b 	bl	8005f78 <HAL_ADC_GetValue>
 8001ae2:	ee07 0a90 	vmov	s15, r0
 8001ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aea:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < count; i++)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dbbc      	blt.n	8001a7e <FOC_Current_Init+0x22>
    }

    // 计算平均值并转换为整数形式的浮点数
    motor->I_A_Offset = (int)(ia / count * scale + 0.5f) / scale; // 加0.5用于四舍五入
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b30:	ee17 2a90 	vmov	r2, s15
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    motor->I_B_Offset = (int)(ib / count * scale + 0.5f) / scale; // 加0.5用于四舍五入
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b52:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b74:	ee17 2a90 	vmov	r2, s15
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
//    DRV8301_DC_CAL(motor->DRV8301, OFF);

}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <FOC_Init>:

//FOC运行初始化
void FOC_Init(Motor_Run_Typedef *motor)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b092      	sub	sp, #72	; 0x48
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	float data[MAX_DATA_COUNT];

	//初始化参数数组
	for(int i=0;i<MAX_DATA_COUNT;i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ba0:	e00a      	b.n	8001bb8 <FOC_Init+0x24>
	{
		data[i]=0;
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	3348      	adds	r3, #72	; 0x48
 8001ba8:	443b      	add	r3, r7
 8001baa:	3b40      	subs	r3, #64	; 0x40
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
	for(int i=0;i<MAX_DATA_COUNT;i++)
 8001bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bba:	2b0e      	cmp	r3, #14
 8001bbc:	ddf1      	ble.n	8001ba2 <FOC_Init+0xe>
	}


	//电源电压采样初始化
	FOC_Regular_ADC_INIT();
 8001bbe:	f000 f92b 	bl	8001e18 <FOC_Regular_ADC_INIT>
	//动态积分限幅
	motor->Iq_pid->integralLimitMin = -VBUS*_1_sqrt3;
 8001bc2:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <FOC_Init+0x264>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eef1 7a67 	vneg.f32	s15, s15
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001dfc <FOC_Init+0x268>
 8001bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd8:	edc3 7a05 	vstr	s15, [r3, #20]
	motor->Iq_pid->integralLimitMax = VBUS*_1_sqrt3;
 8001bdc:	4b86      	ldr	r3, [pc, #536]	; (8001df8 <FOC_Init+0x264>)
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001dfc <FOC_Init+0x268>
 8001bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bee:	edc3 7a06 	vstr	s15, [r3, #24]
	motor->Id_pid->integralLimitMin = -VBUS*_1_sqrt3;
 8001bf2:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <FOC_Init+0x264>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	eef1 7a67 	vneg.f32	s15, s15
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c00:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001dfc <FOC_Init+0x268>
 8001c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c08:	edc3 7a05 	vstr	s15, [r3, #20]
	motor->Id_pid->integralLimitMax = VBUS*_1_sqrt3;
 8001c0c:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <FOC_Init+0x264>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c16:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001dfc <FOC_Init+0x268>
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1e:	edc3 7a06 	vstr	s15, [r3, #24]
	//计算定时器中断频率
	calculateInterruptFrequency(motor);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 f8c5 	bl	8002db2 <calculateInterruptFrequency>
	//使能电机驱动芯片
	FOC_EN(motor, ON);
 8001c28:	2101      	movs	r1, #1
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fc19 	bl	8002462 <FOC_EN>
	//电流采样初始化偏置
	FOC_Current_Init(motor);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff13 	bl	8001a5c <FOC_Current_Init>

	printf("*********************motor%1d************************\n",motor->DRV8301->id);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4870      	ldr	r0, [pc, #448]	; (8001e00 <FOC_Init+0x26c>)
 8001c40:	f00a f996 	bl	800bf70 <iprintf>

	//读寄存器参数,无异常则继续
	if(DRV8301_Read_Protect(motor->DRV8301)==1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fa39 	bl	80010c0 <DRV8301_Read_Protect>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	f040 80ae 	bne.w	8001db2 <FOC_Init+0x21e>
	{

		//PWM通道初始化
		if(motor->DRV8301->PWM_Mode == PWM_6_MODE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d124      	bne.n	8001caa <FOC_Init+0x116>
		{
			HAL_TIM_PWM_Start(motor->htim,TIM_CHANNEL_1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f006 ff44 	bl	8008af4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(motor->htim,TIM_CHANNEL_2);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 ff3e 	bl	8008af4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(motor->htim,TIM_CHANNEL_3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f006 ff38 	bl	8008af4 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(motor->htim, TIM_CHANNEL_1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f007 fdc4 	bl	8009818 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(motor->htim, TIM_CHANNEL_2);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2104      	movs	r1, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f007 fdbe 	bl	8009818 <HAL_TIMEx_PWMN_Start>
			HAL_TIMEx_PWMN_Start(motor->htim, TIM_CHANNEL_3);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 fdb8 	bl	8009818 <HAL_TIMEx_PWMN_Start>
 8001ca8:	e011      	b.n	8001cce <FOC_Init+0x13a>
		}
		else
		{
			HAL_TIM_PWM_Start(motor->htim,TIM_CHANNEL_1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f006 ff1f 	bl	8008af4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(motor->htim,TIM_CHANNEL_2);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2104      	movs	r1, #4
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f006 ff19 	bl	8008af4 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(motor->htim,TIM_CHANNEL_3);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 ff13 	bl	8008af4 <HAL_TIM_PWM_Start>
		}

		//获取ARR值
		motor->PWM_Period = getTimerARR(motor->htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 f85a 	bl	8002d8c <getTimerARR>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	801a      	strh	r2, [r3, #0]

		printf("PWM_Period:%7d\n",motor->PWM_Period);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4847      	ldr	r0, [pc, #284]	; (8001e04 <FOC_Init+0x270>)
 8001ce8:	f00a f942 	bl	800bf70 <iprintf>


		//比较值初始化为0
		__HAL_TIM_SET_COMPARE(motor->htim, TIM_CHANNEL_1,0);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(motor->htim, TIM_CHANNEL_2,0);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(motor->htim, TIM_CHANNEL_3,0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	63da      	str	r2, [r3, #60]	; 0x3c

		//首次运行会执行电机参数辨识操作
		if (isDataStoredInFlash(motor->DRV8301->id))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 fda3 	bl	800385c <isDataStoredInFlash>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <FOC_Init+0x1b4>
		{
			readMultipleDataFromFlash(data, MAX_DATA_COUNT,motor->DRV8301->id);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	210f      	movs	r1, #15
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 fd67 	bl	80037fc <readMultipleDataFromFlash>
			motor->Parameters->zero_electric_angle =  data[1];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	601a      	str	r2, [r3, #0]
			motor->Parameters->DIR =  data[2];
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]
			motor->Parameters->Pole_pair =  data[3];
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	e01d      	b.n	8001d84 <FOC_Init+0x1f0>
		}
		else	//还没存储参数
		{
			//进行参数校准,成功校准参数则返回1，并写入参数
			if(Motor_Parameter_Identification(motor,data)==1)
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fba6 	bl	80024a0 <Motor_Parameter_Identification>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d114      	bne.n	8001d84 <FOC_Init+0x1f0>
			{
				writeMultipleDataToFlash(data, MAX_DATA_COUNT,motor->DRV8301->id);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	210f      	movs	r1, #15
 8001d66:	4618      	mov	r0, r3
 8001d68:	f001 fcfa 	bl	8003760 <writeMultipleDataToFlash>
				motor->Parameters->zero_electric_angle =  data[1];
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]
				motor->Parameters->DIR =  data[2];
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	605a      	str	r2, [r3, #4]
				motor->Parameters->Pole_pair =  data[3];
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	609a      	str	r2, [r3, #8]
			}

		}
		//定时器通道4用来触发adc采样
		__HAL_TIM_SET_COMPARE(motor->htim, TIM_CHANNEL_4,motor->PWM_Period-1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(motor->htim,TIM_CHANNEL_4);  // 启动定时器
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	210c      	movs	r1, #12
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f006 feab 	bl	8008af4 <HAL_TIM_PWM_Start>

		//开启双路电流采样
		HAL_TIM_Base_Start_IT(motor->htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f006 fddc 	bl	8008960 <HAL_TIM_Base_Start_IT>
		HAL_ADCEx_InjectedStart_IT(motor->hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 fbb9 	bl	8006524 <HAL_ADCEx_InjectedStart_IT>
	}
	printf("zero_electric_angle:%7.3f\n",data[1]);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbc7 	bl	8000548 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4812      	ldr	r0, [pc, #72]	; (8001e08 <FOC_Init+0x274>)
 8001dc0:	f00a f8d6 	bl	800bf70 <iprintf>
	printf("DIR:%7.3f\n",data[2]);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbbe 	bl	8000548 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <FOC_Init+0x278>)
 8001dd2:	f00a f8cd 	bl	800bf70 <iprintf>
	printf("Pole_pair:%7.3f\n",data[3]);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbb5 	bl	8000548 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	480b      	ldr	r0, [pc, #44]	; (8001e10 <FOC_Init+0x27c>)
 8001de4:	f00a f8c4 	bl	800bf70 <iprintf>
	printf("*************************************************\n");
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <FOC_Init+0x280>)
 8001dea:	f00a f927 	bl	800c03c <puts>

}
 8001dee:	bf00      	nop
 8001df0:	3748      	adds	r7, #72	; 0x48
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200000a4 	.word	0x200000a4
 8001dfc:	3f13cd3a 	.word	0x3f13cd3a
 8001e00:	080107c0 	.word	0x080107c0
 8001e04:	080107f8 	.word	0x080107f8
 8001e08:	08010808 	.word	0x08010808
 8001e0c:	08010824 	.word	0x08010824
 8001e10:	08010830 	.word	0x08010830
 8001e14:	08010844 	.word	0x08010844

08001e18 <FOC_Regular_ADC_INIT>:


//常规采样初始化
void FOC_Regular_ADC_INIT(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	static int flag=1;
	if(flag==1)
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <FOC_Regular_ADC_INIT+0x128>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	f040 8088 	bne.w	8001f38 <FOC_Regular_ADC_INIT+0x120>
	{
		flag=0;
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <FOC_Regular_ADC_INIT+0x128>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
		// 开启电源电压和双路温度采样
		HAL_ADC_Start_DMA(&hadc2, (uint32_t *)ADC2_Value_buffer, 3);
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4944      	ldr	r1, [pc, #272]	; (8001f44 <FOC_Regular_ADC_INIT+0x12c>)
 8001e32:	4845      	ldr	r0, [pc, #276]	; (8001f48 <FOC_Regular_ADC_INIT+0x130>)
 8001e34:	f003 ff90 	bl	8005d58 <HAL_ADC_Start_DMA>
		HAL_Delay(1);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f003 fcb7 	bl	80057ac <HAL_Delay>
		VBUS = (float)ADC2_Value_buffer[0] / 4095.0f * 3.3f * 41.2f / 2.2f;
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <FOC_Regular_ADC_INIT+0x12c>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e4a:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001f4c <FOC_Regular_ADC_INIT+0x134>
 8001e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e52:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001f50 <FOC_Regular_ADC_INIT+0x138>
 8001e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001f54 <FOC_Regular_ADC_INIT+0x13c>
 8001e5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001f58 <FOC_Regular_ADC_INIT+0x140>
 8001e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <FOC_Regular_ADC_INIT+0x144>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]
		float filtered_temp1Value = (float)ADC2_Value_buffer[1] / 4095.0f * 3.3f;
 8001e70:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <FOC_Regular_ADC_INIT+0x12c>)
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7c:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001f4c <FOC_Regular_ADC_INIT+0x134>
 8001e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e84:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001f50 <FOC_Regular_ADC_INIT+0x138>
 8001e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8c:	edc7 7a01 	vstr	s15, [r7, #4]
		TEMP1 = getTemperatureFromTable(3.3f * 3300.0f / filtered_temp1Value - 3300.0f);
 8001e90:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001f60 <FOC_Regular_ADC_INIT+0x148>
 8001e94:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001f64 <FOC_Regular_ADC_INIT+0x14c>
 8001ea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea8:	f001 f9ce 	bl	8003248 <getTemperatureFromTable>
 8001eac:	eef0 7a40 	vmov.f32	s15, s0
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <FOC_Regular_ADC_INIT+0x150>)
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
		float filtered_temp2Value = (float)ADC2_Value_buffer[2] / 4095.0f * 3.3f;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <FOC_Regular_ADC_INIT+0x12c>)
 8001eb8:	889b      	ldrh	r3, [r3, #4]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec2:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001f4c <FOC_Regular_ADC_INIT+0x134>
 8001ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eca:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f50 <FOC_Regular_ADC_INIT+0x138>
 8001ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed2:	edc7 7a00 	vstr	s15, [r7]
		TEMP2 = getTemperatureFromTable(3.3f * 3300.0f / filtered_temp2Value - 3300.0f);
 8001ed6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001f60 <FOC_Regular_ADC_INIT+0x148>
 8001eda:	ed97 7a00 	vldr	s14, [r7]
 8001ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001f64 <FOC_Regular_ADC_INIT+0x14c>
 8001ee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eea:	eeb0 0a67 	vmov.f32	s0, s15
 8001eee:	f001 f9ab 	bl	8003248 <getTemperatureFromTable>
 8001ef2:	eef0 7a40 	vmov.f32	s15, s0
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <FOC_Regular_ADC_INIT+0x154>)
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
		printf("VBUS:%7.2f\n",VBUS);
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <FOC_Regular_ADC_INIT+0x144>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb21 	bl	8000548 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4819      	ldr	r0, [pc, #100]	; (8001f70 <FOC_Regular_ADC_INIT+0x158>)
 8001f0c:	f00a f830 	bl	800bf70 <iprintf>
		printf("TEMP1:%7.2f\n",TEMP1);
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <FOC_Regular_ADC_INIT+0x150>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb17 	bl	8000548 <__aeabi_f2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4815      	ldr	r0, [pc, #84]	; (8001f74 <FOC_Regular_ADC_INIT+0x15c>)
 8001f20:	f00a f826 	bl	800bf70 <iprintf>
		printf("TEMP2:%7.2f\n",TEMP1);
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <FOC_Regular_ADC_INIT+0x150>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb0d 	bl	8000548 <__aeabi_f2d>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4811      	ldr	r0, [pc, #68]	; (8001f78 <FOC_Regular_ADC_INIT+0x160>)
 8001f34:	f00a f81c 	bl	800bf70 <iprintf>
	}

}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000264 	.word	0x20000264
 8001f44:	200004f4 	.word	0x200004f4
 8001f48:	200012f4 	.word	0x200012f4
 8001f4c:	457ff000 	.word	0x457ff000
 8001f50:	40533333 	.word	0x40533333
 8001f54:	4224cccd 	.word	0x4224cccd
 8001f58:	400ccccd 	.word	0x400ccccd
 8001f5c:	200000a4 	.word	0x200000a4
 8001f60:	462a2800 	.word	0x462a2800
 8001f64:	454e4000 	.word	0x454e4000
 8001f68:	200004ec 	.word	0x200004ec
 8001f6c:	200004f0 	.word	0x200004f0
 8001f70:	08010878 	.word	0x08010878
 8001f74:	08010884 	.word	0x08010884
 8001f78:	08010894 	.word	0x08010894

08001f7c <FOC_Regular_ADC>:


// FOC - adc 常规通道采样
void FOC_Regular_ADC(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
    static float sum_temp1Value = 0.0f; // 存储第一个温度总和
    static float sum_temp2Value = 0.0f; // 存储第二个温度总和

    /***************************电源电压&双路温度采样**************************/

    if (adc_flag == 1)
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <FOC_Regular_ADC+0x19c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	f040 80c5 	bne.w	8002114 <FOC_Regular_ADC+0x198>
    {
        // 对电源电压采样值进行均值滤波
        sum_VBUS += (float)ADC2_Value_buffer[0] / 4095.0f * 3.3f * 41.2f / 2.2f;
 8001f8a:	4b64      	ldr	r3, [pc, #400]	; (800211c <FOC_Regular_ADC+0x1a0>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f96:	eddf 6a62 	vldr	s13, [pc, #392]	; 8002120 <FOC_Regular_ADC+0x1a4>
 8001f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002124 <FOC_Regular_ADC+0x1a8>
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002128 <FOC_Regular_ADC+0x1ac>
 8001faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800212c <FOC_Regular_ADC+0x1b0>
 8001fb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fb6:	4b5e      	ldr	r3, [pc, #376]	; (8002130 <FOC_Regular_ADC+0x1b4>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc0:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <FOC_Regular_ADC+0x1b4>)
 8001fc2:	edc3 7a00 	vstr	s15, [r3]
        if (count >= filter_count)
 8001fc6:	4b5b      	ldr	r3, [pc, #364]	; (8002134 <FOC_Regular_ADC+0x1b8>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <FOC_Regular_ADC+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	db14      	blt.n	8001ffc <FOC_Regular_ADC+0x80>
        {
            VBUS = sum_VBUS / filter_count;
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <FOC_Regular_ADC+0x1b4>)
 8001fd4:	edd3 6a00 	vldr	s13, [r3]
 8001fd8:	4b57      	ldr	r3, [pc, #348]	; (8002138 <FOC_Regular_ADC+0x1bc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe8:	4b54      	ldr	r3, [pc, #336]	; (800213c <FOC_Regular_ADC+0x1c0>)
 8001fea:	edc3 7a00 	vstr	s15, [r3]
            sum_VBUS = 0.0f;
 8001fee:	4b50      	ldr	r3, [pc, #320]	; (8002130 <FOC_Regular_ADC+0x1b4>)
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
            count = 0;
 8001ff6:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <FOC_Regular_ADC+0x1b8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
        }

        // 对第一个温度采样值进行均值滤波
        sum_temp1Value += (float)ADC2_Value_buffer[1] / 4095.0f * 3.3f;
 8001ffc:	4b47      	ldr	r3, [pc, #284]	; (800211c <FOC_Regular_ADC+0x1a0>)
 8001ffe:	885b      	ldrh	r3, [r3, #2]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002008:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002120 <FOC_Regular_ADC+0x1a4>
 800200c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002010:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002124 <FOC_Regular_ADC+0x1a8>
 8002014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <FOC_Regular_ADC+0x1c4>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <FOC_Regular_ADC+0x1c4>)
 8002024:	edc3 7a00 	vstr	s15, [r3]
        if (count >= filter_count)
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <FOC_Regular_ADC+0x1b8>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <FOC_Regular_ADC+0x1bc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	db25      	blt.n	8002080 <FOC_Regular_ADC+0x104>
        {
            filtered_temp1Value = sum_temp1Value / filter_count;
 8002034:	4b42      	ldr	r3, [pc, #264]	; (8002140 <FOC_Regular_ADC+0x1c4>)
 8002036:	edd3 6a00 	vldr	s13, [r3]
 800203a:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <FOC_Regular_ADC+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <FOC_Regular_ADC+0x1c8>)
 800204c:	edc3 7a00 	vstr	s15, [r3]
            sum_temp1Value = 0.0f;
 8002050:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <FOC_Regular_ADC+0x1c4>)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
            TEMP1 = getTemperatureFromTable(3.3f * 3300.0f / filtered_temp1Value - 3300.0f);
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <FOC_Regular_ADC+0x1c8>)
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002148 <FOC_Regular_ADC+0x1cc>
 8002062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002066:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800214c <FOC_Regular_ADC+0x1d0>
 800206a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800206e:	eeb0 0a67 	vmov.f32	s0, s15
 8002072:	f001 f8e9 	bl	8003248 <getTemperatureFromTable>
 8002076:	eef0 7a40 	vmov.f32	s15, s0
 800207a:	4b35      	ldr	r3, [pc, #212]	; (8002150 <FOC_Regular_ADC+0x1d4>)
 800207c:	edc3 7a00 	vstr	s15, [r3]
        }

        // 对第二个温度采样值进行均值滤波
        sum_temp2Value += (float)ADC2_Value_buffer[2] / 4095.0f * 3.3f;
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <FOC_Regular_ADC+0x1a0>)
 8002082:	889b      	ldrh	r3, [r3, #4]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800208c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002120 <FOC_Regular_ADC+0x1a4>
 8002090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002094:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002124 <FOC_Regular_ADC+0x1a8>
 8002098:	ee27 7a87 	vmul.f32	s14, s15, s14
 800209c:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <FOC_Regular_ADC+0x1d8>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <FOC_Regular_ADC+0x1d8>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
        if (count >= filter_count)
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <FOC_Regular_ADC+0x1b8>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <FOC_Regular_ADC+0x1bc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	db25      	blt.n	8002104 <FOC_Regular_ADC+0x188>
        {
            filtered_temp2Value = sum_temp2Value / filter_count;
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <FOC_Regular_ADC+0x1d8>)
 80020ba:	edd3 6a00 	vldr	s13, [r3]
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <FOC_Regular_ADC+0x1bc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <FOC_Regular_ADC+0x1dc>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]
            sum_temp2Value = 0.0f;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <FOC_Regular_ADC+0x1d8>)
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
            TEMP2 = getTemperatureFromTable(3.3f * 3300.0f / filtered_temp2Value - 3300.0f);
 80020dc:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <FOC_Regular_ADC+0x1dc>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002148 <FOC_Regular_ADC+0x1cc>
 80020e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800214c <FOC_Regular_ADC+0x1d0>
 80020ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	f001 f8a7 	bl	8003248 <getTemperatureFromTable>
 80020fa:	eef0 7a40 	vmov.f32	s15, s0
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <FOC_Regular_ADC+0x1e0>)
 8002100:	edc3 7a00 	vstr	s15, [r3]
        }


        count++;
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <FOC_Regular_ADC+0x1b8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <FOC_Regular_ADC+0x1b8>)
 800210c:	6013      	str	r3, [r2, #0]
        adc_flag = 0;
 800210e:	4b02      	ldr	r3, [pc, #8]	; (8002118 <FOC_Regular_ADC+0x19c>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
    }
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200004ea 	.word	0x200004ea
 800211c:	200004f4 	.word	0x200004f4
 8002120:	457ff000 	.word	0x457ff000
 8002124:	40533333 	.word	0x40533333
 8002128:	4224cccd 	.word	0x4224cccd
 800212c:	400ccccd 	.word	0x400ccccd
 8002130:	20000558 	.word	0x20000558
 8002134:	2000055c 	.word	0x2000055c
 8002138:	20000268 	.word	0x20000268
 800213c:	200000a4 	.word	0x200000a4
 8002140:	20000560 	.word	0x20000560
 8002144:	20000564 	.word	0x20000564
 8002148:	462a2800 	.word	0x462a2800
 800214c:	454e4000 	.word	0x454e4000
 8002150:	200004ec 	.word	0x200004ec
 8002154:	20000568 	.word	0x20000568
 8002158:	2000056c 	.word	0x2000056c
 800215c:	200004f0 	.word	0x200004f0

08002160 <FOC_Run>:
	return TEMP2;
}

//简单运行foc算法/20khz
void FOC_Run(Motor_Run_Typedef *motor)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

	//只有开启foc算法才执行
	if(motor->run_flag==1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d12e      	bne.n	80021ce <FOC_Run+0x6e>
	{
		//如果没有报错才进行下一步
		if(DRV8301_Check_Fault(motor->DRV8301)==0)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe ff8d 	bl	8001094 <DRV8301_Check_Fault>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d126      	bne.n	80021ce <FOC_Run+0x6e>
		{
		  // 求电流值
			FOC_Get_Ia_Ib_Ic(motor);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fe45 	bl	8002e10 <FOC_Get_Ia_Ib_Ic>
			//将三相电流转换成Id,Iq
			FOC_clarke_park_Transform(motor);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fe8e 	bl	8002ea8 <FOC_clarke_park_Transform>
			//获取编码器位置
			FOC_Get_electricalAngle_speed(motor);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fedf 	bl	8002f50 <FOC_Get_electricalAngle_speed>
//			FOC_CLOSED_Pos(&motor2,pos);
			motor->except_iq = FOC_CLOSED_Vel(motor,vel);
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <FOC_Run+0x78>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	eeb0 0a67 	vmov.f32	s0, s15
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f947 	bl	8002430 <FOC_CLOSED_Vel>
 80021a2:	eef0 7a40 	vmov.f32	s15, s0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			motor->except_id = 0;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	649a      	str	r2, [r3, #72]	; 0x48
			//执行力矩控
			FOC_CLOSED_Iq(motor,motor->except_iq,motor->except_id);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80021c0:	eef0 0a47 	vmov.f32	s1, s14
 80021c4:	eeb0 0a67 	vmov.f32	s0, s15
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f875 	bl	80022b8 <FOC_CLOSED_Iq>
//			FOC_CLOSED_Iq(motor,uq,ud);
		}
	}


}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000d8c 	.word	0x20000d8c

080021dc <pidUpdateFloat>:

float pidUpdateFloat(PIDControllerFloat* pid, float expectedValue, float actualValue) {
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80021e8:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = expectedValue - actualValue;
 80021ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80021f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f8:	edc7 7a07 	vstr	s15, [r7, #28]
    float pTerm = pid->kp * error;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ed97 7a07 	vldr	s14, [r7, #28]
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a06 	vstr	s15, [r7, #24]

    pid->integral += error;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	ed93 7a03 	vldr	s14, [r3, #12]
 8002214:	edd7 7a07 	vldr	s15, [r7, #28]
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	edc3 7a03 	vstr	s15, [r3, #12]
    // 积分限幅
    if (pid->integral > pid->integralLimitMax) {
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	ed93 7a03 	vldr	s14, [r3, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	edd3 7a06 	vldr	s15, [r3, #24]
 800222e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	dd04      	ble.n	8002242 <pidUpdateFloat+0x66>
        pid->integral = pid->integralLimitMax;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	e00e      	b.n	8002260 <pidUpdateFloat+0x84>
    } else if (pid->integral < pid->integralLimitMin) {
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	ed93 7a03 	vldr	s14, [r3, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	edd3 7a05 	vldr	s15, [r3, #20]
 800224e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002256:	d503      	bpl.n	8002260 <pidUpdateFloat+0x84>
        pid->integral = pid->integralLimitMin;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	60da      	str	r2, [r3, #12]
    }

    float iTerm = pid->ki * pid->integral;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	ed93 7a01 	vldr	s14, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	edd3 7a03 	vldr	s15, [r3, #12]
 800226c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002270:	edc7 7a05 	vstr	s15, [r7, #20]
    float dTerm = pid->kd * (error - pid->prevError);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	ed93 7a02 	vldr	s14, [r3, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002280:	edd7 6a07 	vldr	s13, [r7, #28]
 8002284:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228c:	edc7 7a04 	vstr	s15, [r7, #16]
    pid->prevError = error;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	611a      	str	r2, [r3, #16]
    return pTerm + iTerm + dTerm;
 8002296:	ed97 7a06 	vldr	s14, [r7, #24]
 800229a:	edd7 7a05 	vldr	s15, [r7, #20]
 800229e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80022aa:	eeb0 0a67 	vmov.f32	s0, s15
 80022ae:	3724      	adds	r7, #36	; 0x24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <FOC_CLOSED_Iq>:

float err_speed=0;

//闭环力矩iq控制函数  控制频率 20khz
void FOC_CLOSED_Iq(Motor_Run_Typedef *motor,float Iq,float Id)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80022c4:	edc7 0a01 	vstr	s1, [r7, #4]
	float Uq=0,Ud=0;
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]

	motor->Iq_pid->integral+=(Iq-motor->I_q);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80022e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f2:	edc3 7a03 	vstr	s15, [r3, #12]
	motor->Iq_pid->integral = LIMIT(motor->Iq_pid->integral,motor->Iq_pid->integralLimitMin,motor->Iq_pid->integralLimitMax);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	edd3 7a06 	vldr	s15, [r3, #24]
 8002306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	dd03      	ble.n	8002318 <FOC_CLOSED_Iq+0x60>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	e013      	b.n	8002340 <FOC_CLOSED_Iq+0x88>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	edd3 7a05 	vldr	s15, [r3, #20]
 8002328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d503      	bpl.n	800233a <FOC_CLOSED_Iq+0x82>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	e002      	b.n	8002340 <FOC_CLOSED_Iq+0x88>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002344:	60d3      	str	r3, [r2, #12]
	Uq = Iq*motor->Iq_pid->kp+motor->Iq_pid->integral*motor->Iq_pid->ki;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	ed93 7a00 	vldr	s14, [r3]
 800234e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	edd3 6a03 	vldr	s13, [r3, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	edd3 7a01 	vldr	s15, [r3, #4]
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	edc7 7a05 	vstr	s15, [r7, #20]

	motor->Id_pid->integral+=(Id-motor->I_d);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	ed93 7a03 	vldr	s14, [r3, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002380:	edd7 6a01 	vldr	s13, [r7, #4]
 8002384:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	edc3 7a03 	vstr	s15, [r3, #12]
	motor->Id_pid->integral = LIMIT(motor->Id_pid->integral,motor->Id_pid->integralLimitMin,motor->Id_pid->integralLimitMax);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	ed93 7a03 	vldr	s14, [r3, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80023a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	dd03      	ble.n	80023b6 <FOC_CLOSED_Iq+0xfe>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	e013      	b.n	80023de <FOC_CLOSED_Iq+0x126>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80023c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	d503      	bpl.n	80023d8 <FOC_CLOSED_Iq+0x120>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	e002      	b.n	80023de <FOC_CLOSED_Iq+0x126>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80023e2:	60d3      	str	r3, [r2, #12]
	Ud = Id*motor->Id_pid->kp+motor->Id_pid->integral*motor->Id_pid->ki;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e8:	ed93 7a00 	vldr	s14, [r3]
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002400:	edd3 7a01 	vldr	s15, [r3, #4]
 8002404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	edc7 7a04 	vstr	s15, [r7, #16]

	//乘以方向确保正方向和编码器正方向一致
    FOC_SVPWM(motor,Uq ,Ud,motor->electricalAngle);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002416:	eeb0 1a67 	vmov.f32	s2, s15
 800241a:	edd7 0a04 	vldr	s1, [r7, #16]
 800241e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 faa8 	bl	8002978 <FOC_SVPWM>

}
 8002428:	bf00      	nop
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <FOC_CLOSED_Vel>:
//闭环速度控制函数 r/s  控制频率：10khz
float FOC_CLOSED_Vel(Motor_Run_Typedef *motor,float speed)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	ed87 0a00 	vstr	s0, [r7]

	return pidUpdateFloat(motor->V_pid,speed,motor->speed);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002446:	eef0 0a67 	vmov.f32	s1, s15
 800244a:	ed97 0a00 	vldr	s0, [r7]
 800244e:	4610      	mov	r0, r2
 8002450:	f7ff fec4 	bl	80021dc <pidUpdateFloat>
 8002454:	eef0 7a40 	vmov.f32	s15, s0

}
 8002458:	eeb0 0a67 	vmov.f32	s0, s15
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <FOC_EN>:
}


//使能/失能电机驱动芯片
void FOC_EN(Motor_Run_Typedef *motor,OperationType2 ON_OFF)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	70fb      	strb	r3, [r7, #3]
	//根据初始参数，初始DRV8301使能
	DRV8301_EN( motor->DRV8301,ON_OFF);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f930 	bl	80016dc <DRV8301_EN>

}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <FOC_Start>:

//开启foc
void FOC_Start(Motor_Run_Typedef *motor)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	motor->run_flag=1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	61da      	str	r2, [r3, #28]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <Motor_Parameter_Identification>:



//电机参数识别:data[0]-是否校准识别位,data[1]-零电角度，data[2]-方向，data[3]-极对数
int Motor_Parameter_Identification(Motor_Run_Typedef *motor,float* data)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
	float mid_angle,end_angle;
	float moved;
	float dir,zero_electric_angle;
	int pole_pairs;
	float angle0;
	float count=1000.0f,i;
 80024aa:	4b97      	ldr	r3, [pc, #604]	; (8002708 <Motor_Parameter_Identification+0x268>)
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24

	printf("Motor parameter identification starts.\r\n");
 80024ae:	4897      	ldr	r0, [pc, #604]	; (800270c <Motor_Parameter_Identification+0x26c>)
 80024b0:	f009 fdc4 	bl	800c03c <puts>


	/**************************记录零点偏移角度**********************************/
	//使能偏转
	FOC_SVPWM(motor,0, 1,  0);
 80024b4:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8002710 <Motor_Parameter_Identification+0x270>
 80024b8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80024bc:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002710 <Motor_Parameter_Identification+0x270>
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa59 	bl	8002978 <FOC_SVPWM>
	HAL_Delay(500);
 80024c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ca:	f003 f96f 	bl	80057ac <HAL_Delay>
	angle0=MT6701_GetAngle_ALL(motor->encoder);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fdc2 	bl	800305c <MT6701_GetAngle_ALL>
 80024d8:	ed87 0a08 	vstr	s0, [r7, #32]

	/**************************计算极对数**********************************/
	// find natural direction
	// move one electrical revolution forward
	for(i=0; i<=count; i++)
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e2:	e01f      	b.n	8002524 <Motor_Parameter_Identification+0x84>
	{
		angle = _2_PI * i / count;
 80024e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024e8:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002714 <Motor_Parameter_Identification+0x274>
 80024ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80024f0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80024f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f8:	edc7 7a02 	vstr	s15, [r7, #8]
		FOC_SVPWM(motor,0, 1,  angle);
 80024fc:	ed97 1a02 	vldr	s2, [r7, #8]
 8002500:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002504:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8002710 <Motor_Parameter_Identification+0x270>
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fa35 	bl	8002978 <FOC_SVPWM>
		HAL_Delay(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f003 f94c 	bl	80057ac <HAL_Delay>
	for(i=0; i<=count; i++)
 8002514:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800251c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002520:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002524:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002528:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800252c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002534:	d9d6      	bls.n	80024e4 <Motor_Parameter_Identification+0x44>
	}
	mid_angle=MT6701_GetAngle_ALL(motor->encoder);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fd8e 	bl	800305c <MT6701_GetAngle_ALL>
 8002540:	ed87 0a07 	vstr	s0, [r7, #28]

	for(i=count; i>=0; i--)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
 8002548:	e01f      	b.n	800258a <Motor_Parameter_Identification+0xea>
	{
		angle =  _2_PI * i / count ;
 800254a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800254e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002714 <Motor_Parameter_Identification+0x274>
 8002552:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002556:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800255a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255e:	edc7 7a02 	vstr	s15, [r7, #8]
		FOC_SVPWM(motor,0, 1, angle);
 8002562:	ed97 1a02 	vldr	s2, [r7, #8]
 8002566:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800256a:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8002710 <Motor_Parameter_Identification+0x270>
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa02 	bl	8002978 <FOC_SVPWM>
		HAL_Delay(1);
 8002574:	2001      	movs	r0, #1
 8002576:	f003 f919 	bl	80057ac <HAL_Delay>
	for(i=count; i>=0; i--)
 800257a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800257e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002586:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800258a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800258e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002596:	dad8      	bge.n	800254a <Motor_Parameter_Identification+0xaa>
	}
	end_angle=MT6701_GetAngle_ALL(motor->encoder);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd5d 	bl	800305c <MT6701_GetAngle_ALL>
 80025a2:	ed87 0a06 	vstr	s0, [r7, #24]
	//相当于电机失能
//	FOC_EN(motor,OFF);
	//判断是否带载启动，如果带载的话，失能之后角度会变，这时校准的参数不准（可能太重角度偏移不准），需要重新校准
	if((fabsf(angle0-end_angle)>0.05))
 80025a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80025aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	eef0 7ae7 	vabs.f32	s15, s15
 80025b6:	ee17 0a90 	vmov	r0, s15
 80025ba:	f7fd ffc5 	bl	8000548 <__aeabi_f2d>
 80025be:	a34e      	add	r3, pc, #312	; (adr r3, 80026f8 <Motor_Parameter_Identification+0x258>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe faa8 	bl	8000b18 <__aeabi_dcmpgt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <Motor_Parameter_Identification+0x138>
	{
		printf("Failed!Please recalibrate the motor without load.\r\n");
 80025ce:	4852      	ldr	r0, [pc, #328]	; (8002718 <Motor_Parameter_Identification+0x278>)
 80025d0:	f009 fd34 	bl	800c03c <puts>
		return 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e08b      	b.n	80026f0 <Motor_Parameter_Identification+0x250>
	}

	/**************************计算旋转正方向**********************************/
	moved =  fabsf(mid_angle - end_angle);
 80025d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80025dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	eef0 7ae7 	vabs.f32	s15, s15
 80025e8:	edc7 7a05 	vstr	s15, [r7, #20]

	if((moved < 0.05) )  //相等或者几乎没有动，则认为没有上电或者负载太重带不动，校准失败
 80025ec:	6978      	ldr	r0, [r7, #20]
 80025ee:	f7fd ffab 	bl	8000548 <__aeabi_f2d>
 80025f2:	a341      	add	r3, pc, #260	; (adr r3, 80026f8 <Motor_Parameter_Identification+0x258>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fe fa70 	bl	8000adc <__aeabi_dcmplt>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <Motor_Parameter_Identification+0x16c>
	{
		printf("Failed!Please recalibrate with POWER ON or without load.\r\n");
 8002602:	4846      	ldr	r0, [pc, #280]	; (800271c <Motor_Parameter_Identification+0x27c>)
 8002604:	f009 fd1a 	bl	800c03c <puts>

		return 0;
 8002608:	2300      	movs	r3, #0
 800260a:	e071      	b.n	80026f0 <Motor_Parameter_Identification+0x250>
	}
	else if(mid_angle < end_angle)
 800260c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002610:	edd7 7a06 	vldr	s15, [r7, #24]
 8002614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	d505      	bpl.n	800262a <Motor_Parameter_Identification+0x18a>
	{
		printf("sensor_direction==CCW\r\n");
 800261e:	4840      	ldr	r0, [pc, #256]	; (8002720 <Motor_Parameter_Identification+0x280>)
 8002620:	f009 fd0c 	bl	800c03c <puts>
		dir=-1.0f;
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <Motor_Parameter_Identification+0x284>)
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002628:	e005      	b.n	8002636 <Motor_Parameter_Identification+0x196>
	}
	else
	{
		printf("sensor_direction==CW\r\n");
 800262a:	483f      	ldr	r0, [pc, #252]	; (8002728 <Motor_Parameter_Identification+0x288>)
 800262c:	f009 fd06 	bl	800c03c <puts>
		dir=1.0f;
 8002630:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/**************************计算极对数**********************************/
	pole_pairs=(int)(_2_PI/moved+0.5f);     //浮点数转整形，四舍五入
 8002636:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002714 <Motor_Parameter_Identification+0x274>
 800263a:	ed97 7a05 	vldr	s14, [r7, #20]
 800263e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002642:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800264a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800264e:	ee17 3a90 	vmov	r3, s15
 8002652:	613b      	str	r3, [r7, #16]

	printf("PP check: ");     //计算Pole_Pairs
 8002654:	4835      	ldr	r0, [pc, #212]	; (800272c <Motor_Parameter_Identification+0x28c>)
 8002656:	f009 fc8b 	bl	800bf70 <iprintf>
	if( fabsf(moved*pole_pairs - _2_PI) > 0.3 )  // 0.2 is arbitrary number it can be lower or higher!
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002664:	edd7 7a05 	vldr	s15, [r7, #20]
 8002668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002714 <Motor_Parameter_Identification+0x274>
 8002670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002674:	eef0 7ae7 	vabs.f32	s15, s15
 8002678:	ee17 0a90 	vmov	r0, s15
 800267c:	f7fd ff64 	bl	8000548 <__aeabi_f2d>
 8002680:	a31f      	add	r3, pc, #124	; (adr r3, 8002700 <Motor_Parameter_Identification+0x260>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f7fe fa47 	bl	8000b18 <__aeabi_dcmpgt>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <Motor_Parameter_Identification+0x1fa>
	{
		printf(" fail - estimated pp!\n");
 8002690:	4827      	ldr	r0, [pc, #156]	; (8002730 <Motor_Parameter_Identification+0x290>)
 8002692:	f009 fcd3 	bl	800c03c <puts>
		return 0;
 8002696:	2300      	movs	r3, #0
 8002698:	e02a      	b.n	80026f0 <Motor_Parameter_Identification+0x250>
    }
	else
	{
		printf("OK!\r\n");
 800269a:	4826      	ldr	r0, [pc, #152]	; (8002734 <Motor_Parameter_Identification+0x294>)
 800269c:	f009 fcce 	bl	800c03c <puts>
	}

	/**************************计算零点偏移角度**********************************/
	zero_electric_angle = _normalizeAngle(dir*pole_pairs*angle0);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	eeb0 0a67 	vmov.f32	s0, s15
 80026be:	f000 f863 	bl	8002788 <_normalizeAngle>
 80026c2:	ed87 0a03 	vstr	s0, [r7, #12]


	data[0] = 1000.0f;		//如果校准了，这个数据就是1000
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <Motor_Parameter_Identification+0x268>)
 80026ca:	601a      	str	r2, [r3, #0]
	data[1] = zero_electric_angle;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	3304      	adds	r3, #4
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]
	data[2] = dir;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	3308      	adds	r3, #8
 80026d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026da:	601a      	str	r2, [r3, #0]
	data[3] = pole_pairs;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	ee07 2a90 	vmov	s15, r2
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	edc3 7a00 	vstr	s15, [r3]



	return 1;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3730      	adds	r7, #48	; 0x30
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	9999999a 	.word	0x9999999a
 80026fc:	3fa99999 	.word	0x3fa99999
 8002700:	33333333 	.word	0x33333333
 8002704:	3fd33333 	.word	0x3fd33333
 8002708:	447a0000 	.word	0x447a0000
 800270c:	080108a4 	.word	0x080108a4
 8002710:	00000000 	.word	0x00000000
 8002714:	40c90fdb 	.word	0x40c90fdb
 8002718:	080108cc 	.word	0x080108cc
 800271c:	08010900 	.word	0x08010900
 8002720:	0801093c 	.word	0x0801093c
 8002724:	bf800000 	.word	0xbf800000
 8002728:	08010954 	.word	0x08010954
 800272c:	0801096c 	.word	0x0801096c
 8002730:	08010978 	.word	0x08010978
 8002734:	08010990 	.word	0x08010990

08002738 <_electricalAngle>:

//将机械角度转换成实际电角度
float _electricalAngle(Motor_Run_Typedef *motor)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return  _normalizeAngle((motor->Parameters->DIR *  motor->Parameters->Pole_pair)*motor->encoder->rad_all - motor->Parameters->zero_electric_angle);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	ed93 7a01 	vldr	s14, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276c:	eeb0 0a67 	vmov.f32	s0, s15
 8002770:	f000 f80a 	bl	8002788 <_normalizeAngle>
 8002774:	eef0 7a40 	vmov.f32	s15, s0

}
 8002778:	eeb0 0a67 	vmov.f32	s0, s15
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	0000      	movs	r0, r0
 8002784:	0000      	movs	r0, r0
	...

08002788 <_normalizeAngle>:

// 归一化角度到 [0,2PI]
float _normalizeAngle(float angle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fd fed8 	bl	8000548 <__aeabi_f2d>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80027e8 <_normalizeAngle+0x60>
 80027a0:	ec43 2b10 	vmov	d0, r2, r3
 80027a4:	f00d fd5e 	bl	8010264 <fmod>
 80027a8:	ec53 2b10 	vmov	r2, r3, d0
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe fa1a 	bl	8000be8 <__aeabi_d2f>
 80027b4:	4603      	mov	r3, r0
 80027b6:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2_PI);
 80027b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c4:	db02      	blt.n	80027cc <_normalizeAngle+0x44>
 80027c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80027ca:	e005      	b.n	80027d8 <_normalizeAngle+0x50>
 80027cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80027f0 <_normalizeAngle+0x68>
 80027d4:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80027d8:	eeb0 0a67 	vmov.f32	s0, s15
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	f3af 8000 	nop.w
 80027e8:	60000000 	.word	0x60000000
 80027ec:	401921fb 	.word	0x401921fb
 80027f0:	40c90fdb 	.word	0x40c90fdb

080027f4 <_sqrtApprox>:


//求根公式近似算法
static float _sqrtApprox(float number) {//low in fat
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	ed87 0a01 	vstr	s0, [r7, #4]
  float y;
  // float x;
  // const float f = 1.5F; // better precision

  // x = number * 0.5F;
  y = number;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	60bb      	str	r3, [r7, #8]
  i = * ( long * ) &y;
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
  i = 0x5f375a86 - ( i >> 1 );
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	105a      	asrs	r2, r3, #1
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <_sqrtApprox+0x44>)
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  y = * ( float * ) &i;
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60bb      	str	r3, [r7, #8]
  // y = y * ( f - ( x * y * y ) ); // better precision
  return number * y;
 800281c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002820:	edd7 7a01 	vldr	s15, [r7, #4]
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002828:	eeb0 0a67 	vmov.f32	s0, s15
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	5f375a86 	.word	0x5f375a86

0800283c <fastAtan2>:
//反正切2公式近似算法
static float fastAtan2(float y, float x) {
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	ed87 0a01 	vstr	s0, [r7, #4]
 8002846:	edc7 0a00 	vstr	s1, [r7]
    float atan;
    float z = y / x;
 800284a:	edd7 6a01 	vldr	s13, [r7, #4]
 800284e:	ed97 7a00 	vldr	s14, [r7]
 8002852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002856:	edc7 7a03 	vstr	s15, [r7, #12]
    if (x == 0.0f) {
 800285a:	edd7 7a00 	vldr	s15, [r7]
 800285e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002866:	d116      	bne.n	8002896 <fastAtan2+0x5a>
        if (y > 0.0f) return PI_2;
 8002868:	edd7 7a01 	vldr	s15, [r7, #4]
 800286c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	dd02      	ble.n	800287c <fastAtan2+0x40>
 8002876:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8002964 <fastAtan2+0x128>
 800287a:	e06c      	b.n	8002956 <fastAtan2+0x11a>
        if (y < 0.0f) return -PI_2;
 800287c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	d502      	bpl.n	8002890 <fastAtan2+0x54>
 800288a:	eddf 7a37 	vldr	s15, [pc, #220]	; 8002968 <fastAtan2+0x12c>
 800288e:	e062      	b.n	8002956 <fastAtan2+0x11a>
        return 0.0f;
 8002890:	eddf 7a36 	vldr	s15, [pc, #216]	; 800296c <fastAtan2+0x130>
 8002894:	e05f      	b.n	8002956 <fastAtan2+0x11a>
    }
    if (fabsf(z) < 1.0f) {
 8002896:	edd7 7a03 	vldr	s15, [r7, #12]
 800289a:	eef0 7ae7 	vabs.f32	s15, s15
 800289e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028aa:	d532      	bpl.n	8002912 <fastAtan2+0xd6>
        atan = z / (1.0f + 0.28f * z * z);
 80028ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80028b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002970 <fastAtan2+0x134>
 80028b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80028c8:	edd7 6a03 	vldr	s13, [r7, #12]
 80028cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d0:	edc7 7a02 	vstr	s15, [r7, #8]
        if (x < 0.0f) {
 80028d4:	edd7 7a00 	vldr	s15, [r7]
 80028d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	d514      	bpl.n	800290c <fastAtan2+0xd0>
            if (y < 0.0f) return atan - PI;
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	d506      	bpl.n	80028fe <fastAtan2+0xc2>
 80028f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002974 <fastAtan2+0x138>
 80028f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028fc:	e02b      	b.n	8002956 <fastAtan2+0x11a>
            return atan + PI;
 80028fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002902:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002974 <fastAtan2+0x138>
 8002906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800290a:	e024      	b.n	8002956 <fastAtan2+0x11a>
        }
        return atan;
 800290c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002910:	e021      	b.n	8002956 <fastAtan2+0x11a>
    } else {
        atan = PI_2 - z / (z * z + 0.28f);
 8002912:	edd7 7a03 	vldr	s15, [r7, #12]
 8002916:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800291a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002970 <fastAtan2+0x134>
 800291e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002922:	edd7 6a03 	vldr	s13, [r7, #12]
 8002926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002964 <fastAtan2+0x128>
 800292e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002932:	edc7 7a02 	vstr	s15, [r7, #8]
        if (y < 0.0f) return atan - PI;
 8002936:	edd7 7a01 	vldr	s15, [r7, #4]
 800293a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	d506      	bpl.n	8002952 <fastAtan2+0x116>
 8002944:	edd7 7a02 	vldr	s15, [r7, #8]
 8002948:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002974 <fastAtan2+0x138>
 800294c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002950:	e001      	b.n	8002956 <fastAtan2+0x11a>
        return atan;
 8002952:	edd7 7a02 	vldr	s15, [r7, #8]
    }
}
 8002956:	eeb0 0a67 	vmov.f32	s0, s15
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	3fc90fdb 	.word	0x3fc90fdb
 8002968:	bfc90fdb 	.word	0xbfc90fdb
 800296c:	00000000 	.word	0x00000000
 8002970:	3e8f5c29 	.word	0x3e8f5c29
 8002974:	40490fdb 	.word	0x40490fdb

08002978 <FOC_SVPWM>:

//设置三相占空比
void FOC_SVPWM(Motor_Run_Typedef *motor, float Uq, float Ud, float theta)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	b08e      	sub	sp, #56	; 0x38
 800297c:	af00      	add	r7, sp, #0
 800297e:	6178      	str	r0, [r7, #20]
 8002980:	ed87 0a04 	vstr	s0, [r7, #16]
 8002984:	edc7 0a03 	vstr	s1, [r7, #12]
 8002988:	ed87 1a02 	vstr	s2, [r7, #8]
    uint8_t sector;
    float T0, T1, T2;
    float Ta, Tb, Tc;

	// _sqrt is an approx of sqrt (3 - 4% error)
	Uout = _sqrtApprox(Ud * Ud + Uq * Uq) / VBUS;
 800298c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002990:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002994:	edd7 7a04 	vldr	s15, [r7, #16]
 8002998:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	eeb0 0a67 	vmov.f32	s0, s15
 80029a4:	f7ff ff26 	bl	80027f4 <_sqrtApprox>
 80029a8:	eef0 6a40 	vmov.f32	s13, s0
 80029ac:	4bcc      	ldr	r3, [pc, #816]	; (8002ce0 <FOC_SVPWM+0x368>)
 80029ae:	ed93 7a00 	vldr	s14, [r3]
 80029b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	// angle normalisation in between 0 and 2pi
	// only necessary if using _sin and _cos - approximation functions
	theta = _normalizeAngle(theta + fastAtan2(Uq, Ud));
 80029ba:	edd7 0a03 	vldr	s1, [r7, #12]
 80029be:	ed97 0a04 	vldr	s0, [r7, #16]
 80029c2:	f7ff ff3b 	bl	800283c <fastAtan2>
 80029c6:	eeb0 7a40 	vmov.f32	s14, s0
 80029ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	eeb0 0a67 	vmov.f32	s0, s15
 80029d6:	f7ff fed7 	bl	8002788 <_normalizeAngle>
 80029da:	ed87 0a02 	vstr	s0, [r7, #8]
	//Uout限幅
	Uout = LIMIT(Uout,-0.577f,0.577f);
 80029de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029e2:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8002ce4 <FOC_SVPWM+0x36c>
 80029e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	dd01      	ble.n	80029f4 <FOC_SVPWM+0x7c>
 80029f0:	4bbd      	ldr	r3, [pc, #756]	; (8002ce8 <FOC_SVPWM+0x370>)
 80029f2:	e00b      	b.n	8002a0c <FOC_SVPWM+0x94>
 80029f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029f8:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8002cec <FOC_SVPWM+0x374>
 80029fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	d501      	bpl.n	8002a0a <FOC_SVPWM+0x92>
 8002a06:	4bba      	ldr	r3, [pc, #744]	; (8002cf0 <FOC_SVPWM+0x378>)
 8002a08:	e000      	b.n	8002a0c <FOC_SVPWM+0x94>
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28


    sector = (theta / _3_PI) + 1;
 8002a0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a12:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8002cf4 <FOC_SVPWM+0x37c>
 8002a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a26:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a2a:	793b      	ldrb	r3, [r7, #4]
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    T1 = sqrt3 * arm_sin_f32(sector * PI_3 - theta) * Uout;
 8002a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3c:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002cf8 <FOC_SVPWM+0x380>
 8002a40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a44:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a50:	f008 fad8 	bl	800b004 <arm_sin_f32>
 8002a54:	eef0 7a40 	vmov.f32	s15, s0
 8002a58:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002cfc <FOC_SVPWM+0x384>
 8002a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a68:	edc7 7a08 	vstr	s15, [r7, #32]
    T2 = sqrt3 * arm_sin_f32(theta - (sector - 1.0) * PI_3) * Uout;
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	f7fd fd6b 	bl	8000548 <__aeabi_f2d>
 8002a72:	4604      	mov	r4, r0
 8002a74:	460d      	mov	r5, r1
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fd52 	bl	8000524 <__aeabi_i2d>
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	4b9e      	ldr	r3, [pc, #632]	; (8002d00 <FOC_SVPWM+0x388>)
 8002a86:	f7fd fbff 	bl	8000288 <__aeabi_dsub>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	a391      	add	r3, pc, #580	; (adr r3, 8002cd8 <FOC_SVPWM+0x360>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fdae 	bl	80005f8 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	f7fd fbf0 	bl	8000288 <__aeabi_dsub>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f7fe f89a 	bl	8000be8 <__aeabi_d2f>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	ee00 3a10 	vmov	s0, r3
 8002aba:	f008 faa3 	bl	800b004 <arm_sin_f32>
 8002abe:	eef0 7a40 	vmov.f32	s15, s0
 8002ac2:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002cfc <FOC_SVPWM+0x384>
 8002ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad2:	edc7 7a07 	vstr	s15, [r7, #28]
    T0 = 1 - T1 - T2;
 8002ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ada:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aea:	edc7 7a06 	vstr	s15, [r7, #24]

    // calculate the duty cycles(times)
    switch (sector)
 8002aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002af2:	3b01      	subs	r3, #1
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	f200 8105 	bhi.w	8002d04 <FOC_SVPWM+0x38c>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <FOC_SVPWM+0x188>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b19 	.word	0x08002b19
 8002b04:	08002b63 	.word	0x08002b63
 8002b08:	08002bad 	.word	0x08002bad
 8002b0c:	08002bf7 	.word	0x08002bf7
 8002b10:	08002c41 	.word	0x08002c41
 8002b14:	08002c8b 	.word	0x08002c8b
    {
    case 1:
        Ta = T1 + T2 + T0 / 2;
 8002b18:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b28:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002b2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Tb = T2 + T0 / 2;
 8002b38:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Tc = T0 / 2;
 8002b50:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        break;
 8002b60:	e0d9      	b.n	8002d16 <FOC_SVPWM+0x39e>
    case 2:
        Ta = T1 + T0 / 2;
 8002b62:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Tb = T1 + T2 + T0 / 2;
 8002b7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b86:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b8a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002b8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b96:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Tc = T0 / 2;
 8002b9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        break;
 8002baa:	e0b4      	b.n	8002d16 <FOC_SVPWM+0x39e>
    case 3:
        Ta = T0 / 2;
 8002bac:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bb0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Tb = T1 + T2 + T0 / 2;
 8002bbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc8:	edd7 6a06 	vldr	s13, [r7, #24]
 8002bcc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002bd0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Tc = T2 + T0 / 2;
 8002bdc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002be0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        break;
 8002bf4:	e08f      	b.n	8002d16 <FOC_SVPWM+0x39e>
    case 4:
        Ta = T0 / 2;
 8002bf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bfa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c02:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Tb = T1 + T0 / 2;
 8002c06:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c12:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Tc = T1 + T2 + T0 / 2;
 8002c1e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c22:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c2a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c2e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        break;
 8002c3e:	e06a      	b.n	8002d16 <FOC_SVPWM+0x39e>
    case 5:
        Ta = T2 + T0 / 2;
 8002c40:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c54:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Tb = T0 / 2;
 8002c58:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c64:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Tc = T1 + T2 + T0 / 2;
 8002c68:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c74:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c78:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        break;
 8002c88:	e045      	b.n	8002d16 <FOC_SVPWM+0x39e>
    case 6:
        Ta = T1 + T2 + T0 / 2;
 8002c8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c96:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c9a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        Tb = T0 / 2;
 8002caa:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        Tc = T1 + T0 / 2;
 8002cba:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc6:	ed97 7a08 	vldr	s14, [r7, #32]
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        break;
 8002cd2:	e020      	b.n	8002d16 <FOC_SVPWM+0x39e>
 8002cd4:	f3af 8000 	nop.w
 8002cd8:	40000000 	.word	0x40000000
 8002cdc:	3ff0c152 	.word	0x3ff0c152
 8002ce0:	200000a4 	.word	0x200000a4
 8002ce4:	3f13b646 	.word	0x3f13b646
 8002ce8:	3f13b646 	.word	0x3f13b646
 8002cec:	bf13b646 	.word	0xbf13b646
 8002cf0:	bf13b646 	.word	0xbf13b646
 8002cf4:	4116cbe4 	.word	0x4116cbe4
 8002cf8:	3f860a92 	.word	0x3f860a92
 8002cfc:	3fddb3d7 	.word	0x3fddb3d7
 8002d00:	3ff00000 	.word	0x3ff00000
    default:  // possible error state
        Ta = 0;
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = 0;
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = 0;
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    __HAL_TIM_SetCompare(motor->htim, TIM_CHANNEL_1, Ta * motor->PWM_Period);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d34:	ee17 2a90 	vmov	r2, s15
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(motor->htim, TIM_CHANNEL_2, Tb * motor->PWM_Period);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d58:	ee17 2a90 	vmov	r2, s15
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SetCompare(motor->htim, TIM_CHANNEL_3, Tc * motor->PWM_Period);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d7c:	ee17 2a90 	vmov	r2, s15
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8002d82:	bf00      	nop
 8002d84:	3738      	adds	r7, #56	; 0x38
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8a:	bf00      	nop

08002d8c <getTimerARR>:

// 获取定时器的自动重装载值（ARR）
uint16_t getTimerARR(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
    if (htim!= NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <getTimerARR+0x18>
    {
    	return htim->Instance->ARR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	e000      	b.n	8002da6 <getTimerARR+0x1a>
    }
    // 返回 0 表示获取失败（可能是传入的定时器句柄无效）
    return 0;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <calculateInterruptFrequency>:

//计算进中断的频率
void calculateInterruptFrequency(Motor_Run_Typedef *motor)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
    // 获取预分频值
    uint16_t prescaler = motor->htim->Instance->PSC;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	82fb      	strh	r3, [r7, #22]

    // 获取自动重装载值（ARR）
    uint32_t arr = motor->htim->Instance->ARR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	613b      	str	r3, [r7, #16]

    // 获取 CPU 主频
    uint32_t cpuFrequency = HAL_RCC_GetHCLKFreq();
 8002dce:	f005 fd43 	bl	8008858 <HAL_RCC_GetHCLKFreq>
 8002dd2:	60f8      	str	r0, [r7, #12]

    // 计算进中断理论频率
    motor->interruptFrequency = (float)cpuFrequency / ((prescaler + 1) * (arr + 1))/2.0f;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dde:	8afb      	ldrh	r3, [r7, #22]
 8002de0:	3301      	adds	r3, #1
 8002de2:	461a      	mov	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	3301      	adds	r3, #1
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <FOC_Get_Ia_Ib_Ic>:


//获取三相电流值
void FOC_Get_Ia_Ib_Ic(Motor_Run_Typedef *motor)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
    float commonFactor = 1.0f/4095.0f * 3.3f / Sample_R / motor->DRV8301->I_Gain;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e20:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002ea4 <FOC_Get_Ia_Ib_Ic+0x94>
 8002e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e28:	edc7 7a03 	vstr	s15, [r7, #12]
    // 求电流值
    motor->I_C = ((float)motor->hadc->Instance->JDR1 - motor->I_A_Offset)* commonFactor;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002e42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    motor->I_B = ((float)motor->hadc->Instance->JDR2 - motor->I_B_Offset) * commonFactor;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    motor->I_A = -motor->I_C - motor->I_B;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e82:	eeb1 7a67 	vneg.f32	s14, s15
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	edc3 7a08 	vstr	s15, [r3, #32]

//    // 求电流值
//	motor->I_C = ((float)motor->hadc->Instance->JDR1 - motor->I_A_Offset)/4095.0f*3.3f/ Sample_R / motor->DRV8301->I_Gain;
//	motor->I_B = ((float)motor->hadc->Instance->JDR2 - motor->I_B_Offset)/4095.0f*3.3f/ Sample_R / motor->DRV8301->I_Gain;
//    motor->I_A = -motor->I_C-motor->I_B;
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	3da50a51 	.word	0x3da50a51

08002ea8 <FOC_clarke_park_Transform>:


float Ia,Ib,I_A,I_B;
//a,b,c三相电流转换成Id,Iq
void FOC_clarke_park_Transform(Motor_Run_Typedef *motor)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
    // Clarke变换--等幅值变换 乘三分之二
    float I_alpha = motor->I_A;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
    float I_beta = (motor->I_A + 2.0f * motor->I_B) * _1_sqrt3;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ec2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eca:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002f4c <FOC_clarke_park_Transform+0xa4>
 8002ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed2:	edc7 7a04 	vstr	s15, [r7, #16]

    float cos_angle = arm_cos_f32(motor->electricalAngle);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002edc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee0:	f008 f8d6 	bl	800b090 <arm_cos_f32>
 8002ee4:	ed87 0a03 	vstr	s0, [r7, #12]
    float sin_angle = arm_sin_f32(motor->electricalAngle);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	f008 f887 	bl	800b004 <arm_sin_f32>
 8002ef6:	ed87 0a02 	vstr	s0, [r7, #8]

//    // Park变换
    motor->I_d =  I_alpha * cos_angle + I_beta * sin_angle;
 8002efa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f06:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    motor->I_q = -I_alpha * sin_angle + I_beta * cos_angle;
 8002f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f20:	eeb1 7a67 	vneg.f32	s14, s15
 8002f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
//    //进行反clark变换和反park变化对比验证
//    Ia = motor->I_d*cos_angle-motor->I_q*sin_angle;
//    Ib = motor->I_d*sin_angle+motor->I_q*cos_angle;
//    I_A = Ia;
//    I_B = -0.5f*I_A + sqrt3_2*Ib;
}
 8002f42:	bf00      	nop
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	3f13cd3a 	.word	0x3f13cd3a

08002f50 <FOC_Get_electricalAngle_speed>:

//获取电机电角度,pwm中断频率/10
void FOC_Get_electricalAngle_speed(Motor_Run_Typedef *motor)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    //获取编码器位置
    MT6701_GetAngle_ALL(motor->encoder);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f87d 	bl	800305c <MT6701_GetAngle_ALL>
    //更新实际电角度
    motor->electricalAngle = _electricalAngle(motor);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fbe8 	bl	8002738 <_electricalAngle>
 8002f68:	eef0 7a40 	vmov.f32	s15, s0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

    // 通过转动弧度差计算转速r/s
    float new_speed = motor->Parameters->DIR*motor->encoder->d_rad*(motor->interruptFrequency/10.0f)/_2_PI;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f8c:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8002f90:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f98:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002ffc <FOC_Get_electricalAngle_speed+0xac>
 8002f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fa0:	edc7 7a03 	vstr	s15, [r7, #12]

    // 低通滤波处理速度
    static const float alpha = 0.4f; // 滤波系数，可根据实际情况调整
    if (motor->prev_speed!= 0) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002faa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb2:	d018      	beq.n	8002fe6 <FOC_Get_electricalAngle_speed+0x96>
        motor->speed = alpha * new_speed + (1 - alpha) * motor->speed;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <FOC_Get_electricalAngle_speed+0xb0>)
 8002fb6:	ed93 7a00 	vldr	s14, [r3]
 8002fba:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <FOC_Get_electricalAngle_speed+0xb0>)
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fcc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8002fe4:	e002      	b.n	8002fec <FOC_Get_electricalAngle_speed+0x9c>
    } else {
        motor->speed = new_speed;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
    motor->prev_speed = motor->speed;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40c90fdb 	.word	0x40c90fdb
 8003000:	08010a58 	.word	0x08010a58

08003004 <MT6701_Init>:
   .rad_all=0,
   .rad_all_prev = 0,
};

// 初始化磁编码器
void MT6701_Init(MT6701_Encoder* encoder) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    encoder->rotation_count = MT_CPR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8003012:	619a      	str	r2, [r3, #24]
    encoder->rad = encoder->rad_prev = MT6701_ReadDataSSI(encoder);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f89d 	bl	8003154 <MT6701_ReadDataSSI>
 800301a:	eef0 7a40 	vmov.f32	s15, s0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	621a      	str	r2, [r3, #32]
    encoder->full_rotation_offset = 0;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	61da      	str	r2, [r3, #28]
    encoder->rad_all = (encoder->full_rotation_offset + encoder->rad);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	ed93 7a07 	vldr	s14, [r3, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    encoder->rad_all_prev = encoder->rad_all;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <MT6701_GetAngle_ALL>:

// 获得从初始位置开始总共转过的角度(单位：rad),d_rad是转动弧度差，乘以频率就是电机转速 rad/s
float MT6701_GetAngle_ALL(MT6701_Encoder* encoder)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    encoder->rad = MT6701_ReadDataSSI(encoder);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f875 	bl	8003154 <MT6701_ReadDataSSI>
 800306a:	eef0 7a40 	vmov.f32	s15, s0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	edc3 7a08 	vstr	s15, [r3, #32]
    float d_rad = encoder->rad - encoder->rad_prev;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	ed93 7a08 	vldr	s14, [r3, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003084:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ABS(d_rad) > (0.8 * _2PI)) {
 8003088:	edd7 7a03 	vldr	s15, [r7, #12]
 800308c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	dd0c      	ble.n	80030b0 <MT6701_GetAngle_ALL+0x54>
 8003096:	edd7 7a03 	vldr	s15, [r7, #12]
 800309a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003144 <MT6701_GetAngle_ALL+0xe8>
 800309e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a6:	bfcc      	ite	gt
 80030a8:	2301      	movgt	r3, #1
 80030aa:	2300      	movle	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e00b      	b.n	80030c8 <MT6701_GetAngle_ALL+0x6c>
 80030b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003148 <MT6701_GetAngle_ALL+0xec>
 80030b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c0:	bf4c      	ite	mi
 80030c2:	2301      	movmi	r3, #1
 80030c4:	2300      	movpl	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <MT6701_GetAngle_ALL+0x98>
        encoder->full_rotation_offset += (d_rad > 0? -_2PI : _2PI);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80030d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80030d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030de:	dd02      	ble.n	80030e6 <MT6701_GetAngle_ALL+0x8a>
 80030e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800314c <MT6701_GetAngle_ALL+0xf0>
 80030e4:	e001      	b.n	80030ea <MT6701_GetAngle_ALL+0x8e>
 80030e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003150 <MT6701_GetAngle_ALL+0xf4>
 80030ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edc3 7a07 	vstr	s15, [r3, #28]
    }
    //重新赋值上一次弧度
    encoder->rad_prev = encoder->rad;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24
    encoder->rad_all = (encoder->full_rotation_offset + encoder->rad);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	edd3 7a08 	vldr	s15, [r3, #32]
 8003108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    encoder->d_rad = (encoder->rad_all - encoder->rad_all_prev);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800311e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    //重新赋值上一次总弧度
    encoder->rad_all_prev = encoder->rad_all;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28

    return encoder->rad_all;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	ee07 3a90 	vmov	s15, r3
}
 8003138:	eeb0 0a67 	vmov.f32	s0, s15
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40a0d97c 	.word	0x40a0d97c
 8003148:	c0a0d97c 	.word	0xc0a0d97c
 800314c:	c0c90fdb 	.word	0xc0c90fdb
 8003150:	40c90fdb 	.word	0x40c90fdb

08003154 <MT6701_ReadDataSSI>:


//读取编码器数据，单位：rad，范围：0-2pi
float MT6701_ReadDataSSI(MT6701_Encoder* encoder) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

    uint16_t rad = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	82fb      	strh	r3, [r7, #22]
    float frad = 0.0;
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
    int offset = 14;
 8003166:	230e      	movs	r3, #14
 8003168:	613b      	str	r3, [r7, #16]

    // 片选拉低选中芯片
    HAL_GPIO_WritePin(encoder->CS_GPIO_Port, encoder->CS_Pin, GPIO_PIN_RESET);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	889b      	ldrh	r3, [r3, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	4619      	mov	r1, r3
 8003176:	f004 fed9 	bl	8007f2c <HAL_GPIO_WritePin>

    // 跳过第一个时钟信号
    HAL_GPIO_WritePin(encoder->SCK_GPIO_Port, encoder->SCK_Pin, GPIO_PIN_RESET);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6898      	ldr	r0, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	899b      	ldrh	r3, [r3, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	4619      	mov	r1, r3
 8003186:	f004 fed1 	bl	8007f2c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(encoder->SCK_GPIO_Port, encoder->SCK_Pin, GPIO_PIN_SET);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6898      	ldr	r0, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	899b      	ldrh	r3, [r3, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	4619      	mov	r1, r3
 8003196:	f004 fec9 	bl	8007f2c <HAL_GPIO_WritePin>

    for (int i = 0; i < 14; i++) {
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	e028      	b.n	80031f2 <MT6701_ReadDataSSI+0x9e>
        HAL_GPIO_WritePin(encoder->SCK_GPIO_Port, encoder->SCK_Pin, GPIO_PIN_RESET);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6898      	ldr	r0, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	899b      	ldrh	r3, [r3, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	4619      	mov	r1, r3
 80031ac:	f004 febe 	bl	8007f2c <HAL_GPIO_WritePin>
        rad |= (HAL_GPIO_ReadPin(encoder->MOSI_GPIO_Port, encoder->MOSI_Pin) << offset);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8a9b      	ldrh	r3, [r3, #20]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f004 fe9e 	bl	8007efc <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	b21a      	sxth	r2, r3
 80031cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b21b      	sxth	r3, r3
 80031d4:	82fb      	strh	r3, [r7, #22]
        offset--;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3b01      	subs	r3, #1
 80031da:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(encoder->SCK_GPIO_Port, encoder->SCK_Pin, GPIO_PIN_SET);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6898      	ldr	r0, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	899b      	ldrh	r3, [r3, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4619      	mov	r1, r3
 80031e8:	f004 fea0 	bl	8007f2c <HAL_GPIO_WritePin>
    for (int i = 0; i < 14; i++) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b0d      	cmp	r3, #13
 80031f6:	ddd3      	ble.n	80031a0 <MT6701_ReadDataSSI+0x4c>
    }

    // 片选拉高不选中
    HAL_GPIO_WritePin(encoder->CS_GPIO_Port, encoder->CS_Pin, GPIO_PIN_SET);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	889b      	ldrh	r3, [r3, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	4619      	mov	r1, r3
 8003204:	f004 fe92 	bl	8007f2c <HAL_GPIO_WritePin>

    frad = (float)(rad * _2PI / 2.0f) / 16384.0f;
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003212:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003240 <MT6701_ReadDataSSI+0xec>
 8003216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800321e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003222:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003244 <MT6701_ReadDataSSI+0xf0>
 8003226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800322a:	edc7 7a02 	vstr	s15, [r7, #8]

    return frad;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	ee07 3a90 	vmov	s15, r3
}
 8003234:	eeb0 0a67 	vmov.f32	s0, s15
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40c90fdb 	.word	0x40c90fdb
 8003244:	46800000 	.word	0x46800000

08003248 <getTemperatureFromTable>:
}


// 二分查找获取温度
float getTemperatureFromTable(float Rt)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	ed87 0a01 	vstr	s0, [r7, #4]
    int low = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
    int high = 99;
 8003256:	2363      	movs	r3, #99	; 0x63
 8003258:	613b      	str	r3, [r7, #16]

    while (low <= high)
 800325a:	e031      	b.n	80032c0 <getTemperatureFromTable+0x78>
    {
        int mid = low + (high - low) / 2;
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	0fda      	lsrs	r2, r3, #31
 8003264:	4413      	add	r3, r2
 8003266:	105b      	asrs	r3, r3, #1
 8003268:	461a      	mov	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4413      	add	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]

        if (resistanceTable[mid] == Rt)
 8003270:	4a3a      	ldr	r2, [pc, #232]	; (800335c <getTemperatureFromTable+0x114>)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003280:	eeb4 7a67 	vcmp.f32	s14, s15
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	d106      	bne.n	8003298 <getTemperatureFromTable+0x50>
        {
            return temperatureTable[mid];
 800328a:	4a35      	ldr	r2, [pc, #212]	; (8003360 <getTemperatureFromTable+0x118>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	e059      	b.n	800334c <getTemperatureFromTable+0x104>
        }
        else if (resistanceTable[mid] < Rt)
 8003298:	4a30      	ldr	r2, [pc, #192]	; (800335c <getTemperatureFromTable+0x114>)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80032a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	dd03      	ble.n	80032ba <getTemperatureFromTable+0x72>
        {
            low = mid + 1;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	3301      	adds	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	e002      	b.n	80032c0 <getTemperatureFromTable+0x78>
        }
        else
        {
            high = mid - 1;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3b01      	subs	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
    while (low <= high)
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	ddc9      	ble.n	800325c <getTemperatureFromTable+0x14>
        }
    }

    // 线性插值
    if (low == 0)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <getTemperatureFromTable+0x8c>
    {
        return temperatureTable[0];
 80032ce:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003364 <getTemperatureFromTable+0x11c>
 80032d2:	e03b      	b.n	800334c <getTemperatureFromTable+0x104>
    }
    if (high == 99)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b63      	cmp	r3, #99	; 0x63
 80032d8:	d102      	bne.n	80032e0 <getTemperatureFromTable+0x98>
    {
        return temperatureTable[99];
 80032da:	eddf 7a23 	vldr	s15, [pc, #140]	; 8003368 <getTemperatureFromTable+0x120>
 80032de:	e035      	b.n	800334c <getTemperatureFromTable+0x104>
    }

    float ratio = (Rt - resistanceTable[high]) / (resistanceTable[low] - resistanceTable[high]);
 80032e0:	4a1e      	ldr	r2, [pc, #120]	; (800335c <getTemperatureFromTable+0x114>)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80032f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <getTemperatureFromTable+0x114>)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	4a16      	ldr	r2, [pc, #88]	; (800335c <getTemperatureFromTable+0x114>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003314:	edc7 7a03 	vstr	s15, [r7, #12]
    return temperatureTable[high] + ratio * (temperatureTable[low] - temperatureTable[high]);
 8003318:	4a11      	ldr	r2, [pc, #68]	; (8003360 <getTemperatureFromTable+0x118>)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	ed93 7a00 	vldr	s14, [r3]
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <getTemperatureFromTable+0x118>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	edd3 6a00 	vldr	s13, [r3]
 8003330:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <getTemperatureFromTable+0x118>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003340:	edd7 7a03 	vldr	s15, [r7, #12]
 8003344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003348:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 800334c:	eeb0 0a67 	vmov.f32	s0, s15
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	08010a5c 	.word	0x08010a5c
 8003360:	08010bec 	.word	0x08010bec
 8003364:	42c70000 	.word	0x42c70000
 8003368:	c1c55c29 	.word	0xc1c55c29

0800336c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003370:	f3bf 8f4f 	dsb	sy
}
 8003374:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <__NVIC_SystemReset+0x24>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800337e:	4904      	ldr	r1, [pc, #16]	; (8003390 <__NVIC_SystemReset+0x24>)
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <__NVIC_SystemReset+0x28>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003386:	f3bf 8f4f 	dsb	sy
}
 800338a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <__NVIC_SystemReset+0x20>
 8003390:	e000ed00 	.word	0xe000ed00
 8003394:	05fa0004 	.word	0x05fa0004

08003398 <Connect_Init>:
float vel=0.0f;
__IO float pos=0.0f;

//通信接收初始化
void Connect_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
        //打开dma接收，ILDE中断
        //一定要记得在NVIC里开启相应串口中断
        HAL_UARTEx_ReceiveToIdle_DMA(&usart_connect,usart_rx_buf,1024);
 800339c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033a0:	4904      	ldr	r1, [pc, #16]	; (80033b4 <Connect_Init+0x1c>)
 80033a2:	4805      	ldr	r0, [pc, #20]	; (80033b8 <Connect_Init+0x20>)
 80033a4:	f006 fcd8 	bl	8009d58 <HAL_UARTEx_ReceiveToIdle_DMA>
        printf("connect succeed!\r\n");
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <Connect_Init+0x24>)
 80033aa:	f008 fe47 	bl	800c03c <puts>
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000984 	.word	0x20000984
 80033b8:	20001584 	.word	0x20001584
 80033bc:	08010998 	.word	0x08010998

080033c0 <restartDMA>:
        printf("%d", bit);
    }
}

//重启DMA接收
void restartDMA(UART_HandleTypeDef *huart) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
    huart->hdmarx->Instance->NDTR = 1024;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d2:	605a      	str	r2, [r3, #4]
    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t *)usart_rx_buf, 1024);
 80033d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <restartDMA+0x28>)
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f006 fcbc 	bl	8009d58 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000984 	.word	0x20000984

080033ec <HAL_UARTEx_RxEventCallback>:


//串口中断回调函数
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
	if(huart == &usart_connect)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <HAL_UARTEx_RxEventCallback+0x48>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d115      	bne.n	800342c <HAL_UARTEx_RxEventCallback+0x40>
	{
	    // 获取帧长并存入缓冲区长度变量
	    serialBuffer.data_len = 1024 - huart->hdmarx->Instance->NDTR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800340c:	461a      	mov	r2, r3
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003410:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	    // 将数据存入缓冲区
	    memcpy(serialBuffer.buffer, usart_rx_buf, serialBuffer.data_len);
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003416:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800341a:	461a      	mov	r2, r3
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <HAL_UARTEx_RxEventCallback+0x50>)
 800341e:	4806      	ldr	r0, [pc, #24]	; (8003438 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003420:	f008 fff2 	bl	800c408 <memcpy>
	    serialBuffer.new_data_available = true;
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_UARTEx_RxEventCallback+0x4c>)
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
	    // 不再重新开启 DMA 接收，因为数据已经存入缓冲区
	    // restartDMA(huart);

	}

}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20001584 	.word	0x20001584
 8003438:	20000570 	.word	0x20000570
 800343c:	20000984 	.word	0x20000984

08003440 <processSerialData>:

int int1=0,int2=0;
float float1=0.0,float2=0.0;
//处理串口接收到的数据
void processSerialData(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8003446:	af00      	add	r7, sp, #0
    if (serialBuffer.new_data_available )
 8003448:	4b7f      	ldr	r3, [pc, #508]	; (8003648 <processSerialData+0x208>)
 800344a:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80f5 	beq.w	800363e <processSerialData+0x1fe>
    {
        char tempBuffer[1024];
        memcpy(tempBuffer, serialBuffer.buffer, serialBuffer.data_len);
 8003454:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <processSerialData+0x208>)
 8003456:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800345a:	461a      	mov	r2, r3
 800345c:	463b      	mov	r3, r7
 800345e:	497a      	ldr	r1, [pc, #488]	; (8003648 <processSerialData+0x208>)
 8003460:	4618      	mov	r0, r3
 8003462:	f008 ffd1 	bl	800c408 <memcpy>


        /****************条件判断和处理**********************/
        if(sscanf(tempBuffer,"P:%f",&float1)>0)
 8003466:	463b      	mov	r3, r7
 8003468:	4a78      	ldr	r2, [pc, #480]	; (800364c <processSerialData+0x20c>)
 800346a:	4979      	ldr	r1, [pc, #484]	; (8003650 <processSerialData+0x210>)
 800346c:	4618      	mov	r0, r3
 800346e:	f008 fe0d 	bl	800c08c <siscanf>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	dd04      	ble.n	8003482 <processSerialData+0x42>
                    {

                    	KP = float1;
 8003478:	4b74      	ldr	r3, [pc, #464]	; (800364c <processSerialData+0x20c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a75      	ldr	r2, [pc, #468]	; (8003654 <processSerialData+0x214>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e0d6      	b.n	8003630 <processSerialData+0x1f0>
    //                	printf("KP:%7.2f\n",KP);
                    }
                    else if(sscanf(tempBuffer,"I:%f",&float1)>0)
 8003482:	463b      	mov	r3, r7
 8003484:	4a71      	ldr	r2, [pc, #452]	; (800364c <processSerialData+0x20c>)
 8003486:	4974      	ldr	r1, [pc, #464]	; (8003658 <processSerialData+0x218>)
 8003488:	4618      	mov	r0, r3
 800348a:	f008 fdff 	bl	800c08c <siscanf>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	dd04      	ble.n	800349e <processSerialData+0x5e>
                    {
                    	KI= float1;
 8003494:	4b6d      	ldr	r3, [pc, #436]	; (800364c <processSerialData+0x20c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a70      	ldr	r2, [pc, #448]	; (800365c <processSerialData+0x21c>)
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e0c8      	b.n	8003630 <processSerialData+0x1f0>

    //                	printf("KI:%7.2f\n",KI);
                    }
                    else if(sscanf(tempBuffer,"D:%f",&float1)>0)
 800349e:	463b      	mov	r3, r7
 80034a0:	4a6a      	ldr	r2, [pc, #424]	; (800364c <processSerialData+0x20c>)
 80034a2:	496f      	ldr	r1, [pc, #444]	; (8003660 <processSerialData+0x220>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f008 fdf1 	bl	800c08c <siscanf>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dd04      	ble.n	80034ba <processSerialData+0x7a>
                    {

                    	KD = float1;
 80034b0:	4b66      	ldr	r3, [pc, #408]	; (800364c <processSerialData+0x20c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a6b      	ldr	r2, [pc, #428]	; (8003664 <processSerialData+0x224>)
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	e0ba      	b.n	8003630 <processSerialData+0x1f0>
    //                	printf("KD:%7.2f\n",KD);
                    }
                    else if(sscanf(tempBuffer,"uq:%f",&float1)>0)
 80034ba:	463b      	mov	r3, r7
 80034bc:	4a63      	ldr	r2, [pc, #396]	; (800364c <processSerialData+0x20c>)
 80034be:	496a      	ldr	r1, [pc, #424]	; (8003668 <processSerialData+0x228>)
 80034c0:	4618      	mov	r0, r3
 80034c2:	f008 fde3 	bl	800c08c <siscanf>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	dd04      	ble.n	80034d6 <processSerialData+0x96>
                    {

                    	uq = float1;
 80034cc:	4b5f      	ldr	r3, [pc, #380]	; (800364c <processSerialData+0x20c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a66      	ldr	r2, [pc, #408]	; (800366c <processSerialData+0x22c>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e0ac      	b.n	8003630 <processSerialData+0x1f0>
    //                	printf("KP:%7.2f\n",KP);
                    }
                    else if(sscanf(tempBuffer,"ud:%f",&float1)>0)
 80034d6:	463b      	mov	r3, r7
 80034d8:	4a5c      	ldr	r2, [pc, #368]	; (800364c <processSerialData+0x20c>)
 80034da:	4965      	ldr	r1, [pc, #404]	; (8003670 <processSerialData+0x230>)
 80034dc:	4618      	mov	r0, r3
 80034de:	f008 fdd5 	bl	800c08c <siscanf>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	dd04      	ble.n	80034f2 <processSerialData+0xb2>
                    {

                    	ud = float1;
 80034e8:	4b58      	ldr	r3, [pc, #352]	; (800364c <processSerialData+0x20c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a61      	ldr	r2, [pc, #388]	; (8003674 <processSerialData+0x234>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e09e      	b.n	8003630 <processSerialData+0x1f0>
    //                	printf("KP:%7.2f\n",KP);
                    }
                    else if(sscanf(tempBuffer,"vel:%f",&float1)>0)
 80034f2:	463b      	mov	r3, r7
 80034f4:	4a55      	ldr	r2, [pc, #340]	; (800364c <processSerialData+0x20c>)
 80034f6:	4960      	ldr	r1, [pc, #384]	; (8003678 <processSerialData+0x238>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f008 fdc7 	bl	800c08c <siscanf>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	dd04      	ble.n	800350e <processSerialData+0xce>
                    {
                    	vel= float1;
 8003504:	4b51      	ldr	r3, [pc, #324]	; (800364c <processSerialData+0x20c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5c      	ldr	r2, [pc, #368]	; (800367c <processSerialData+0x23c>)
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e090      	b.n	8003630 <processSerialData+0x1f0>

    //                	printf("KI:%7.2f\n",KI);
                    }
                    else if(sscanf(tempBuffer,"pos:%f",&float1)>0)
 800350e:	463b      	mov	r3, r7
 8003510:	4a4e      	ldr	r2, [pc, #312]	; (800364c <processSerialData+0x20c>)
 8003512:	495b      	ldr	r1, [pc, #364]	; (8003680 <processSerialData+0x240>)
 8003514:	4618      	mov	r0, r3
 8003516:	f008 fdb9 	bl	800c08c <siscanf>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	dd04      	ble.n	800352a <processSerialData+0xea>
                    {

                    	pos = float1;
 8003520:	4b4a      	ldr	r3, [pc, #296]	; (800364c <processSerialData+0x20c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a57      	ldr	r2, [pc, #348]	; (8003684 <processSerialData+0x244>)
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e082      	b.n	8003630 <processSerialData+0x1f0>
    //                	printf("KD:%7.2f\n",KD);
                    }
                    else if(sscanf(tempBuffer,"RESET:%d",&int1)>0)
 800352a:	463b      	mov	r3, r7
 800352c:	4a56      	ldr	r2, [pc, #344]	; (8003688 <processSerialData+0x248>)
 800352e:	4957      	ldr	r1, [pc, #348]	; (800368c <processSerialData+0x24c>)
 8003530:	4618      	mov	r0, r3
 8003532:	f008 fdab 	bl	800c08c <siscanf>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	dd05      	ble.n	8003548 <processSerialData+0x108>
                    {
                    	if(int1==1)
 800353c:	4b52      	ldr	r3, [pc, #328]	; (8003688 <processSerialData+0x248>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d175      	bne.n	8003630 <processSerialData+0x1f0>
                    	{
                            // 在适当的函数中调用
                            NVIC_SystemReset();
 8003544:	f7ff ff12 	bl	800336c <__NVIC_SystemReset>

                    	}

    //                	printf("KD:%7.2f\n",KD);
                    }
                    else if(sscanf(tempBuffer,"CLEAR:%d",&int1)>0)
 8003548:	463b      	mov	r3, r7
 800354a:	4a4f      	ldr	r2, [pc, #316]	; (8003688 <processSerialData+0x248>)
 800354c:	4950      	ldr	r1, [pc, #320]	; (8003690 <processSerialData+0x250>)
 800354e:	4618      	mov	r0, r3
 8003550:	f008 fd9c 	bl	800c08c <siscanf>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	dd11      	ble.n	800357e <processSerialData+0x13e>
                    {
                    	if(int1==1)
 800355a:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <processSerialData+0x248>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d166      	bne.n	8003630 <processSerialData+0x1f0>
                    	{
                    		  clear_Data(DRV8301_1.id);
 8003562:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <processSerialData+0x254>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f8e8 	bl	800373c <clear_Data>
                    		  clear_Data(DRV8301_2.id);
 800356c:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <processSerialData+0x258>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f8e3 	bl	800373c <clear_Data>
                    		  printf("clear_Data Succeed!\n");
 8003576:	4849      	ldr	r0, [pc, #292]	; (800369c <processSerialData+0x25c>)
 8003578:	f008 fd60 	bl	800c03c <puts>
 800357c:	e058      	b.n	8003630 <processSerialData+0x1f0>
                    	}
                    }
                    else if(sscanf(tempBuffer,"CHECK:%d",&int1)>0)
 800357e:	463b      	mov	r3, r7
 8003580:	4a41      	ldr	r2, [pc, #260]	; (8003688 <processSerialData+0x248>)
 8003582:	4947      	ldr	r1, [pc, #284]	; (80036a0 <processSerialData+0x260>)
 8003584:	4618      	mov	r0, r3
 8003586:	f008 fd81 	bl	800c08c <siscanf>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	dd0a      	ble.n	80035a6 <processSerialData+0x166>
                    {
                    	if(int1==1)
 8003590:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <processSerialData+0x248>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d14b      	bne.n	8003630 <processSerialData+0x1f0>
                    	{
                     		//读寄存器参数
                     		 DRV8301_Read_Protect(&DRV8301_1);
 8003598:	483e      	ldr	r0, [pc, #248]	; (8003694 <processSerialData+0x254>)
 800359a:	f7fd fd91 	bl	80010c0 <DRV8301_Read_Protect>

                     		 DRV8301_Read_Protect(&DRV8301_2);
 800359e:	483e      	ldr	r0, [pc, #248]	; (8003698 <processSerialData+0x258>)
 80035a0:	f7fd fd8e 	bl	80010c0 <DRV8301_Read_Protect>
 80035a4:	e044      	b.n	8003630 <processSerialData+0x1f0>

                    	}
                    }
                    else if(sscanf(tempBuffer,"DISPLAY_DATA:%d",&int1)>0)
 80035a6:	463b      	mov	r3, r7
 80035a8:	4a37      	ldr	r2, [pc, #220]	; (8003688 <processSerialData+0x248>)
 80035aa:	493e      	ldr	r1, [pc, #248]	; (80036a4 <processSerialData+0x264>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f008 fd6d 	bl	800c08c <siscanf>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dd0b      	ble.n	80035d0 <processSerialData+0x190>
                    {
                    	if(int1==1)
 80035b8:	4b33      	ldr	r3, [pc, #204]	; (8003688 <processSerialData+0x248>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d103      	bne.n	80035c8 <processSerialData+0x188>
                    	{
                    		DISPLAY_DATA=1;
 80035c0:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <processSerialData+0x268>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e033      	b.n	8003630 <processSerialData+0x1f0>
                    	}
                    	else
                    	{
                    		DISPLAY_DATA=0;
 80035c8:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <processSerialData+0x268>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e02f      	b.n	8003630 <processSerialData+0x1f0>
                    	}
                    }
                    else if(sscanf(tempBuffer,"clear_fault:%d",&int1)>0)
 80035d0:	463b      	mov	r3, r7
 80035d2:	4a2d      	ldr	r2, [pc, #180]	; (8003688 <processSerialData+0x248>)
 80035d4:	4935      	ldr	r1, [pc, #212]	; (80036ac <processSerialData+0x26c>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f008 fd58 	bl	800c08c <siscanf>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	dd10      	ble.n	8003604 <processSerialData+0x1c4>
                    {
                    	if(int1==1)
 80035e2:	4b29      	ldr	r3, [pc, #164]	; (8003688 <processSerialData+0x248>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d122      	bne.n	8003630 <processSerialData+0x1f0>
                    	{
                      		 DRV8301_GATE_RESET(&DRV8301_1);
 80035ea:	482a      	ldr	r0, [pc, #168]	; (8003694 <processSerialData+0x254>)
 80035ec:	f7fe f89e 	bl	800172c <DRV8301_GATE_RESET>
                      		 DRV8301_GATE_RESET(&DRV8301_2);
 80035f0:	4829      	ldr	r0, [pc, #164]	; (8003698 <processSerialData+0x258>)
 80035f2:	f7fe f89b 	bl	800172c <DRV8301_GATE_RESET>

                      		//读寄存器参数
                      		 DRV8301_Read_Protect(&DRV8301_1);
 80035f6:	4827      	ldr	r0, [pc, #156]	; (8003694 <processSerialData+0x254>)
 80035f8:	f7fd fd62 	bl	80010c0 <DRV8301_Read_Protect>

                      		 DRV8301_Read_Protect(&DRV8301_2);
 80035fc:	4826      	ldr	r0, [pc, #152]	; (8003698 <processSerialData+0x258>)
 80035fe:	f7fd fd5f 	bl	80010c0 <DRV8301_Read_Protect>
 8003602:	e015      	b.n	8003630 <processSerialData+0x1f0>
                    	}
                    }
                    else if(sscanf(tempBuffer,"EN:%d",&int1)>0)
 8003604:	463b      	mov	r3, r7
 8003606:	4a20      	ldr	r2, [pc, #128]	; (8003688 <processSerialData+0x248>)
 8003608:	4929      	ldr	r1, [pc, #164]	; (80036b0 <processSerialData+0x270>)
 800360a:	4618      	mov	r0, r3
 800360c:	f008 fd3e 	bl	800c08c <siscanf>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	dd0c      	ble.n	8003630 <processSerialData+0x1f0>
                    {
                    	if(int1==1)
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <processSerialData+0x248>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d104      	bne.n	8003628 <processSerialData+0x1e8>
                    	{
                    		DRV8301_EN(&DRV8301_1,ON);
 800361e:	2101      	movs	r1, #1
 8003620:	481c      	ldr	r0, [pc, #112]	; (8003694 <processSerialData+0x254>)
 8003622:	f7fe f85b 	bl	80016dc <DRV8301_EN>
 8003626:	e003      	b.n	8003630 <processSerialData+0x1f0>
                    	}
                    	else
                    	{
                    		DRV8301_EN(&DRV8301_1,OFF);
 8003628:	2100      	movs	r1, #0
 800362a:	481a      	ldr	r0, [pc, #104]	; (8003694 <processSerialData+0x254>)
 800362c:	f7fe f856 	bl	80016dc <DRV8301_EN>
                    	}
                    }

        /****************处理完之后重启DMA**********************/
        serialBuffer.new_data_available = false;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <processSerialData+0x208>)
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
        restartDMA(&usart_connect);
 8003638:	481e      	ldr	r0, [pc, #120]	; (80036b4 <processSerialData+0x274>)
 800363a:	f7ff fec1 	bl	80033c0 <restartDMA>

    }
}
 800363e:	bf00      	nop
 8003640:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000570 	.word	0x20000570
 800364c:	20000d98 	.word	0x20000d98
 8003650:	080109b0 	.word	0x080109b0
 8003654:	20000978 	.word	0x20000978
 8003658:	080109b8 	.word	0x080109b8
 800365c:	2000097c 	.word	0x2000097c
 8003660:	080109c0 	.word	0x080109c0
 8003664:	20000980 	.word	0x20000980
 8003668:	080109c8 	.word	0x080109c8
 800366c:	20000d84 	.word	0x20000d84
 8003670:	080109d0 	.word	0x080109d0
 8003674:	20000d88 	.word	0x20000d88
 8003678:	080109d8 	.word	0x080109d8
 800367c:	20000d8c 	.word	0x20000d8c
 8003680:	080109e0 	.word	0x080109e0
 8003684:	20000d90 	.word	0x20000d90
 8003688:	20000d94 	.word	0x20000d94
 800368c:	080109e8 	.word	0x080109e8
 8003690:	080109f4 	.word	0x080109f4
 8003694:	20000030 	.word	0x20000030
 8003698:	2000007c 	.word	0x2000007c
 800369c:	08010a00 	.word	0x08010a00
 80036a0:	08010a14 	.word	0x08010a14
 80036a4:	08010a20 	.word	0x08010a20
 80036a8:	200002d4 	.word	0x200002d4
 80036ac:	08010a30 	.word	0x08010a30
 80036b0:	08010a40 	.word	0x08010a40
 80036b4:	20001584 	.word	0x20001584

080036b8 <vofa_JustFloat_output>:



// voa快速发送数据函数
void vofa_JustFloat_output(float *data, uint8_t count)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
    static uint8_t tail[4] = {0x00, 0x00, 0x80, 0x7f};

    HAL_UART_Transmit(&usart_connect, (uint8_t*)data, sizeof(float) * count, 100); //发送数据
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	2364      	movs	r3, #100	; 0x64
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4806      	ldr	r0, [pc, #24]	; (80036ec <vofa_JustFloat_output+0x34>)
 80036d2:	f006 faaf 	bl	8009c34 <HAL_UART_Transmit>
    // 发送帧尾
    HAL_UART_Transmit(&usart_connect, tail, 4, 100);
 80036d6:	2364      	movs	r3, #100	; 0x64
 80036d8:	2204      	movs	r2, #4
 80036da:	4905      	ldr	r1, [pc, #20]	; (80036f0 <vofa_JustFloat_output+0x38>)
 80036dc:	4803      	ldr	r0, [pc, #12]	; (80036ec <vofa_JustFloat_output+0x34>)
 80036de:	f006 faa9 	bl	8009c34 <HAL_UART_Transmit>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20001584 	.word	0x20001584
 80036f0:	200002d8 	.word	0x200002d8

080036f4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
        HAL_UART_Transmit(&usart_connect, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 80036fc:	1d39      	adds	r1, r7, #4
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	2201      	movs	r2, #1
 8003704:	4803      	ldr	r0, [pc, #12]	; (8003714 <__io_putchar+0x20>)
 8003706:	f006 fa95 	bl	8009c34 <HAL_UART_Transmit>
    return ch;
 800370a:	687b      	ldr	r3, [r7, #4]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20001584 	.word	0x20001584

08003718 <calculateSectorNumber>:
// flash.c
#include "flash.h"

// 根据组号计算扇区号
int calculateSectorNumber(int groupNumber)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    if (groupNumber % 2 == 0)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <calculateSectorNumber+0x16>
    {
        return SECOND_LAST_SECTOR;
 800372a:	230b      	movs	r3, #11
 800372c:	e000      	b.n	8003730 <calculateSectorNumber+0x18>
    }
    else
    {
        return LAST_SECTOR;
 800372e:	230a      	movs	r3, #10
    }
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <clear_Data>:

// 因为是通过判断第一个数据是否为1000，来判断是否校准过，所以将一位改为零就可以清除校准数据（指定组）
void clear_Data(int groupNumber)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
    float data[1] = {0};
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
    // 将多个数据写入 Flash
    writeMultipleDataToFlash(data, 1, groupNumber);
 800374a:	f107 030c 	add.w	r3, r7, #12
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f804 	bl	8003760 <writeMultipleDataToFlash>
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <writeMultipleDataToFlash>:

// 将多个数据写入 Flash（指定组）
void writeMultipleDataToFlash(float *data, int dataCount, int groupNumber)
{
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b090      	sub	sp, #64	; 0x40
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 800376c:	f003 ffa6 	bl	80076bc <HAL_FLASH_Unlock>

    // 定义擦除扇区的错误状态和扇区地址
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003774:	2302      	movs	r3, #2
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28

    // 根据组号计算扇区号
    int sectorNumber = calculateSectorNumber(groupNumber);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffcd 	bl	8003718 <calculateSectorNumber>
 800377e:	6338      	str	r0, [r7, #48]	; 0x30
    EraseInitStruct.Sector = sectorNumber;
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	623b      	str	r3, [r7, #32]
    EraseInitStruct.NbSectors = 1;
 8003784:	2301      	movs	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t SectorError;

    // 擦除扇区
    HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8003788:	f107 0214 	add.w	r2, r7, #20
 800378c:	f107 0318 	add.w	r3, r7, #24
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f004 f8f4 	bl	8007980 <HAL_FLASHEx_Erase>

    // 根据扇区起始地址计算偏移地址
    uint32_t offset;
    if (sectorNumber == SECOND_LAST_SECTOR)
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	2b0b      	cmp	r3, #11
 800379c:	d102      	bne.n	80037a4 <writeMultipleDataToFlash+0x44>
    {
        offset = ADDR_FLASH_SECTOR_11;
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <writeMultipleDataToFlash+0x94>)
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a2:	e001      	b.n	80037a8 <writeMultipleDataToFlash+0x48>
    }
    else
    {
        offset = ADDR_FLASH_SECTOR_10;
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <writeMultipleDataToFlash+0x98>)
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    uint32_t *flashAddress = (uint32_t *)(offset);
 80037a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38

    for (int i = 0; i < dataCount; i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
 80037b0:	e015      	b.n	80037de <writeMultipleDataToFlash+0x7e>
    {
        // 将 float 数据转换为 32 位整数存储到 Flash
        uint32_t data32 = *(uint32_t *)&data[i];
 80037b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)flashAddress, data32);
 80037be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2200      	movs	r2, #0
 80037c4:	461c      	mov	r4, r3
 80037c6:	4615      	mov	r5, r2
 80037c8:	4622      	mov	r2, r4
 80037ca:	462b      	mov	r3, r5
 80037cc:	2002      	movs	r0, #2
 80037ce:	f003 ff21 	bl	8007614 <HAL_FLASH_Program>
        flashAddress++;
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	3304      	adds	r3, #4
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < dataCount; i++)
 80037d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037da:	3301      	adds	r3, #1
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
 80037de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dbe5      	blt.n	80037b2 <writeMultipleDataToFlash+0x52>
    }

    HAL_FLASH_Lock();
 80037e6:	f003 ff8b 	bl	8007700 <HAL_FLASH_Lock>
}
 80037ea:	bf00      	nop
 80037ec:	3740      	adds	r7, #64	; 0x40
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	080e0000 	.word	0x080e0000
 80037f8:	080c0000 	.word	0x080c0000

080037fc <readMultipleDataFromFlash>:

// 从 Flash 读取多个数据（指定组）
void readMultipleDataFromFlash(float *data, int dataCount, int groupNumber)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
    // 根据组号计算扇区号
    int sectorNumber = calculateSectorNumber(groupNumber);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff85 	bl	8003718 <calculateSectorNumber>
 800380e:	6138      	str	r0, [r7, #16]

    // 根据扇区起始地址计算偏移地址
    uint32_t offset;
    if (sectorNumber == SECOND_LAST_SECTOR)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b0b      	cmp	r3, #11
 8003814:	d102      	bne.n	800381c <readMultipleDataFromFlash+0x20>
    {
        offset = ADDR_FLASH_SECTOR_11;
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <readMultipleDataFromFlash+0x58>)
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e001      	b.n	8003820 <readMultipleDataFromFlash+0x24>
    }
    else
    {
        offset = ADDR_FLASH_SECTOR_10;
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <readMultipleDataFromFlash+0x5c>)
 800381e:	61fb      	str	r3, [r7, #28]
    }

    uint32_t *flashAddress = (uint32_t *)(offset);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < dataCount; i++)
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e00b      	b.n	8003842 <readMultipleDataFromFlash+0x46>
    {
        data[i] = *(float *)flashAddress++;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	61ba      	str	r2, [r7, #24]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	68f9      	ldr	r1, [r7, #12]
 8003836:	440a      	add	r2, r1
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < dataCount; i++)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	3301      	adds	r3, #1
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	dbef      	blt.n	800382a <readMultipleDataFromFlash+0x2e>
    }
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	080e0000 	.word	0x080e0000
 8003858:	080c0000 	.word	0x080c0000

0800385c <isDataStoredInFlash>:

// 检查 Flash 是否已经存储了指定数量的数据（指定组）
int isDataStoredInFlash(int groupNumber)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    // 根据组号计算扇区号
    int sectorNumber = calculateSectorNumber(groupNumber);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff57 	bl	8003718 <calculateSectorNumber>
 800386a:	6138      	str	r0, [r7, #16]

    // 根据扇区起始地址计算偏移地址
    uint32_t offset;
    if (sectorNumber == SECOND_LAST_SECTOR)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b0b      	cmp	r3, #11
 8003870:	d102      	bne.n	8003878 <isDataStoredInFlash+0x1c>
    {
        offset = ADDR_FLASH_SECTOR_11;
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <isDataStoredInFlash+0x5c>)
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e001      	b.n	800387c <isDataStoredInFlash+0x20>
    }
    else
    {
        offset = ADDR_FLASH_SECTOR_10;
 8003878:	4b10      	ldr	r3, [pc, #64]	; (80038bc <isDataStoredInFlash+0x60>)
 800387a:	617b      	str	r3, [r7, #20]
    }

    uint32_t *flashAddress = (uint32_t *)(offset);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	60fb      	str	r3, [r7, #12]

    // 我会将第一位设置成1000，如果我已经写过参数了的话
    if (*(float *)flashAddress > 999 && *(float *)flashAddress < 1001)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80038c0 <isDataStoredInFlash+0x64>
 800388a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	dd0b      	ble.n	80038ac <isDataStoredInFlash+0x50>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80038c4 <isDataStoredInFlash+0x68>
 800389e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d501      	bpl.n	80038ac <isDataStoredInFlash+0x50>
    {
        return 1;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <isDataStoredInFlash+0x52>
    }
    return 0;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	080e0000 	.word	0x080e0000
 80038bc:	080c0000 	.word	0x080c0000
 80038c0:	4479c000 	.word	0x4479c000
 80038c4:	447a4000 	.word	0x447a4000

080038c8 <OLED_Printf>:

}


// OLED 显示 printf 函数
void OLED_Printf(int16_t x, int16_t y, uint8_t size, const char *pFormat,...) {
 80038c8:	b408      	push	{r3}
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b09f      	sub	sp, #124	; 0x7c
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	80fb      	strh	r3, [r7, #6]
 80038d4:	460b      	mov	r3, r1
 80038d6:	80bb      	strh	r3, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	70fb      	strb	r3, [r7, #3]
    char pStr[100] = {'\0'};
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	2260      	movs	r2, #96	; 0x60
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f008 fd0f 	bl	800c30c <memset>
    va_list ap;

    va_start(ap, pFormat);
 80038ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80038f2:	60fb      	str	r3, [r7, #12]
    // 使用 vsnprintf 替代 vsprintf
    vsnprintf(pStr, sizeof(pStr), pFormat, ap);
 80038f4:	f107 0010 	add.w	r0, r7, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80038fe:	2164      	movs	r1, #100	; 0x64
 8003900:	f008 fc60 	bl	800c1c4 <vsniprintf>
    va_end(ap);

    uint8_t i = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    while (pStr[i]!= '\0' && x < OLED_WIDTH && y < OLED_HIGH) {
 800390a:	e015      	b.n	8003938 <OLED_Printf+0x70>
        OLED_ShowChar(x, y, size, pStr[i]);
 800390c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003910:	3378      	adds	r3, #120	; 0x78
 8003912:	443b      	add	r3, r7
 8003914:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800391e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003922:	f000 f821 	bl	8003968 <OLED_ShowChar>
        x += 8;
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	3308      	adds	r3, #8
 800392a:	b29b      	uxth	r3, r3
 800392c:	80fb      	strh	r3, [r7, #6]
        i++;
 800392e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003932:	3301      	adds	r3, #1
 8003934:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    while (pStr[i]!= '\0' && x < OLED_WIDTH && y < OLED_HIGH) {
 8003938:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800393c:	3378      	adds	r3, #120	; 0x78
 800393e:	443b      	add	r3, r7
 8003940:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <OLED_Printf+0x90>
 8003948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800394c:	2b4f      	cmp	r3, #79	; 0x4f
 800394e:	dc03      	bgt.n	8003958 <OLED_Printf+0x90>
 8003950:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003954:	2b7f      	cmp	r3, #127	; 0x7f
 8003956:	ddd9      	ble.n	800390c <OLED_Printf+0x44>
    }
}
 8003958:	bf00      	nop
 800395a:	377c      	adds	r7, #124	; 0x7c
 800395c:	46bd      	mov	sp, r7
 800395e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003962:	b001      	add	sp, #4
 8003964:	4770      	bx	lr
	...

08003968 <OLED_ShowChar>:



// 显示指定字符,阴码+列行式+逆向+C51格式
void OLED_ShowChar(int16_t x, int16_t y, TextSize size, uint8_t chr)
{
 8003968:	b490      	push	{r4, r7}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	461a      	mov	r2, r3
 8003976:	4623      	mov	r3, r4
 8003978:	80fb      	strh	r3, [r7, #6]
 800397a:	4603      	mov	r3, r0
 800397c:	80bb      	strh	r3, [r7, #4]
 800397e:	460b      	mov	r3, r1
 8003980:	70fb      	strb	r3, [r7, #3]
 8003982:	4613      	mov	r3, r2
 8003984:	70bb      	strb	r3, [r7, #2]
	//如果超出范围则退出
	if((chr>= ' ') && (chr <= '~'))
 8003986:	78bb      	ldrb	r3, [r7, #2]
 8003988:	2b1f      	cmp	r3, #31
 800398a:	f240 8172 	bls.w	8003c72 <OLED_ShowChar+0x30a>
 800398e:	78bb      	ldrb	r3, [r7, #2]
 8003990:	2b7e      	cmp	r3, #126	; 0x7e
 8003992:	f200 816e 	bhi.w	8003c72 <OLED_ShowChar+0x30a>
	{
	    chr -= ' '; // 将字符索引转换为内部数组索引
 8003996:	78bb      	ldrb	r3, [r7, #2]
 8003998:	3b20      	subs	r3, #32
 800399a:	70bb      	strb	r3, [r7, #2]


        	//定义一个变量
        	uint8_t col;
    	    // 使用 8x16 字体
    	    if (size == OLED_FONT_8x16)
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	2b10      	cmp	r3, #16
 80039a0:	f040 80c3 	bne.w	8003b2a <OLED_ShowChar+0x1c2>
    	    {
    	    	//分成上下两排来绘制
    	    	for (uint8_t drow = 0; drow <2; drow++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	e0ba      	b.n	8003b20 <OLED_ShowChar+0x1b8>
    	    	{
    				for (uint8_t dx = 0; dx < 8; dx++)
 80039aa:	2300      	movs	r3, #0
 80039ac:	73bb      	strb	r3, [r7, #14]
 80039ae:	e0b0      	b.n	8003b12 <OLED_ShowChar+0x1aa>
    					{
    						for (uint8_t dy = 0; dy < 8; dy++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	737b      	strb	r3, [r7, #13]
 80039b4:	e0a6      	b.n	8003b04 <OLED_ShowChar+0x19c>
    						{
    							//判断字符点没有超出范围
    							 if (((x+dx) < OLED_WIDTH) && ((x+dx) >=0) &&  ((y+dy+8*drow) < OLED_HIGH) && ((y+dy+8*drow)>=0))
 80039b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039ba:	7bbb      	ldrb	r3, [r7, #14]
 80039bc:	4413      	add	r3, r2
 80039be:	2b4f      	cmp	r3, #79	; 0x4f
 80039c0:	f300 809d 	bgt.w	8003afe <OLED_ShowChar+0x196>
 80039c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039c8:	7bbb      	ldrb	r3, [r7, #14]
 80039ca:	4413      	add	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f2c0 8096 	blt.w	8003afe <OLED_ShowChar+0x196>
 80039d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039d6:	7b7b      	ldrb	r3, [r7, #13]
 80039d8:	441a      	add	r2, r3
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	2b7f      	cmp	r3, #127	; 0x7f
 80039e2:	f300 808c 	bgt.w	8003afe <OLED_ShowChar+0x196>
 80039e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039ea:	7b7b      	ldrb	r3, [r7, #13]
 80039ec:	441a      	add	r2, r3
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f2c0 8082 	blt.w	8003afe <OLED_ShowChar+0x196>
    							{
    								col = Char_16[chr][dx+8*drow];
 80039fa:	78ba      	ldrb	r2, [r7, #2]
 80039fc:	7bb9      	ldrb	r1, [r7, #14]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	499d      	ldr	r1, [pc, #628]	; (8003c7c <OLED_ShowChar+0x314>)
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	440a      	add	r2, r1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	72bb      	strb	r3, [r7, #10]
    								if((col & (0x01 << dy))>0)
 8003a10:	7aba      	ldrb	r2, [r7, #10]
 8003a12:	7b7b      	ldrb	r3, [r7, #13]
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	dd36      	ble.n	8003a8e <OLED_ShowChar+0x126>
    								{
    									OLED_GRAM[(y+dy+8*drow)/8][x+dx] |= (0x01 << ((y+dy+8*drow)%8)) ;
 8003a20:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003a24:	7b7b      	ldrb	r3, [r7, #13]
 8003a26:	441a      	add	r2, r3
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da00      	bge.n	8003a34 <OLED_ShowChar+0xcc>
 8003a32:	3307      	adds	r3, #7
 8003a34:	10db      	asrs	r3, r3, #3
 8003a36:	461a      	mov	r2, r3
 8003a38:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	4419      	add	r1, r3
 8003a40:	488f      	ldr	r0, [pc, #572]	; (8003c80 <OLED_ShowChar+0x318>)
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	4403      	add	r3, r0
 8003a4c:	440b      	add	r3, r1
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	b259      	sxtb	r1, r3
 8003a52:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003a56:	7b7b      	ldrb	r3, [r7, #13]
 8003a58:	4418      	add	r0, r3
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4403      	add	r3, r0
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	2001      	movs	r0, #1
 8003a66:	fa00 f303 	lsl.w	r3, r0, r3
 8003a6a:	b25b      	sxtb	r3, r3
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	b258      	sxtb	r0, r3
 8003a70:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003a74:	7bbb      	ldrb	r3, [r7, #14]
 8003a76:	4419      	add	r1, r3
 8003a78:	b2c4      	uxtb	r4, r0
 8003a7a:	4881      	ldr	r0, [pc, #516]	; (8003c80 <OLED_ShowChar+0x318>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4403      	add	r3, r0
 8003a86:	440b      	add	r3, r1
 8003a88:	4622      	mov	r2, r4
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	e037      	b.n	8003afe <OLED_ShowChar+0x196>
    								}
    								else
    								{
    						            // 设置指定点的值为 0，使用位运算设置对应位
    									OLED_GRAM[(y+dy+8*drow)/8][x+dx] &= ~(0x01 << ((y+dy+8*drow)%8));
 8003a8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003a92:	7b7b      	ldrb	r3, [r7, #13]
 8003a94:	441a      	add	r2, r3
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	da00      	bge.n	8003aa2 <OLED_ShowChar+0x13a>
 8003aa0:	3307      	adds	r3, #7
 8003aa2:	10db      	asrs	r3, r3, #3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003aaa:	7bbb      	ldrb	r3, [r7, #14]
 8003aac:	4419      	add	r1, r3
 8003aae:	4874      	ldr	r0, [pc, #464]	; (8003c80 <OLED_ShowChar+0x318>)
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4403      	add	r3, r0
 8003aba:	440b      	add	r3, r1
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	b259      	sxtb	r1, r3
 8003ac0:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003ac4:	7b7b      	ldrb	r3, [r7, #13]
 8003ac6:	4418      	add	r0, r3
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4403      	add	r3, r0
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	fa00 f303 	lsl.w	r3, r0, r3
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	b25b      	sxtb	r3, r3
 8003ade:	400b      	ands	r3, r1
 8003ae0:	b258      	sxtb	r0, r3
 8003ae2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003ae6:	7bbb      	ldrb	r3, [r7, #14]
 8003ae8:	4419      	add	r1, r3
 8003aea:	b2c4      	uxtb	r4, r0
 8003aec:	4864      	ldr	r0, [pc, #400]	; (8003c80 <OLED_ShowChar+0x318>)
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4403      	add	r3, r0
 8003af8:	440b      	add	r3, r1
 8003afa:	4622      	mov	r2, r4
 8003afc:	701a      	strb	r2, [r3, #0]
    						for (uint8_t dy = 0; dy < 8; dy++)
 8003afe:	7b7b      	ldrb	r3, [r7, #13]
 8003b00:	3301      	adds	r3, #1
 8003b02:	737b      	strb	r3, [r7, #13]
 8003b04:	7b7b      	ldrb	r3, [r7, #13]
 8003b06:	2b07      	cmp	r3, #7
 8003b08:	f67f af55 	bls.w	80039b6 <OLED_ShowChar+0x4e>
    				for (uint8_t dx = 0; dx < 8; dx++)
 8003b0c:	7bbb      	ldrb	r3, [r7, #14]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	73bb      	strb	r3, [r7, #14]
 8003b12:	7bbb      	ldrb	r3, [r7, #14]
 8003b14:	2b07      	cmp	r3, #7
 8003b16:	f67f af4b 	bls.w	80039b0 <OLED_ShowChar+0x48>
    	    	for (uint8_t drow = 0; drow <2; drow++)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	f67f af41 	bls.w	80039aa <OLED_ShowChar+0x42>


    }


}
 8003b28:	e0a3      	b.n	8003c72 <OLED_ShowChar+0x30a>
    	    else if(size == OLED_FONT_8x8) // 默认使用 8x8 字体
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	f040 80a0 	bne.w	8003c72 <OLED_ShowChar+0x30a>
				for (uint8_t dx = 0; dx < 8; dx++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	733b      	strb	r3, [r7, #12]
 8003b36:	e098      	b.n	8003c6a <OLED_ShowChar+0x302>
					for (uint8_t dy = 0; dy < 8; dy++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	72fb      	strb	r3, [r7, #11]
 8003b3c:	e08e      	b.n	8003c5c <OLED_ShowChar+0x2f4>
						if (((x+dx) < OLED_WIDTH) && ((x+dx) >=0) &&  ((y+dy) < OLED_HIGH) && ((y+dy)>=0))
 8003b3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b42:	7b3b      	ldrb	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	2b4f      	cmp	r3, #79	; 0x4f
 8003b48:	f300 8085 	bgt.w	8003c56 <OLED_ShowChar+0x2ee>
 8003b4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b50:	7b3b      	ldrb	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	db7e      	blt.n	8003c56 <OLED_ShowChar+0x2ee>
 8003b58:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	4413      	add	r3, r2
 8003b60:	2b7f      	cmp	r3, #127	; 0x7f
 8003b62:	dc78      	bgt.n	8003c56 <OLED_ShowChar+0x2ee>
 8003b64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b68:	7afb      	ldrb	r3, [r7, #11]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	db72      	blt.n	8003c56 <OLED_ShowChar+0x2ee>
							col = Char_8[chr][dx];
 8003b70:	78ba      	ldrb	r2, [r7, #2]
 8003b72:	7b3b      	ldrb	r3, [r7, #12]
 8003b74:	4943      	ldr	r1, [pc, #268]	; (8003c84 <OLED_ShowChar+0x31c>)
 8003b76:	00d2      	lsls	r2, r2, #3
 8003b78:	440a      	add	r2, r1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	72bb      	strb	r3, [r7, #10]
							if((col & (0x01 << dy))>0)
 8003b80:	7aba      	ldrb	r2, [r7, #10]
 8003b82:	7afb      	ldrb	r3, [r7, #11]
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dd30      	ble.n	8003bf2 <OLED_ShowChar+0x28a>
								OLED_GRAM[(y+dy)/8][x+dx] |= (0x01 << ((y+dy)%8)) ;
 8003b90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	4413      	add	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	da00      	bge.n	8003b9e <OLED_ShowChar+0x236>
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	10db      	asrs	r3, r3, #3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003ba6:	7b3b      	ldrb	r3, [r7, #12]
 8003ba8:	4419      	add	r1, r3
 8003baa:	4835      	ldr	r0, [pc, #212]	; (8003c80 <OLED_ShowChar+0x318>)
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4403      	add	r3, r0
 8003bb6:	440b      	add	r3, r1
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b259      	sxtb	r1, r3
 8003bbc:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003bc0:	7afb      	ldrb	r3, [r7, #11]
 8003bc2:	4403      	add	r3, r0
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	2001      	movs	r0, #1
 8003bca:	fa00 f303 	lsl.w	r3, r0, r3
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	b258      	sxtb	r0, r3
 8003bd4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003bd8:	7b3b      	ldrb	r3, [r7, #12]
 8003bda:	4419      	add	r1, r3
 8003bdc:	b2c4      	uxtb	r4, r0
 8003bde:	4828      	ldr	r0, [pc, #160]	; (8003c80 <OLED_ShowChar+0x318>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	4403      	add	r3, r0
 8003bea:	440b      	add	r3, r1
 8003bec:	4622      	mov	r2, r4
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	e031      	b.n	8003c56 <OLED_ShowChar+0x2ee>
								OLED_GRAM[(y+dy)/8][x+dx] &= ~(0x01 << ((y+dy)%8));
 8003bf2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	da00      	bge.n	8003c00 <OLED_ShowChar+0x298>
 8003bfe:	3307      	adds	r3, #7
 8003c00:	10db      	asrs	r3, r3, #3
 8003c02:	461a      	mov	r2, r3
 8003c04:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003c08:	7b3b      	ldrb	r3, [r7, #12]
 8003c0a:	4419      	add	r1, r3
 8003c0c:	481c      	ldr	r0, [pc, #112]	; (8003c80 <OLED_ShowChar+0x318>)
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	4403      	add	r3, r0
 8003c18:	440b      	add	r3, r1
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b259      	sxtb	r1, r3
 8003c1e:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	4403      	add	r3, r0
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	fa00 f303 	lsl.w	r3, r0, r3
 8003c30:	b25b      	sxtb	r3, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	400b      	ands	r3, r1
 8003c38:	b258      	sxtb	r0, r3
 8003c3a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003c3e:	7b3b      	ldrb	r3, [r7, #12]
 8003c40:	4419      	add	r1, r3
 8003c42:	b2c4      	uxtb	r4, r0
 8003c44:	480e      	ldr	r0, [pc, #56]	; (8003c80 <OLED_ShowChar+0x318>)
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	4403      	add	r3, r0
 8003c50:	440b      	add	r3, r1
 8003c52:	4622      	mov	r2, r4
 8003c54:	701a      	strb	r2, [r3, #0]
					for (uint8_t dy = 0; dy < 8; dy++)
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	72fb      	strb	r3, [r7, #11]
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	2b07      	cmp	r3, #7
 8003c60:	f67f af6d 	bls.w	8003b3e <OLED_ShowChar+0x1d6>
				for (uint8_t dx = 0; dx < 8; dx++)
 8003c64:	7b3b      	ldrb	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	733b      	strb	r3, [r7, #12]
 8003c6a:	7b3b      	ldrb	r3, [r7, #12]
 8003c6c:	2b07      	cmp	r3, #7
 8003c6e:	f67f af63 	bls.w	8003b38 <OLED_ShowChar+0x1d0>
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc90      	pop	{r4, r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	08010d7c 	.word	0x08010d7c
 8003c80:	20000d9c 	.word	0x20000d9c
 8003c84:	0801136c 	.word	0x0801136c

08003c88 <OLED_Reflash>:


/*************************GRAM显存操作函数********************************************/
//更新显存到OLED
void OLED_Reflash(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
	static uint8_t init_flag=0;
    static uint32_t lastTick = 0;
    static uint32_t frameCount = 0;

    if(init_flag==0)
 8003c8e:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <OLED_Reflash+0xd8>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <OLED_Reflash+0x1e>
    {
    	//初始化lastTick
    	lastTick = HAL_GetTick();
 8003c96:	f001 fd7d 	bl	8005794 <HAL_GetTick>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4a31      	ldr	r2, [pc, #196]	; (8003d64 <OLED_Reflash+0xdc>)
 8003c9e:	6013      	str	r3, [r2, #0]
    	init_flag=1;
 8003ca0:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <OLED_Reflash+0xd8>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
//		{
//			OLED_WriteData(OLED_GRAM[i][n]);
//		}
//	}

	for(uint8_t i=0;i<OLED_ROW;i++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	71fb      	strb	r3, [r7, #7]
 8003caa:	e01d      	b.n	8003ce8 <OLED_Reflash+0x60>
	{
		//设置页地址
		OLED_Set_Pos(0,i);
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f000 f889 	bl	8003dc8 <OLED_Set_Pos>
		for(uint8_t n=0;n<OLED_WIDTH;n++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	71bb      	strb	r3, [r7, #6]
 8003cba:	e00f      	b.n	8003cdc <OLED_Reflash+0x54>
		{
			OLED_WriteData(OLED_GRAM[i][n]);
 8003cbc:	79fa      	ldrb	r2, [r7, #7]
 8003cbe:	79b9      	ldrb	r1, [r7, #6]
 8003cc0:	4829      	ldr	r0, [pc, #164]	; (8003d68 <OLED_Reflash+0xe0>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	4403      	add	r3, r0
 8003ccc:	440b      	add	r3, r1
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f92d 	bl	8003f30 <OLED_WriteData>
		for(uint8_t n=0;n<OLED_WIDTH;n++)
 8003cd6:	79bb      	ldrb	r3, [r7, #6]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	71bb      	strb	r3, [r7, #6]
 8003cdc:	79bb      	ldrb	r3, [r7, #6]
 8003cde:	2b4f      	cmp	r3, #79	; 0x4f
 8003ce0:	d9ec      	bls.n	8003cbc <OLED_Reflash+0x34>
	for(uint8_t i=0;i<OLED_ROW;i++)
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	71fb      	strb	r3, [r7, #7]
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	d9de      	bls.n	8003cac <OLED_Reflash+0x24>




	// 每秒更新一次帧率
	uint32_t currentTick = HAL_GetTick();
 8003cee:	f001 fd51 	bl	8005794 <HAL_GetTick>
 8003cf2:	6038      	str	r0, [r7, #0]
    if (currentTick >= lastTick)
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <OLED_Reflash+0xdc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d313      	bcc.n	8003d26 <OLED_Reflash+0x9e>
    {
        if((currentTick - lastTick)>=1000)
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <OLED_Reflash+0xdc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0a:	d31f      	bcc.n	8003d4c <OLED_Reflash+0xc4>
        {
        	OLED_FPS = frameCount;
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <OLED_Reflash+0xe4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <OLED_Reflash+0xe8>)
 8003d12:	6013      	str	r3, [r2, #0]
            frameCount = 0;
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <OLED_Reflash+0xe4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
            lastTick = HAL_GetTick();
 8003d1a:	f001 fd3b 	bl	8005794 <HAL_GetTick>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <OLED_Reflash+0xdc>)
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	e012      	b.n	8003d4c <OLED_Reflash+0xc4>
        }
    }
    else
    {
        if((0xffffffff - lastTick + currentTick + 1)>=1000)
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <OLED_Reflash+0xdc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d32:	d30b      	bcc.n	8003d4c <OLED_Reflash+0xc4>
          {
          	OLED_FPS = frameCount;
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <OLED_Reflash+0xe4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <OLED_Reflash+0xe8>)
 8003d3a:	6013      	str	r3, [r2, #0]
              frameCount = 0;
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <OLED_Reflash+0xe4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
              lastTick = HAL_GetTick();
 8003d42:	f001 fd27 	bl	8005794 <HAL_GetTick>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a06      	ldr	r2, [pc, #24]	; (8003d64 <OLED_Reflash+0xdc>)
 8003d4a:	6013      	str	r3, [r2, #0]
          }
    }


    frameCount++;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <OLED_Reflash+0xe4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	4a06      	ldr	r2, [pc, #24]	; (8003d6c <OLED_Reflash+0xe4>)
 8003d54:	6013      	str	r3, [r2, #0]


}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200012a0 	.word	0x200012a0
 8003d64:	200012a4 	.word	0x200012a4
 8003d68:	20000d9c 	.word	0x20000d9c
 8003d6c:	200012a8 	.word	0x200012a8
 8003d70:	2000129c 	.word	0x2000129c

08003d74 <OLED_GRAM_CLR>:
//清零显存操作
void OLED_GRAM_CLR(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<OLED_ROW;i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	71fb      	strb	r3, [r7, #7]
 8003d7e:	e016      	b.n	8003dae <OLED_GRAM_CLR+0x3a>
	{
		for(uint8_t n=0;n<OLED_WIDTH;n++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	71bb      	strb	r3, [r7, #6]
 8003d84:	e00d      	b.n	8003da2 <OLED_GRAM_CLR+0x2e>
		{
			OLED_GRAM[i][n] = 0;
 8003d86:	79fa      	ldrb	r2, [r7, #7]
 8003d88:	79b9      	ldrb	r1, [r7, #6]
 8003d8a:	480e      	ldr	r0, [pc, #56]	; (8003dc4 <OLED_GRAM_CLR+0x50>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	4403      	add	r3, r0
 8003d96:	440b      	add	r3, r1
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
		for(uint8_t n=0;n<OLED_WIDTH;n++)
 8003d9c:	79bb      	ldrb	r3, [r7, #6]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	71bb      	strb	r3, [r7, #6]
 8003da2:	79bb      	ldrb	r3, [r7, #6]
 8003da4:	2b4f      	cmp	r3, #79	; 0x4f
 8003da6:	d9ee      	bls.n	8003d86 <OLED_GRAM_CLR+0x12>
	for(uint8_t i=0;i<OLED_ROW;i++)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	3301      	adds	r3, #1
 8003dac:	71fb      	strb	r3, [r7, #7]
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	d9e5      	bls.n	8003d80 <OLED_GRAM_CLR+0xc>
		}
	}
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20000d9c 	.word	0x20000d9c

08003dc8 <OLED_Set_Pos>:
/*************************OLED基本显示函数********************************************/
//参数x是列（0-79，也就是列地址最多为0x3F，SH1107最多可达0x7F），y是页（0-15，也就是页地址最多为0x0F）
void OLED_Set_Pos(unsigned char x, unsigned char y)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	71fb      	strb	r3, [r7, #7]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCmd(0xb0+y);					 // 设置页地址
 8003dd8:	79bb      	ldrb	r3, [r7, #6]
 8003dda:	3b50      	subs	r3, #80	; 0x50
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f884 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(((x&0xf0)>>4)|0x10);   	 // 设置列高地址
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f043 0310 	orr.w	r3, r3, #16
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f87b 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(x&0x0f);         			 // 设置列低地址
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f874 	bl	8003eec <OLED_WriteCmd>
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <OLED_Init>:
	OLED_WriteCmd(0XAE);  //DISPLAY OFF
}

//初始化SSD1306,默认是水平寻址模式，页地址自动加一
void OLED_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
	OLED_RES_CLR();
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e16:	4834      	ldr	r0, [pc, #208]	; (8003ee8 <OLED_Init+0xdc>)
 8003e18:	f004 f888 	bl	8007f2c <HAL_GPIO_WritePin>
	//延时100ms等待OLED电源稳定
	HAL_Delay(100);
 8003e1c:	2064      	movs	r0, #100	; 0x64
 8003e1e:	f001 fcc5 	bl	80057ac <HAL_Delay>
	OLED_RES_SET();
 8003e22:	2201      	movs	r2, #1
 8003e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e28:	482f      	ldr	r0, [pc, #188]	; (8003ee8 <OLED_Init+0xdc>)
 8003e2a:	f004 f87f 	bl	8007f2c <HAL_GPIO_WritePin>

	OLED_WriteCmd(0xAE);//--display off
 8003e2e:	20ae      	movs	r0, #174	; 0xae
 8003e30:	f000 f85c 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x00);//--set lower column address
 8003e34:	2000      	movs	r0, #0
 8003e36:	f000 f859 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x10);//--set high column address
 8003e3a:	2010      	movs	r0, #16
 8003e3c:	f000 f856 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xB0);//--set page address
 8003e40:	20b0      	movs	r0, #176	; 0xb0
 8003e42:	f000 f853 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x81);//---contract control
 8003e46:	2081      	movs	r0, #129	; 0x81
 8003e48:	f000 f850 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xBF);//--128
 8003e4c:	20bf      	movs	r0, #191	; 0xbf
 8003e4e:	f000 f84d 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xA1);//--set segment remap
 8003e52:	20a1      	movs	r0, #161	; 0xa1
 8003e54:	f000 f84a 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xA6);//--normal / reverse
 8003e58:	20a6      	movs	r0, #166	; 0xa6
 8003e5a:	f000 f847 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xA8);//--set multiplex ratio 驱动列数，屏幕有多宽就是多少
 8003e5e:	20a8      	movs	r0, #168	; 0xa8
 8003e60:	f000 f844 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(OLED_WIDTH-1);//--1/80 duty
 8003e64:	204f      	movs	r0, #79	; 0x4f
 8003e66:	f000 f841 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xad);//--set charge pump enable
 8003e6a:	20ad      	movs	r0, #173	; 0xad
 8003e6c:	f000 f83e 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x8a);//--0x8a 外供 VCC
 8003e70:	208a      	movs	r0, #138	; 0x8a
 8003e72:	f000 f83b 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x32);//--0X30---0X33 set VPP 8V
 8003e76:	2032      	movs	r0, #50	; 0x32
 8003e78:	f000 f838 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xC8);//--Com scan direction
 8003e7c:	20c8      	movs	r0, #200	; 0xc8
 8003e7e:	f000 f835 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xD3);//--set display offset
 8003e82:	20d3      	movs	r0, #211	; 0xd3
 8003e84:	f000 f832 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x18);//--SH1107 OLED 128x80 显示屏需要偏移24个像素点
 8003e88:	2018      	movs	r0, #24
 8003e8a:	f000 f82f 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xD5);//--set osc division
 8003e8e:	20d5      	movs	r0, #213	; 0xd5
 8003e90:	f000 f82c 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x80);//--128
 8003e94:	2080      	movs	r0, #128	; 0x80
 8003e96:	f000 f829 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xD9);//--set pre-charge period
 8003e9a:	20d9      	movs	r0, #217	; 0xd9
 8003e9c:	f000 f826 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x22);//--0x22
 8003ea0:	2022      	movs	r0, #34	; 0x22
 8003ea2:	f000 f823 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xDA);//--set COM pins
 8003ea6:	20da      	movs	r0, #218	; 0xda
 8003ea8:	f000 f820 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x12);//--
 8003eac:	2012      	movs	r0, #18
 8003eae:	f000 f81d 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xDC);//--Set Display Start Line
 8003eb2:	20dc      	movs	r0, #220	; 0xdc
 8003eb4:	f000 f81a 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x00);//--
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f000 f817 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0xdb);//--set vcomh
 8003ebe:	20db      	movs	r0, #219	; 0xdb
 8003ec0:	f000 f814 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x40);//--
 8003ec4:	2040      	movs	r0, #64	; 0x40
 8003ec6:	f000 f811 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x8D);//--set DC-DC enable
 8003eca:	208d      	movs	r0, #141	; 0x8d
 8003ecc:	f000 f80e 	bl	8003eec <OLED_WriteCmd>
	OLED_WriteCmd(0x14);
 8003ed0:	2014      	movs	r0, #20
 8003ed2:	f000 f80b 	bl	8003eec <OLED_WriteCmd>
	//先清屏
	OLED_GRAM_CLR();
 8003ed6:	f7ff ff4d 	bl	8003d74 <OLED_GRAM_CLR>
	OLED_Reflash();
 8003eda:	f7ff fed5 	bl	8003c88 <OLED_Reflash>
	//屏幕开显示
	OLED_WriteCmd(0xAF);//--display ON
 8003ede:	20af      	movs	r0, #175	; 0xaf
 8003ee0:	f000 f804 	bl	8003eec <OLED_WriteCmd>
//	OLED_WriteCmd(0x00);
//	OLED_WriteCmd(0x07);

//	OLED_GRAM_CLR();
//	OLED_Reflash();
}
 8003ee4:	bf00      	nop
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40020000 	.word	0x40020000

08003eec <OLED_WriteCmd>:

/*************************OLED基本驱动函数********************************************/
//写命令
void OLED_WriteCmd(uint8_t Cmd)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
	OLED_CS_CLR();
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003efc:	480a      	ldr	r0, [pc, #40]	; (8003f28 <OLED_WriteCmd+0x3c>)
 8003efe:	f004 f815 	bl	8007f2c <HAL_GPIO_WritePin>
	OLED_DC_Cmd();//DC引脚低电平表示命令
 8003f02:	2200      	movs	r2, #0
 8003f04:	2104      	movs	r1, #4
 8003f06:	4809      	ldr	r0, [pc, #36]	; (8003f2c <OLED_WriteCmd+0x40>)
 8003f08:	f004 f810 	bl	8007f2c <HAL_GPIO_WritePin>
	#ifdef Software_SPI
		//使用软件SPI
		Software_SPI_Write(Cmd);
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f830 	bl	8003f74 <Software_SPI_Write>
	#else
		//使用硬件SPI
		Hardware_SPI_Write(&Cmd);
	#endif
	OLED_CS_SET();
 8003f14:	2201      	movs	r2, #1
 8003f16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f1a:	4803      	ldr	r0, [pc, #12]	; (8003f28 <OLED_WriteCmd+0x3c>)
 8003f1c:	f004 f806 	bl	8007f2c <HAL_GPIO_WritePin>
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400

08003f30 <OLED_WriteData>:
//写数据
void OLED_WriteData(uint8_t Cmd)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]
	OLED_CS_CLR();
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f40:	480a      	ldr	r0, [pc, #40]	; (8003f6c <OLED_WriteData+0x3c>)
 8003f42:	f003 fff3 	bl	8007f2c <HAL_GPIO_WritePin>
	OLED_DC_Data();//DC引脚高电平表示数据
 8003f46:	2201      	movs	r2, #1
 8003f48:	2104      	movs	r1, #4
 8003f4a:	4809      	ldr	r0, [pc, #36]	; (8003f70 <OLED_WriteData+0x40>)
 8003f4c:	f003 ffee 	bl	8007f2c <HAL_GPIO_WritePin>
	#ifdef Software_SPI
		//使用软件SPI
		Software_SPI_Write(Cmd);
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f80e 	bl	8003f74 <Software_SPI_Write>
	#else
		//使用硬件SPI
		Hardware_SPI_Write(&Cmd);
#endif
	OLED_CS_SET();
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f5e:	4803      	ldr	r0, [pc, #12]	; (8003f6c <OLED_WriteData+0x3c>)
 8003f60:	f003 ffe4 	bl	8007f2c <HAL_GPIO_WritePin>
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	40020400 	.word	0x40020400

08003f74 <Software_SPI_Write>:
//软件spi写一个字节
void Software_SPI_Write(uint8_t Byte)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<8;i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	e022      	b.n	8003fca <Software_SPI_Write+0x56>
	{
		OLED_SCL_CLR();
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f8a:	4814      	ldr	r0, [pc, #80]	; (8003fdc <Software_SPI_Write+0x68>)
 8003f8c:	f003 ffce 	bl	8007f2c <HAL_GPIO_WritePin>
		if(Byte & 0x80)	OLED_SDA_SET();   //高位先行
 8003f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da06      	bge.n	8003fa6 <Software_SPI_Write+0x32>
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f9e:	480f      	ldr	r0, [pc, #60]	; (8003fdc <Software_SPI_Write+0x68>)
 8003fa0:	f003 ffc4 	bl	8007f2c <HAL_GPIO_WritePin>
 8003fa4:	e005      	b.n	8003fb2 <Software_SPI_Write+0x3e>
		else 			OLED_SDA_CLR();
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fac:	480b      	ldr	r0, [pc, #44]	; (8003fdc <Software_SPI_Write+0x68>)
 8003fae:	f003 ffbd 	bl	8007f2c <HAL_GPIO_WritePin>
		Byte <<= 1;
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	71fb      	strb	r3, [r7, #7]
		OLED_SCL_SET();
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fbe:	4807      	ldr	r0, [pc, #28]	; (8003fdc <Software_SPI_Write+0x68>)
 8003fc0:	f003 ffb4 	bl	8007f2c <HAL_GPIO_WritePin>
	for(uint8_t i=0;i<8;i++)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	2b07      	cmp	r3, #7
 8003fce:	d9d9      	bls.n	8003f84 <Software_SPI_Write+0x10>
	}
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40020400 	.word	0x40020400

08003fe0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08c      	sub	sp, #48	; 0x30
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fe6:	f107 0320 	add.w	r3, r7, #32
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f008 f986 	bl	800c30c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004000:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004002:	4a3f      	ldr	r2, [pc, #252]	; (8004100 <MX_ADC1_Init+0x120>)
 8004004:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004008:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800400c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800400e:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004014:	4b39      	ldr	r3, [pc, #228]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004016:	2201      	movs	r2, #1
 8004018:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800401a:	4b38      	ldr	r3, [pc, #224]	; (80040fc <MX_ADC1_Init+0x11c>)
 800401c:	2200      	movs	r2, #0
 800401e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004020:	4b36      	ldr	r3, [pc, #216]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004028:	4b34      	ldr	r3, [pc, #208]	; (80040fc <MX_ADC1_Init+0x11c>)
 800402a:	2200      	movs	r2, #0
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004030:	4a34      	ldr	r2, [pc, #208]	; (8004104 <MX_ADC1_Init+0x124>)
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004036:	2200      	movs	r2, #0
 8004038:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <MX_ADC1_Init+0x11c>)
 800403c:	2202      	movs	r2, #2
 800403e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004040:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <MX_ADC1_Init+0x11c>)
 800404a:	2200      	movs	r2, #0
 800404c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800404e:	482b      	ldr	r0, [pc, #172]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004050:	f001 fbd0 	bl	80057f4 <HAL_ADC_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800405a:	f000 fd47 	bl	8004aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800405e:	230a      	movs	r3, #10
 8004060:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004066:	2300      	movs	r3, #0
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800406a:	f107 0320 	add.w	r3, r7, #32
 800406e:	4619      	mov	r1, r3
 8004070:	4822      	ldr	r0, [pc, #136]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004072:	f001 ffb7 	bl	8005fe4 <HAL_ADC_ConfigChannel>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800407c:	f000 fd36 	bl	8004aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004080:	230b      	movs	r3, #11
 8004082:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8004084:	2302      	movs	r3, #2
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004088:	f107 0320 	add.w	r3, r7, #32
 800408c:	4619      	mov	r1, r3
 800408e:	481b      	ldr	r0, [pc, #108]	; (80040fc <MX_ADC1_Init+0x11c>)
 8004090:	f001 ffa8 	bl	8005fe4 <HAL_ADC_ConfigChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800409a:	f000 fd27 	bl	8004aec <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800409e:	230a      	movs	r3, #10
 80040a0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80040a6:	2302      	movs	r3, #2
 80040a8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80040aa:	2301      	movs	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80040ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040b2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80040c4:	463b      	mov	r3, r7
 80040c6:	4619      	mov	r1, r3
 80040c8:	480c      	ldr	r0, [pc, #48]	; (80040fc <MX_ADC1_Init+0x11c>)
 80040ca:	f002 fafd 	bl	80066c8 <HAL_ADCEx_InjectedConfigChannel>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80040d4:	f000 fd0a 	bl	8004aec <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80040d8:	230b      	movs	r3, #11
 80040da:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80040dc:	2302      	movs	r3, #2
 80040de:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80040e0:	463b      	mov	r3, r7
 80040e2:	4619      	mov	r1, r3
 80040e4:	4805      	ldr	r0, [pc, #20]	; (80040fc <MX_ADC1_Init+0x11c>)
 80040e6:	f002 faef 	bl	80066c8 <HAL_ADCEx_InjectedConfigChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80040f0:	f000 fcfc 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80040f4:	bf00      	nop
 80040f6:	3730      	adds	r7, #48	; 0x30
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	200012ac 	.word	0x200012ac
 8004100:	40012000 	.word	0x40012000
 8004104:	0f000001 	.word	0x0f000001

08004108 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800410e:	463b      	mov	r3, r7
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800411a:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <MX_ADC2_Init+0xd0>)
 800411c:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <MX_ADC2_Init+0xd4>)
 800411e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004120:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <MX_ADC2_Init+0xd0>)
 8004122:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004126:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004128:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <MX_ADC2_Init+0xd0>)
 800412a:	2200      	movs	r2, #0
 800412c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800412e:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <MX_ADC2_Init+0xd0>)
 8004130:	2201      	movs	r2, #1
 8004132:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <MX_ADC2_Init+0xd0>)
 8004136:	2201      	movs	r2, #1
 8004138:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <MX_ADC2_Init+0xd0>)
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004142:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <MX_ADC2_Init+0xd0>)
 8004144:	2200      	movs	r2, #0
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <MX_ADC2_Init+0xd0>)
 800414a:	4a25      	ldr	r2, [pc, #148]	; (80041e0 <MX_ADC2_Init+0xd8>)
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <MX_ADC2_Init+0xd0>)
 8004150:	2200      	movs	r2, #0
 8004152:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8004154:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <MX_ADC2_Init+0xd0>)
 8004156:	2203      	movs	r2, #3
 8004158:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <MX_ADC2_Init+0xd0>)
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <MX_ADC2_Init+0xd0>)
 8004164:	2200      	movs	r2, #0
 8004166:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004168:	481b      	ldr	r0, [pc, #108]	; (80041d8 <MX_ADC2_Init+0xd0>)
 800416a:	f001 fb43 	bl	80057f4 <HAL_ADC_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004174:	f000 fcba 	bl	8004aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004178:	2306      	movs	r3, #6
 800417a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800417c:	2301      	movs	r3, #1
 800417e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004180:	2307      	movs	r3, #7
 8004182:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004184:	463b      	mov	r3, r7
 8004186:	4619      	mov	r1, r3
 8004188:	4813      	ldr	r0, [pc, #76]	; (80041d8 <MX_ADC2_Init+0xd0>)
 800418a:	f001 ff2b 	bl	8005fe4 <HAL_ADC_ConfigChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004194:	f000 fcaa 	bl	8004aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004198:	2304      	movs	r3, #4
 800419a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800419c:	2302      	movs	r3, #2
 800419e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041a0:	463b      	mov	r3, r7
 80041a2:	4619      	mov	r1, r3
 80041a4:	480c      	ldr	r0, [pc, #48]	; (80041d8 <MX_ADC2_Init+0xd0>)
 80041a6:	f001 ff1d 	bl	8005fe4 <HAL_ADC_ConfigChannel>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80041b0:	f000 fc9c 	bl	8004aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80041b4:	230f      	movs	r3, #15
 80041b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80041b8:	2303      	movs	r3, #3
 80041ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041bc:	463b      	mov	r3, r7
 80041be:	4619      	mov	r1, r3
 80041c0:	4805      	ldr	r0, [pc, #20]	; (80041d8 <MX_ADC2_Init+0xd0>)
 80041c2:	f001 ff0f 	bl	8005fe4 <HAL_ADC_ConfigChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80041cc:	f000 fc8e 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	200012f4 	.word	0x200012f4
 80041dc:	40012100 	.word	0x40012100
 80041e0:	0f000001 	.word	0x0f000001

080041e4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	; 0x30
 80041e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041ea:	f107 0320 	add.w	r3, r7, #32
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	609a      	str	r2, [r3, #8]
 80041f6:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80041f8:	463b      	mov	r3, r7
 80041fa:	2220      	movs	r2, #32
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f008 f884 	bl	800c30c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8004204:	4b3f      	ldr	r3, [pc, #252]	; (8004304 <MX_ADC3_Init+0x120>)
 8004206:	4a40      	ldr	r2, [pc, #256]	; (8004308 <MX_ADC3_Init+0x124>)
 8004208:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <MX_ADC3_Init+0x120>)
 800420c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004210:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004212:	4b3c      	ldr	r3, [pc, #240]	; (8004304 <MX_ADC3_Init+0x120>)
 8004214:	2200      	movs	r2, #0
 8004216:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8004218:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <MX_ADC3_Init+0x120>)
 800421a:	2201      	movs	r2, #1
 800421c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800421e:	4b39      	ldr	r3, [pc, #228]	; (8004304 <MX_ADC3_Init+0x120>)
 8004220:	2200      	movs	r2, #0
 8004222:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <MX_ADC3_Init+0x120>)
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800422c:	4b35      	ldr	r3, [pc, #212]	; (8004304 <MX_ADC3_Init+0x120>)
 800422e:	2200      	movs	r2, #0
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004232:	4b34      	ldr	r3, [pc, #208]	; (8004304 <MX_ADC3_Init+0x120>)
 8004234:	4a35      	ldr	r2, [pc, #212]	; (800430c <MX_ADC3_Init+0x128>)
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <MX_ADC3_Init+0x120>)
 800423a:	2200      	movs	r2, #0
 800423c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <MX_ADC3_Init+0x120>)
 8004240:	2202      	movs	r2, #2
 8004242:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8004244:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <MX_ADC3_Init+0x120>)
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800424c:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <MX_ADC3_Init+0x120>)
 800424e:	2200      	movs	r2, #0
 8004250:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004252:	482c      	ldr	r0, [pc, #176]	; (8004304 <MX_ADC3_Init+0x120>)
 8004254:	f001 face 	bl	80057f4 <HAL_ADC_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800425e:	f000 fc45 	bl	8004aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004262:	230c      	movs	r3, #12
 8004264:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8004266:	2301      	movs	r3, #1
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800426a:	2303      	movs	r3, #3
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800426e:	f107 0320 	add.w	r3, r7, #32
 8004272:	4619      	mov	r1, r3
 8004274:	4823      	ldr	r0, [pc, #140]	; (8004304 <MX_ADC3_Init+0x120>)
 8004276:	f001 feb5 	bl	8005fe4 <HAL_ADC_ConfigChannel>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 8004280:	f000 fc34 	bl	8004aec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004284:	230d      	movs	r3, #13
 8004286:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8004288:	2302      	movs	r3, #2
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800428c:	f107 0320 	add.w	r3, r7, #32
 8004290:	4619      	mov	r1, r3
 8004292:	481c      	ldr	r0, [pc, #112]	; (8004304 <MX_ADC3_Init+0x120>)
 8004294:	f001 fea6 	bl	8005fe4 <HAL_ADC_ConfigChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 800429e:	f000 fc25 	bl	8004aec <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80042a2:	230c      	movs	r3, #12
 80042a4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80042aa:	2302      	movs	r3, #2
 80042ac:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80042ae:	2301      	movs	r3, #1
 80042b0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80042b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80042b6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T8_CC4;
 80042b8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80042bc:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80042ca:	463b      	mov	r3, r7
 80042cc:	4619      	mov	r1, r3
 80042ce:	480d      	ldr	r0, [pc, #52]	; (8004304 <MX_ADC3_Init+0x120>)
 80042d0:	f002 f9fa 	bl	80066c8 <HAL_ADCEx_InjectedConfigChannel>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 80042da:	f000 fc07 	bl	8004aec <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 80042de:	230d      	movs	r3, #13
 80042e0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80042e2:	2302      	movs	r3, #2
 80042e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80042e6:	463b      	mov	r3, r7
 80042e8:	4619      	mov	r1, r3
 80042ea:	4806      	ldr	r0, [pc, #24]	; (8004304 <MX_ADC3_Init+0x120>)
 80042ec:	f002 f9ec 	bl	80066c8 <HAL_ADCEx_InjectedConfigChannel>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 80042f6:	f000 fbf9 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	3730      	adds	r7, #48	; 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	2000133c 	.word	0x2000133c
 8004308:	40012200 	.word	0x40012200
 800430c:	0f000001 	.word	0x0f000001

08004310 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a76      	ldr	r2, [pc, #472]	; (8004508 <HAL_ADC_MspInit+0x1f8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d130      	bne.n	8004394 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	4b75      	ldr	r3, [pc, #468]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	4a74      	ldr	r2, [pc, #464]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 800433c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004340:	6453      	str	r3, [r2, #68]	; 0x44
 8004342:	4b72      	ldr	r3, [pc, #456]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	4b6e      	ldr	r3, [pc, #440]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4a6d      	ldr	r2, [pc, #436]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 8004358:	f043 0304 	orr.w	r3, r3, #4
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4b6b      	ldr	r3, [pc, #428]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = I_A_1_Pin|I_B_1_Pin;
 800436a:	2303      	movs	r3, #3
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800436e:	2303      	movs	r3, #3
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800437a:	4619      	mov	r1, r3
 800437c:	4864      	ldr	r0, [pc, #400]	; (8004510 <HAL_ADC_MspInit+0x200>)
 800437e:	f003 fc21 	bl	8007bc4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004382:	2200      	movs	r2, #0
 8004384:	2100      	movs	r1, #0
 8004386:	2012      	movs	r0, #18
 8004388:	f002 fd0b 	bl	8006da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800438c:	2012      	movs	r0, #18
 800438e:	f002 fd24 	bl	8006dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8004392:	e0b5      	b.n	8004500 <HAL_ADC_MspInit+0x1f0>
  else if(adcHandle->Instance==ADC2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5e      	ldr	r2, [pc, #376]	; (8004514 <HAL_ADC_MspInit+0x204>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d17b      	bne.n	8004496 <HAL_ADC_MspInit+0x186>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	4b5a      	ldr	r3, [pc, #360]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	4a59      	ldr	r2, [pc, #356]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ac:	6453      	str	r3, [r2, #68]	; 0x44
 80043ae:	4b57      	ldr	r3, [pc, #348]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a52      	ldr	r2, [pc, #328]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b50      	ldr	r3, [pc, #320]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4a4b      	ldr	r2, [pc, #300]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30
 80043e6:	4b49      	ldr	r3, [pc, #292]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TEMP1_Pin|VBUS_Pin;
 80043f2:	2350      	movs	r3, #80	; 0x50
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043f6:	2303      	movs	r3, #3
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004402:	4619      	mov	r1, r3
 8004404:	4844      	ldr	r0, [pc, #272]	; (8004518 <HAL_ADC_MspInit+0x208>)
 8004406:	f003 fbdd 	bl	8007bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP2_Pin;
 800440a:	2320      	movs	r3, #32
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800440e:	2303      	movs	r3, #3
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TEMP2_GPIO_Port, &GPIO_InitStruct);
 8004416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800441a:	4619      	mov	r1, r3
 800441c:	483c      	ldr	r0, [pc, #240]	; (8004510 <HAL_ADC_MspInit+0x200>)
 800441e:	f003 fbd1 	bl	8007bc4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_ADC_MspInit+0x20c>)
 8004424:	4a3e      	ldr	r2, [pc, #248]	; (8004520 <HAL_ADC_MspInit+0x210>)
 8004426:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004428:	4b3c      	ldr	r3, [pc, #240]	; (800451c <HAL_ADC_MspInit+0x20c>)
 800442a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800442e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004430:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_ADC_MspInit+0x20c>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <HAL_ADC_MspInit+0x20c>)
 8004438:	2200      	movs	r2, #0
 800443a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800443c:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_ADC_MspInit+0x20c>)
 800443e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004442:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004444:	4b35      	ldr	r3, [pc, #212]	; (800451c <HAL_ADC_MspInit+0x20c>)
 8004446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800444c:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_ADC_MspInit+0x20c>)
 800444e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004452:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004454:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_ADC_MspInit+0x20c>)
 8004456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800445a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800445c:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_ADC_MspInit+0x20c>)
 800445e:	2200      	movs	r2, #0
 8004460:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_ADC_MspInit+0x20c>)
 8004464:	2200      	movs	r2, #0
 8004466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004468:	482c      	ldr	r0, [pc, #176]	; (800451c <HAL_ADC_MspInit+0x20c>)
 800446a:	f002 fcd1 	bl	8006e10 <HAL_DMA_Init>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_ADC_MspInit+0x168>
      Error_Handler();
 8004474:	f000 fb3a 	bl	8004aec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a28      	ldr	r2, [pc, #160]	; (800451c <HAL_ADC_MspInit+0x20c>)
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
 800447e:	4a27      	ldr	r2, [pc, #156]	; (800451c <HAL_ADC_MspInit+0x20c>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004484:	2200      	movs	r2, #0
 8004486:	2100      	movs	r1, #0
 8004488:	2012      	movs	r0, #18
 800448a:	f002 fc8a 	bl	8006da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800448e:	2012      	movs	r0, #18
 8004490:	f002 fca3 	bl	8006dda <HAL_NVIC_EnableIRQ>
}
 8004494:	e034      	b.n	8004500 <HAL_ADC_MspInit+0x1f0>
  else if(adcHandle->Instance==ADC3)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a22      	ldr	r2, [pc, #136]	; (8004524 <HAL_ADC_MspInit+0x214>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d12f      	bne.n	8004500 <HAL_ADC_MspInit+0x1f0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80044aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ae:	6453      	str	r3, [r2, #68]	; 0x44
 80044b0:	4b16      	ldr	r3, [pc, #88]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	4a11      	ldr	r2, [pc, #68]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	6313      	str	r3, [r2, #48]	; 0x30
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <HAL_ADC_MspInit+0x1fc>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = I_A_2_Pin|I_B_2_Pin;
 80044d8:	230c      	movs	r3, #12
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044dc:	2303      	movs	r3, #3
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044e8:	4619      	mov	r1, r3
 80044ea:	4809      	ldr	r0, [pc, #36]	; (8004510 <HAL_ADC_MspInit+0x200>)
 80044ec:	f003 fb6a 	bl	8007bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80044f0:	2200      	movs	r2, #0
 80044f2:	2100      	movs	r1, #0
 80044f4:	2012      	movs	r0, #18
 80044f6:	f002 fc54 	bl	8006da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80044fa:	2012      	movs	r0, #18
 80044fc:	f002 fc6d 	bl	8006dda <HAL_NVIC_EnableIRQ>
}
 8004500:	bf00      	nop
 8004502:	3738      	adds	r7, #56	; 0x38
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40012000 	.word	0x40012000
 800450c:	40023800 	.word	0x40023800
 8004510:	40020800 	.word	0x40020800
 8004514:	40012100 	.word	0x40012100
 8004518:	40020000 	.word	0x40020000
 800451c:	20001384 	.word	0x20001384
 8004520:	40026440 	.word	0x40026440
 8004524:	40012200 	.word	0x40012200

08004528 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <MX_CAN1_Init+0x60>)
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <MX_CAN1_Init+0x64>)
 8004530:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <MX_CAN1_Init+0x60>)
 8004534:	2210      	movs	r2, #16
 8004536:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <MX_CAN1_Init+0x60>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <MX_CAN1_Init+0x60>)
 8004540:	2200      	movs	r2, #0
 8004542:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <MX_CAN1_Init+0x60>)
 8004546:	2200      	movs	r2, #0
 8004548:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <MX_CAN1_Init+0x60>)
 800454c:	2200      	movs	r2, #0
 800454e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <MX_CAN1_Init+0x60>)
 8004552:	2200      	movs	r2, #0
 8004554:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <MX_CAN1_Init+0x60>)
 8004558:	2200      	movs	r2, #0
 800455a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <MX_CAN1_Init+0x60>)
 800455e:	2200      	movs	r2, #0
 8004560:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <MX_CAN1_Init+0x60>)
 8004564:	2200      	movs	r2, #0
 8004566:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <MX_CAN1_Init+0x60>)
 800456a:	2200      	movs	r2, #0
 800456c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <MX_CAN1_Init+0x60>)
 8004570:	2200      	movs	r2, #0
 8004572:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004574:	4804      	ldr	r0, [pc, #16]	; (8004588 <MX_CAN1_Init+0x60>)
 8004576:	f002 fa3d 	bl	80069f4 <HAL_CAN_Init>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8004580:	f000 fab4 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004584:	bf00      	nop
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200013e4 	.word	0x200013e4
 800458c:	40006400 	.word	0x40006400

08004590 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <HAL_CAN_MspInit+0x84>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d12c      	bne.n	800460c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_CAN_MspInit+0x88>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <HAL_CAN_MspInit+0x88>)
 80045bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <HAL_CAN_MspInit+0x88>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_CAN_MspInit+0x88>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <HAL_CAN_MspInit+0x88>)
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_CAN_MspInit+0x88>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f8:	2303      	movs	r3, #3
 80045fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80045fc:	2309      	movs	r3, #9
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	4619      	mov	r1, r3
 8004606:	4805      	ldr	r0, [pc, #20]	; (800461c <HAL_CAN_MspInit+0x8c>)
 8004608:	f003 fadc 	bl	8007bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800460c:	bf00      	nop
 800460e:	3728      	adds	r7, #40	; 0x28
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40006400 	.word	0x40006400
 8004618:	40023800 	.word	0x40023800
 800461c:	40020400 	.word	0x40020400

08004620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <MX_DMA_Init+0x68>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	4a16      	ldr	r2, [pc, #88]	; (8004688 <MX_DMA_Init+0x68>)
 8004630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004634:	6313      	str	r3, [r2, #48]	; 0x30
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <MX_DMA_Init+0x68>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4b10      	ldr	r3, [pc, #64]	; (8004688 <MX_DMA_Init+0x68>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <MX_DMA_Init+0x68>)
 800464c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <MX_DMA_Init+0x68>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800465e:	2200      	movs	r2, #0
 8004660:	2100      	movs	r1, #0
 8004662:	200d      	movs	r0, #13
 8004664:	f002 fb9d 	bl	8006da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004668:	200d      	movs	r0, #13
 800466a:	f002 fbb6 	bl	8006dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	203a      	movs	r0, #58	; 0x3a
 8004674:	f002 fb95 	bl	8006da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004678:	203a      	movs	r0, #58	; 0x3a
 800467a:	f002 fbae 	bl	8006dda <HAL_NVIC_EnableIRQ>

}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	609a      	str	r2, [r3, #8]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	4b72      	ldr	r3, [pc, #456]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a71      	ldr	r2, [pc, #452]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b6f      	ldr	r3, [pc, #444]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b6b      	ldr	r3, [pc, #428]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	4a6a      	ldr	r2, [pc, #424]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046cc:	6313      	str	r3, [r2, #48]	; 0x30
 80046ce:	4b68      	ldr	r3, [pc, #416]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	4b64      	ldr	r3, [pc, #400]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a63      	ldr	r2, [pc, #396]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b61      	ldr	r3, [pc, #388]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	4b5d      	ldr	r3, [pc, #372]	; (8004870 <MX_GPIO_Init+0x1e4>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a5c      	ldr	r2, [pc, #368]	; (8004870 <MX_GPIO_Init+0x1e4>)
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <MX_GPIO_Init+0x1e4>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	4b56      	ldr	r3, [pc, #344]	; (8004870 <MX_GPIO_Init+0x1e4>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a55      	ldr	r2, [pc, #340]	; (8004870 <MX_GPIO_Init+0x1e4>)
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b53      	ldr	r3, [pc, #332]	; (8004870 <MX_GPIO_Init+0x1e4>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NSCS_1_Pin|NSCS_2_Pin, GPIO_PIN_SET);
 800472e:	2201      	movs	r2, #1
 8004730:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004734:	484f      	ldr	r0, [pc, #316]	; (8004874 <MX_GPIO_Init+0x1e8>)
 8004736:	f003 fbf9 	bl	8007f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO0_Pin|SERVO1_Pin|OLED_CS_Pin|OLED_RES_Pin, GPIO_PIN_RESET);
 800473a:	2200      	movs	r2, #0
 800473c:	f641 010c 	movw	r1, #6156	; 0x180c
 8004740:	484d      	ldr	r0, [pc, #308]	; (8004878 <MX_GPIO_Init+0x1ec>)
 8004742:	f003 fbf3 	bl	8007f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|OLED_SCL_Pin|OLED_SDA_Pin|EN_GATE_Pin
 8004746:	2200      	movs	r2, #0
 8004748:	f641 41f4 	movw	r1, #7412	; 0x1cf4
 800474c:	484b      	ldr	r0, [pc, #300]	; (800487c <MX_GPIO_Init+0x1f0>)
 800474e:	f003 fbed 	bl	8007f2c <HAL_GPIO_WritePin>
                          |CS_ENC_A_1_Pin|SCK_ENC_B_1_Pin|CS_ENC_A_2_Pin|SCK_ENC_B_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8004752:	2201      	movs	r2, #1
 8004754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004758:	4847      	ldr	r0, [pc, #284]	; (8004878 <MX_GPIO_Init+0x1ec>)
 800475a:	f003 fbe7 	bl	8007f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_SCK_Pin|SPI_MOSI_Pin, GPIO_PIN_RESET);
 800475e:	2200      	movs	r2, #0
 8004760:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8004764:	4843      	ldr	r0, [pc, #268]	; (8004874 <MX_GPIO_Init+0x1e8>)
 8004766:	f003 fbe1 	bl	8007f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NSCS_1_Pin|NSCS_2_Pin|SPI_SCK_Pin|SPI_MOSI_Pin;
 800476a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800476e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004770:	2301      	movs	r3, #1
 8004772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800477c:	f107 0314 	add.w	r3, r7, #20
 8004780:	4619      	mov	r1, r3
 8004782:	483c      	ldr	r0, [pc, #240]	; (8004874 <MX_GPIO_Init+0x1e8>)
 8004784:	f003 fa1e 	bl	8007bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MOSI_ENC_Z_2_Pin|SW1_Pin|MOSI_ENC_Z_1_Pin|SPI_MISO_Pin;
 8004788:	f648 2310 	movw	r3, #35344	; 0x8a10
 800478c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	4619      	mov	r1, r3
 800479c:	4835      	ldr	r0, [pc, #212]	; (8004874 <MX_GPIO_Init+0x1e8>)
 800479e:	f003 fa11 	bl	8007bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SERVO0_Pin|SERVO1_Pin|OLED_CS_Pin|OLED_RES_Pin
 80047a2:	f649 030c 	movw	r3, #38924	; 0x980c
 80047a6:	617b      	str	r3, [r7, #20]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a8:	2301      	movs	r3, #1
 80047aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b0:	2300      	movs	r3, #0
 80047b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047b4:	f107 0314 	add.w	r3, r7, #20
 80047b8:	4619      	mov	r1, r3
 80047ba:	482f      	ldr	r0, [pc, #188]	; (8004878 <MX_GPIO_Init+0x1ec>)
 80047bc:	f003 fa02 	bl	8007bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW2_Pin;
 80047c0:	2320      	movs	r3, #32
 80047c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	4619      	mov	r1, r3
 80047d2:	4829      	ldr	r0, [pc, #164]	; (8004878 <MX_GPIO_Init+0x1ec>)
 80047d4:	f003 f9f6 	bl	8007bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_SCL_Pin|OLED_SDA_Pin;
 80047d8:	f640 4304 	movw	r3, #3076	; 0xc04
 80047dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047de:	2301      	movs	r3, #1
 80047e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047e2:	2302      	movs	r3, #2
 80047e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	2300      	movs	r3, #0
 80047e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ea:	f107 0314 	add.w	r3, r7, #20
 80047ee:	4619      	mov	r1, r3
 80047f0:	4822      	ldr	r0, [pc, #136]	; (800487c <MX_GPIO_Init+0x1f0>)
 80047f2:	f003 f9e7 	bl	8007bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = EN_GATE_Pin|CS_ENC_A_1_Pin|SCK_ENC_B_1_Pin|CS_ENC_A_2_Pin
 80047f6:	f241 03f0 	movw	r3, #4336	; 0x10f0
 80047fa:	617b      	str	r3, [r7, #20]
                          |SCK_ENC_B_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047fc:	2301      	movs	r3, #1
 80047fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	4619      	mov	r1, r3
 800480e:	481b      	ldr	r0, [pc, #108]	; (800487c <MX_GPIO_Init+0x1f0>)
 8004810:	f003 f9d8 	bl	8007bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFAULT_1_Pin;
 8004814:	2304      	movs	r3, #4
 8004816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004818:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800481c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800481e:	2301      	movs	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NFAULT_1_GPIO_Port, &GPIO_InitStruct);
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	4619      	mov	r1, r3
 8004828:	4815      	ldr	r0, [pc, #84]	; (8004880 <MX_GPIO_Init+0x1f4>)
 800482a:	f003 f9cb 	bl	8007bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NFAULT_2_Pin;
 800482e:	2308      	movs	r3, #8
 8004830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004832:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004838:	2301      	movs	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NFAULT_2_GPIO_Port, &GPIO_InitStruct);
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4619      	mov	r1, r3
 8004842:	480e      	ldr	r0, [pc, #56]	; (800487c <MX_GPIO_Init+0x1f0>)
 8004844:	f003 f9be 	bl	8007bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 13, 0);
 8004848:	2200      	movs	r2, #0
 800484a:	210d      	movs	r1, #13
 800484c:	2008      	movs	r0, #8
 800484e:	f002 faa8 	bl	8006da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004852:	2008      	movs	r0, #8
 8004854:	f002 fac1 	bl	8006dda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 13, 0);
 8004858:	2200      	movs	r2, #0
 800485a:	210d      	movs	r1, #13
 800485c:	2009      	movs	r0, #9
 800485e:	f002 faa0 	bl	8006da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004862:	2009      	movs	r0, #9
 8004864:	f002 fab9 	bl	8006dda <HAL_NVIC_EnableIRQ>

}
 8004868:	bf00      	nop
 800486a:	3728      	adds	r7, #40	; 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40023800 	.word	0x40023800
 8004874:	40020800 	.word	0x40020800
 8004878:	40020000 	.word	0x40020000
 800487c:	40020400 	.word	0x40020400
 8004880:	40020c00 	.word	0x40020c00

08004884 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PTD */

int vel_flag=0;
int pos_flag=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

	//定时�???1000hz 速度�???
	if (htim->Instance == TIM4)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0d      	ldr	r2, [pc, #52]	; (80048c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d111      	bne.n	80048ba <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		static int i=0;
		i++;
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 800489e:	6013      	str	r3, [r2, #0]
		vel_flag=1;
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
		if(i>=10)
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b09      	cmp	r3, #9
 80048ac:	dd05      	ble.n	80048ba <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			i=0;
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
			pos_flag=1;
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
		}
	}
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40000800 	.word	0x40000800
 80048cc:	20001414 	.word	0x20001414
 80048d0:	2000140c 	.word	0x2000140c
 80048d4:	20001410 	.word	0x20001410

080048d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b094      	sub	sp, #80	; 0x50
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048de:	f000 ff07 	bl	80056f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048e2:	f000 f899 	bl	8004a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048e6:	f7ff fed1 	bl	800468c <MX_GPIO_Init>
  MX_DMA_Init();
 80048ea:	f7ff fe99 	bl	8004620 <MX_DMA_Init>
  MX_UART4_Init();
 80048ee:	f000 fe29 	bl	8005544 <MX_UART4_Init>
  MX_ADC1_Init();
 80048f2:	f7ff fb75 	bl	8003fe0 <MX_ADC1_Init>
  MX_TIM8_Init();
 80048f6:	f000 fc21 	bl	800513c <MX_TIM8_Init>
  MX_TIM1_Init();
 80048fa:	f000 fa71 	bl	8004de0 <MX_TIM1_Init>
  MX_ADC2_Init();
 80048fe:	f7ff fc03 	bl	8004108 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004902:	f7ff fc6f 	bl	80041e4 <MX_ADC3_Init>
  MX_TIM2_Init();
 8004906:	f000 fb31 	bl	8004f6c <MX_TIM2_Init>
  MX_CAN1_Init();
 800490a:	f7ff fe0d 	bl	8004528 <MX_CAN1_Init>
  MX_TIM5_Init();
 800490e:	f000 fbc7 	bl	80050a0 <MX_TIM5_Init>
  MX_TIM4_Init();
 8004912:	f000 fb77 	bl	8005004 <MX_TIM4_Init>
//  //用于生成NTC温度对应�????????????????
//  generateLookupTable();
//  HAL_Delay(10000);


  OLED_Init();
 8004916:	f7ff fa79 	bl	8003e0c <OLED_Init>
  Connect_Init();
 800491a:	f7fe fd3d 	bl	8003398 <Connect_Init>
  //初始化DRV8301芯片
  DRV8301_Init(&DRV8301_1);
 800491e:	482e      	ldr	r0, [pc, #184]	; (80049d8 <main+0x100>)
 8004920:	f7fc fb88 	bl	8001034 <DRV8301_Init>
  DRV8301_Init(&DRV8301_2);
 8004924:	482d      	ldr	r0, [pc, #180]	; (80049dc <main+0x104>)
 8004926:	f7fc fb85 	bl	8001034 <DRV8301_Init>
  MT6701_Init(&encoder1);
 800492a:	482d      	ldr	r0, [pc, #180]	; (80049e0 <main+0x108>)
 800492c:	f7fe fb6a 	bl	8003004 <MT6701_Init>
  MT6701_Init(&encoder2);
 8004930:	482c      	ldr	r0, [pc, #176]	; (80049e4 <main+0x10c>)
 8004932:	f7fe fb67 	bl	8003004 <MT6701_Init>


  FOC_Regular_ADC();
 8004936:	f7fd fb21 	bl	8001f7c <FOC_Regular_ADC>

//  FOC_Init(&motor1);
  FOC_Init(&motor2);
 800493a:	482b      	ldr	r0, [pc, #172]	; (80049e8 <main+0x110>)
 800493c:	f7fd f92a 	bl	8001b94 <FOC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim4);
 8004940:	482a      	ldr	r0, [pc, #168]	; (80049ec <main+0x114>)
 8004942:	f004 f80d 	bl	8008960 <HAL_TIM_Base_Start_IT>
  //�?????????启motor1的foc算法
//  FOC_Start(&motor1);
  FOC_Start(&motor2);
 8004946:	4828      	ldr	r0, [pc, #160]	; (80049e8 <main+0x110>)
 8004948:	f7fd fd9c 	bl	8002484 <FOC_Start>


  OLED_Printf(0, 0, 8, "CDH");
 800494c:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <main+0x118>)
 800494e:	2208      	movs	r2, #8
 8004950:	2100      	movs	r1, #0
 8004952:	2000      	movs	r0, #0
 8004954:	f7fe ffb8 	bl	80038c8 <OLED_Printf>
  OLED_Reflash();
 8004958:	f7ff f996 	bl	8003c88 <OLED_Reflash>

    /* USER CODE BEGIN 3 */


	  //电池电压，双路温度固定频率采�???????????-100hz
	  FOC_Regular_ADC();  //函数耗时
 800495c:	f7fd fb0e 	bl	8001f7c <FOC_Regular_ADC>
	  //处理串口数据
	  processSerialData();//函数耗时
 8004960:	f7fe fd6e 	bl	8003440 <processSerialData>
//	  	  motor2.Id_pid->ki = KI;
//	  	  motor2.Id_pid->kd = KD;
//	  motor2.P_pid->kp = KP;
//	  motor2.P_pid->ki = KI;
//	  motor2.P_pid->kd = KD;
	  motor2.V_pid->kp = KP;
 8004964:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <main+0x110>)
 8004966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004968:	4a22      	ldr	r2, [pc, #136]	; (80049f4 <main+0x11c>)
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	601a      	str	r2, [r3, #0]
	  motor2.V_pid->ki = KI;
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <main+0x110>)
 8004970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004972:	4a21      	ldr	r2, [pc, #132]	; (80049f8 <main+0x120>)
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	605a      	str	r2, [r3, #4]
	  motor2.V_pid->kd = KD;
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <main+0x110>)
 800497a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497c:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <main+0x124>)
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	609a      	str	r2, [r3, #8]

//	  DATA[0] = motor2.I_q;
//	  DATA[1] = motor2.I_d;
//	  DATA[2] = uq;
//	  DATA[3] = ud;
	  DATA[0] = motor2.I_q;
 8004982:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <main+0x110>)
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	603b      	str	r3, [r7, #0]
	  DATA[1] = motor2.speed;
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <main+0x110>)
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	607b      	str	r3, [r7, #4]
	  DATA[2] = motor2.encoder->rad_all;
 800498e:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <main+0x110>)
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	60bb      	str	r3, [r7, #8]
	  DATA[3] = pos;
 8004996:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <main+0x128>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]
	  DATA[4] = vel;
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <main+0x12c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	613b      	str	r3, [r7, #16]
	  DATA[5] = timer_foc.time;
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <main+0x130>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	617b      	str	r3, [r7, #20]
	  DATA[6] = FPS;
 80049a8:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <main+0x134>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b4:	edc7 7a06 	vstr	s15, [r7, #24]
	  fps++;
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <main+0x138>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <main+0x138>)
 80049c0:	6013      	str	r3, [r2, #0]
	  if(DISPLAY_DATA==1)
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <main+0x13c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d1c8      	bne.n	800495c <main+0x84>
	  {
		  vofa_JustFloat_output(DATA,7); //send a float data need 65us，波特率�??????????2000000
 80049ca:	463b      	mov	r3, r7
 80049cc:	2107      	movs	r1, #7
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fe72 	bl	80036b8 <vofa_JustFloat_output>
	  FOC_Regular_ADC();  //函数耗时
 80049d4:	e7c2      	b.n	800495c <main+0x84>
 80049d6:	bf00      	nop
 80049d8:	20000030 	.word	0x20000030
 80049dc:	2000007c 	.word	0x2000007c
 80049e0:	2000026c 	.word	0x2000026c
 80049e4:	200002a0 	.word	0x200002a0
 80049e8:	200001f8 	.word	0x200001f8
 80049ec:	200014ac 	.word	0x200014ac
 80049f0:	08010a48 	.word	0x08010a48
 80049f4:	20000978 	.word	0x20000978
 80049f8:	2000097c 	.word	0x2000097c
 80049fc:	20000980 	.word	0x20000980
 8004a00:	20000d90 	.word	0x20000d90
 8004a04:	20000d8c 	.word	0x20000d8c
 8004a08:	20000098 	.word	0x20000098
 8004a0c:	20000550 	.word	0x20000550
 8004a10:	20000554 	.word	0x20000554
 8004a14:	200002d4 	.word	0x200002d4

08004a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b094      	sub	sp, #80	; 0x50
 8004a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a1e:	f107 0320 	add.w	r3, r7, #32
 8004a22:	2230      	movs	r2, #48	; 0x30
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f007 fc70 	bl	800c30c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <SystemClock_Config+0xcc>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <SystemClock_Config+0xcc>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4c:	4b25      	ldr	r3, [pc, #148]	; (8004ae4 <SystemClock_Config+0xcc>)
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	607b      	str	r3, [r7, #4]
 8004a5c:	4b22      	ldr	r3, [pc, #136]	; (8004ae8 <SystemClock_Config+0xd0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <SystemClock_Config+0xd0>)
 8004a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <SystemClock_Config+0xd0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004a88:	2304      	movs	r3, #4
 8004a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004a8c:	23a8      	movs	r3, #168	; 0xa8
 8004a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a90:	2302      	movs	r3, #2
 8004a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a94:	2304      	movs	r3, #4
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a98:	f107 0320 	add.w	r3, r7, #32
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f003 fa77 	bl	8007f90 <HAL_RCC_OscConfig>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004aa8:	f000 f820 	bl	8004aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004aac:	230f      	movs	r3, #15
 8004aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ac4:	f107 030c 	add.w	r3, r7, #12
 8004ac8:	2105      	movs	r1, #5
 8004aca:	4618      	mov	r0, r3
 8004acc:	f003 fcd8 	bl	8008480 <HAL_RCC_ClockConfig>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004ad6:	f000 f809 	bl	8004aec <Error_Handler>
  }
}
 8004ada:	bf00      	nop
 8004adc:	3750      	adds	r7, #80	; 0x50
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40007000 	.word	0x40007000

08004aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004af0:	b672      	cpsid	i
}
 8004af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004af4:	e7fe      	b.n	8004af4 <Error_Handler+0x8>
	...

08004af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	4a0f      	ldr	r2, [pc, #60]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	607b      	str	r3, [r7, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_MspInit+0x4c>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800

08004b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b4c:	e7fe      	b.n	8004b4c <NMI_Handler+0x4>

08004b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b52:	e7fe      	b.n	8004b52 <HardFault_Handler+0x4>

08004b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b58:	e7fe      	b.n	8004b58 <MemManage_Handler+0x4>

08004b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b5e:	e7fe      	b.n	8004b5e <BusFault_Handler+0x4>

08004b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b64:	e7fe      	b.n	8004b64 <UsageFault_Handler+0x4>

08004b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b94:	f7fc fef8 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b98:	bf00      	nop
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFAULT_1_Pin);
 8004ba0:	2004      	movs	r0, #4
 8004ba2:	f003 f9dd 	bl	8007f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFAULT_2_Pin);
 8004bae:	2008      	movs	r0, #8
 8004bb0:	f003 f9d6 	bl	8007f60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004bb4:	bf00      	nop
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004bbc:	4802      	ldr	r0, [pc, #8]	; (8004bc8 <DMA1_Stream2_IRQHandler+0x10>)
 8004bbe:	f002 fabf 	bl	8007140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	200015c8 	.word	0x200015c8

08004bcc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004bd0:	4805      	ldr	r0, [pc, #20]	; (8004be8 <ADC_IRQHandler+0x1c>)
 8004bd2:	f000 ffb0 	bl	8005b36 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004bd6:	4805      	ldr	r0, [pc, #20]	; (8004bec <ADC_IRQHandler+0x20>)
 8004bd8:	f000 ffad 	bl	8005b36 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8004bdc:	4804      	ldr	r0, [pc, #16]	; (8004bf0 <ADC_IRQHandler+0x24>)
 8004bde:	f000 ffaa 	bl	8005b36 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	200012ac 	.word	0x200012ac
 8004bec:	200012f4 	.word	0x200012f4
 8004bf0:	2000133c 	.word	0x2000133c

08004bf4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004bf8:	4802      	ldr	r0, [pc, #8]	; (8004c04 <TIM4_IRQHandler+0x10>)
 8004bfa:	f004 f843 	bl	8008c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200014ac 	.word	0x200014ac

08004c08 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004c0c:	4802      	ldr	r0, [pc, #8]	; (8004c18 <UART4_IRQHandler+0x10>)
 8004c0e:	f005 f909 	bl	8009e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20001584 	.word	0x20001584

08004c1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <DMA2_Stream2_IRQHandler+0x10>)
 8004c22:	f002 fa8d 	bl	8007140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20001384 	.word	0x20001384

08004c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return 1;
 8004c34:	2301      	movs	r3, #1
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <_kill>:

int _kill(int pid, int sig)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c4a:	f007 fbb1 	bl	800c3b0 <__errno>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2216      	movs	r2, #22
 8004c52:	601a      	str	r2, [r3, #0]
  return -1;
 8004c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <_exit>:

void _exit (int status)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c68:	f04f 31ff 	mov.w	r1, #4294967295
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ffe7 	bl	8004c40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c72:	e7fe      	b.n	8004c72 <_exit+0x12>

08004c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e00a      	b.n	8004c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c86:	f3af 8000 	nop.w
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	60ba      	str	r2, [r7, #8]
 8004c92:	b2ca      	uxtb	r2, r1
 8004c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	dbf0      	blt.n	8004c86 <_read+0x12>
  }

  return len;
 8004ca4:	687b      	ldr	r3, [r7, #4]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e009      	b.n	8004cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	60ba      	str	r2, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe fd13 	bl	80036f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dbf1      	blt.n	8004cc0 <_write+0x12>
  }
  return len;
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_close>:

int _close(int file)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d0e:	605a      	str	r2, [r3, #4]
  return 0;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <_isatty>:

int _isatty(int file)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d26:	2301      	movs	r3, #1
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <_sbrk+0x5c>)
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <_sbrk+0x60>)
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <_sbrk+0x64>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <_sbrk+0x64>)
 8004d6e:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <_sbrk+0x68>)
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <_sbrk+0x64>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d207      	bcs.n	8004d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d80:	f007 fb16 	bl	800c3b0 <__errno>
 8004d84:	4603      	mov	r3, r0
 8004d86:	220c      	movs	r2, #12
 8004d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	e009      	b.n	8004da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <_sbrk+0x64>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <_sbrk+0x64>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <_sbrk+0x64>)
 8004da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20020000 	.word	0x20020000
 8004db0:	00000400 	.word	0x00000400
 8004db4:	20001418 	.word	0x20001418
 8004db8:	20001798 	.word	0x20001798

08004dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <SystemInit+0x20>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <SystemInit+0x20>)
 8004dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b096      	sub	sp, #88	; 0x58
 8004de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004de6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	605a      	str	r2, [r3, #4]
 8004df0:	609a      	str	r2, [r3, #8]
 8004df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004df4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	609a      	str	r2, [r3, #8]
 8004e0a:	60da      	str	r2, [r3, #12]
 8004e0c:	611a      	str	r2, [r3, #16]
 8004e0e:	615a      	str	r2, [r3, #20]
 8004e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	2220      	movs	r2, #32
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f007 fa77 	bl	800c30c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004e1e:	4b51      	ldr	r3, [pc, #324]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e20:	4a51      	ldr	r2, [pc, #324]	; (8004f68 <MX_TIM1_Init+0x188>)
 8004e22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8004e24:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8004e2a:	4b4e      	ldr	r3, [pc, #312]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e2c:	2240      	movs	r2, #64	; 0x40
 8004e2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 8004e30:	4b4c      	ldr	r3, [pc, #304]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e32:	f241 0267 	movw	r2, #4199	; 0x1067
 8004e36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e38:	4b4a      	ldr	r3, [pc, #296]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e3e:	4b49      	ldr	r3, [pc, #292]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e44:	4b47      	ldr	r3, [pc, #284]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e4a:	4846      	ldr	r0, [pc, #280]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e4c:	f003 fd38 	bl	80088c0 <HAL_TIM_Base_Init>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004e56:	f7ff fe49 	bl	8004aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e64:	4619      	mov	r1, r3
 8004e66:	483f      	ldr	r0, [pc, #252]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e68:	f004 f8d6 	bl	8009018 <HAL_TIM_ConfigClockSource>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004e72:	f7ff fe3b 	bl	8004aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004e76:	483b      	ldr	r0, [pc, #236]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e78:	f003 fde2 	bl	8008a40 <HAL_TIM_PWM_Init>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004e82:	f7ff fe33 	bl	8004aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004e86:	2370      	movs	r3, #112	; 0x70
 8004e88:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e92:	4619      	mov	r1, r3
 8004e94:	4833      	ldr	r0, [pc, #204]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004e96:	f004 fd79 	bl	800998c <HAL_TIMEx_MasterConfigSynchronization>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004ea0:	f7ff fe24 	bl	8004aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ea4:	2360      	movs	r3, #96	; 0x60
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4826      	ldr	r0, [pc, #152]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004eca:	f003 ffe3 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004ed4:	f7ff fe0a 	bl	8004aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004edc:	2204      	movs	r2, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4820      	ldr	r0, [pc, #128]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004ee2:	f003 ffd7 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004eec:	f7ff fdfe 	bl	8004aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	481a      	ldr	r0, [pc, #104]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004efa:	f003 ffcb 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004f04:	f7ff fdf2 	bl	8004aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004f08:	2370      	movs	r3, #112	; 0x70
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f10:	220c      	movs	r2, #12
 8004f12:	4619      	mov	r1, r3
 8004f14:	4813      	ldr	r0, [pc, #76]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004f16:	f003 ffbd 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004f20:	f7ff fde4 	bl	8004aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10-1;
 8004f30:	2309      	movs	r3, #9
 8004f32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4807      	ldr	r0, [pc, #28]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004f48:	f004 fd9c 	bl	8009a84 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8004f52:	f7ff fdcb 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004f56:	4803      	ldr	r0, [pc, #12]	; (8004f64 <MX_TIM1_Init+0x184>)
 8004f58:	f000 fa34 	bl	80053c4 <HAL_TIM_MspPostInit>

}
 8004f5c:	bf00      	nop
 8004f5e:	3758      	adds	r7, #88	; 0x58
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	2000141c 	.word	0x2000141c
 8004f68:	40010000 	.word	0x40010000

08004f6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f72:	f107 0308 	add.w	r3, r7, #8
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f80:	463b      	mov	r3, r7
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f88:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <MX_TIM2_Init+0x94>)
 8004f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <MX_TIM2_Init+0x94>)
 8004f92:	2253      	movs	r2, #83	; 0x53
 8004f94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <MX_TIM2_Init+0x94>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8004f9c:	4b18      	ldr	r3, [pc, #96]	; (8005000 <MX_TIM2_Init+0x94>)
 8004f9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <MX_TIM2_Init+0x94>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <MX_TIM2_Init+0x94>)
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004fb0:	4813      	ldr	r0, [pc, #76]	; (8005000 <MX_TIM2_Init+0x94>)
 8004fb2:	f003 fc85 	bl	80088c0 <HAL_TIM_Base_Init>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004fbc:	f7ff fd96 	bl	8004aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4619      	mov	r1, r3
 8004fcc:	480c      	ldr	r0, [pc, #48]	; (8005000 <MX_TIM2_Init+0x94>)
 8004fce:	f004 f823 	bl	8009018 <HAL_TIM_ConfigClockSource>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004fd8:	f7ff fd88 	bl	8004aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004fdc:	2320      	movs	r3, #32
 8004fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4805      	ldr	r0, [pc, #20]	; (8005000 <MX_TIM2_Init+0x94>)
 8004fea:	f004 fccf 	bl	800998c <HAL_TIMEx_MasterConfigSynchronization>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004ff4:	f7ff fd7a 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ff8:	bf00      	nop
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20001464 	.word	0x20001464

08005004 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800500a:	f107 0308 	add.w	r3, r7, #8
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005018:	463b      	mov	r3, r7
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005020:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <MX_TIM4_Init+0x94>)
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <MX_TIM4_Init+0x98>)
 8005024:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8005026:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <MX_TIM4_Init+0x94>)
 8005028:	2229      	movs	r2, #41	; 0x29
 800502a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <MX_TIM4_Init+0x94>)
 800502e:	2200      	movs	r2, #0
 8005030:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8005032:	4b19      	ldr	r3, [pc, #100]	; (8005098 <MX_TIM4_Init+0x94>)
 8005034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005038:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800503a:	4b17      	ldr	r3, [pc, #92]	; (8005098 <MX_TIM4_Init+0x94>)
 800503c:	2200      	movs	r2, #0
 800503e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005040:	4b15      	ldr	r3, [pc, #84]	; (8005098 <MX_TIM4_Init+0x94>)
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005046:	4814      	ldr	r0, [pc, #80]	; (8005098 <MX_TIM4_Init+0x94>)
 8005048:	f003 fc3a 	bl	80088c0 <HAL_TIM_Base_Init>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005052:	f7ff fd4b 	bl	8004aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800505a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800505c:	f107 0308 	add.w	r3, r7, #8
 8005060:	4619      	mov	r1, r3
 8005062:	480d      	ldr	r0, [pc, #52]	; (8005098 <MX_TIM4_Init+0x94>)
 8005064:	f003 ffd8 	bl	8009018 <HAL_TIM_ConfigClockSource>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800506e:	f7ff fd3d 	bl	8004aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005072:	2300      	movs	r3, #0
 8005074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800507a:	463b      	mov	r3, r7
 800507c:	4619      	mov	r1, r3
 800507e:	4806      	ldr	r0, [pc, #24]	; (8005098 <MX_TIM4_Init+0x94>)
 8005080:	f004 fc84 	bl	800998c <HAL_TIMEx_MasterConfigSynchronization>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800508a:	f7ff fd2f 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800508e:	bf00      	nop
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200014ac 	.word	0x200014ac
 800509c:	40000800 	.word	0x40000800

080050a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050b4:	463b      	mov	r3, r7
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80050bc:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <MX_TIM5_Init+0x94>)
 80050be:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <MX_TIM5_Init+0x98>)
 80050c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <MX_TIM5_Init+0x94>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050c8:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <MX_TIM5_Init+0x94>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80050ce:	4b19      	ldr	r3, [pc, #100]	; (8005134 <MX_TIM5_Init+0x94>)
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295
 80050d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050d6:	4b17      	ldr	r3, [pc, #92]	; (8005134 <MX_TIM5_Init+0x94>)
 80050d8:	2200      	movs	r2, #0
 80050da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <MX_TIM5_Init+0x94>)
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80050e2:	4814      	ldr	r0, [pc, #80]	; (8005134 <MX_TIM5_Init+0x94>)
 80050e4:	f003 fbec 	bl	80088c0 <HAL_TIM_Base_Init>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80050ee:	f7ff fcfd 	bl	8004aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80050f8:	f107 0308 	add.w	r3, r7, #8
 80050fc:	4619      	mov	r1, r3
 80050fe:	480d      	ldr	r0, [pc, #52]	; (8005134 <MX_TIM5_Init+0x94>)
 8005100:	f003 ff8a 	bl	8009018 <HAL_TIM_ConfigClockSource>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800510a:	f7ff fcef 	bl	8004aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005116:	463b      	mov	r3, r7
 8005118:	4619      	mov	r1, r3
 800511a:	4806      	ldr	r0, [pc, #24]	; (8005134 <MX_TIM5_Init+0x94>)
 800511c:	f004 fc36 	bl	800998c <HAL_TIMEx_MasterConfigSynchronization>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8005126:	f7ff fce1 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	200014f4 	.word	0x200014f4
 8005138:	40000c00 	.word	0x40000c00

0800513c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b096      	sub	sp, #88	; 0x58
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	605a      	str	r2, [r3, #4]
 800514c:	609a      	str	r2, [r3, #8]
 800514e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005150:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800515a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	605a      	str	r2, [r3, #4]
 8005164:	609a      	str	r2, [r3, #8]
 8005166:	60da      	str	r2, [r3, #12]
 8005168:	611a      	str	r2, [r3, #16]
 800516a:	615a      	str	r2, [r3, #20]
 800516c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	2220      	movs	r2, #32
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f007 f8c9 	bl	800c30c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800517a:	4b51      	ldr	r3, [pc, #324]	; (80052c0 <MX_TIM8_Init+0x184>)
 800517c:	4a51      	ldr	r2, [pc, #324]	; (80052c4 <MX_TIM8_Init+0x188>)
 800517e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8005180:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <MX_TIM8_Init+0x184>)
 8005182:	2200      	movs	r2, #0
 8005184:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8005186:	4b4e      	ldr	r3, [pc, #312]	; (80052c0 <MX_TIM8_Init+0x184>)
 8005188:	2240      	movs	r2, #64	; 0x40
 800518a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4200-1;
 800518c:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <MX_TIM8_Init+0x184>)
 800518e:	f241 0267 	movw	r2, #4199	; 0x1067
 8005192:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005194:	4b4a      	ldr	r3, [pc, #296]	; (80052c0 <MX_TIM8_Init+0x184>)
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800519a:	4b49      	ldr	r3, [pc, #292]	; (80052c0 <MX_TIM8_Init+0x184>)
 800519c:	2200      	movs	r2, #0
 800519e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051a0:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <MX_TIM8_Init+0x184>)
 80051a2:	2280      	movs	r2, #128	; 0x80
 80051a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80051a6:	4846      	ldr	r0, [pc, #280]	; (80052c0 <MX_TIM8_Init+0x184>)
 80051a8:	f003 fb8a 	bl	80088c0 <HAL_TIM_Base_Init>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80051b2:	f7ff fc9b 	bl	8004aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80051bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051c0:	4619      	mov	r1, r3
 80051c2:	483f      	ldr	r0, [pc, #252]	; (80052c0 <MX_TIM8_Init+0x184>)
 80051c4:	f003 ff28 	bl	8009018 <HAL_TIM_ConfigClockSource>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80051ce:	f7ff fc8d 	bl	8004aec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80051d2:	483b      	ldr	r0, [pc, #236]	; (80052c0 <MX_TIM8_Init+0x184>)
 80051d4:	f003 fc34 	bl	8008a40 <HAL_TIM_PWM_Init>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80051de:	f7ff fc85 	bl	8004aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80051e2:	2370      	movs	r3, #112	; 0x70
 80051e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80051ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80051ee:	4619      	mov	r1, r3
 80051f0:	4833      	ldr	r0, [pc, #204]	; (80052c0 <MX_TIM8_Init+0x184>)
 80051f2:	f004 fbcb 	bl	800998c <HAL_TIMEx_MasterConfigSynchronization>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80051fc:	f7ff fc76 	bl	8004aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005200:	2360      	movs	r3, #96	; 0x60
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005208:	2300      	movs	r3, #0
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800520c:	2300      	movs	r3, #0
 800520e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005210:	2300      	movs	r3, #0
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005214:	2300      	movs	r3, #0
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005218:	2300      	movs	r3, #0
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800521c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005220:	2200      	movs	r2, #0
 8005222:	4619      	mov	r1, r3
 8005224:	4826      	ldr	r0, [pc, #152]	; (80052c0 <MX_TIM8_Init+0x184>)
 8005226:	f003 fe35 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8005230:	f7ff fc5c 	bl	8004aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005238:	2204      	movs	r2, #4
 800523a:	4619      	mov	r1, r3
 800523c:	4820      	ldr	r0, [pc, #128]	; (80052c0 <MX_TIM8_Init+0x184>)
 800523e:	f003 fe29 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8005248:	f7ff fc50 	bl	8004aec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800524c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005250:	2208      	movs	r2, #8
 8005252:	4619      	mov	r1, r3
 8005254:	481a      	ldr	r0, [pc, #104]	; (80052c0 <MX_TIM8_Init+0x184>)
 8005256:	f003 fe1d 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8005260:	f7ff fc44 	bl	8004aec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8005264:	2370      	movs	r3, #112	; 0x70
 8005266:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800526c:	220c      	movs	r2, #12
 800526e:	4619      	mov	r1, r3
 8005270:	4813      	ldr	r0, [pc, #76]	; (80052c0 <MX_TIM8_Init+0x184>)
 8005272:	f003 fe0f 	bl	8008e94 <HAL_TIM_PWM_ConfigChannel>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 800527c:	f7ff fc36 	bl	8004aec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005280:	2300      	movs	r3, #0
 8005282:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005284:	2300      	movs	r3, #0
 8005286:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 10-1;
 800528c:	2309      	movs	r3, #9
 800528e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005298:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800529a:	2300      	movs	r3, #0
 800529c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4807      	ldr	r0, [pc, #28]	; (80052c0 <MX_TIM8_Init+0x184>)
 80052a4:	f004 fbee 	bl	8009a84 <HAL_TIMEx_ConfigBreakDeadTime>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <MX_TIM8_Init+0x176>
  {
    Error_Handler();
 80052ae:	f7ff fc1d 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80052b2:	4803      	ldr	r0, [pc, #12]	; (80052c0 <MX_TIM8_Init+0x184>)
 80052b4:	f000 f886 	bl	80053c4 <HAL_TIM_MspPostInit>

}
 80052b8:	bf00      	nop
 80052ba:	3758      	adds	r7, #88	; 0x58
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	2000153c 	.word	0x2000153c
 80052c4:	40010400 	.word	0x40010400

080052c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a36      	ldr	r2, [pc, #216]	; (80053b0 <HAL_TIM_Base_MspInit+0xe8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d10e      	bne.n	80052f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	4a34      	ldr	r2, [pc, #208]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6453      	str	r3, [r2, #68]	; 0x44
 80052ea:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80052f6:	e056      	b.n	80053a6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005302:	2300      	movs	r3, #0
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6413      	str	r3, [r2, #64]	; 0x40
 8005312:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	69bb      	ldr	r3, [r7, #24]
}
 800531e:	e042      	b.n	80053a6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a24      	ldr	r2, [pc, #144]	; (80053b8 <HAL_TIM_Base_MspInit+0xf0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d116      	bne.n	8005358 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	6413      	str	r3, [r2, #64]	; 0x40
 800533a:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8005346:	2200      	movs	r2, #0
 8005348:	2104      	movs	r1, #4
 800534a:	201e      	movs	r0, #30
 800534c:	f001 fd29 	bl	8006da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005350:	201e      	movs	r0, #30
 8005352:	f001 fd42 	bl	8006dda <HAL_NVIC_EnableIRQ>
}
 8005356:	e026      	b.n	80053a6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM5)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a17      	ldr	r2, [pc, #92]	; (80053bc <HAL_TIM_Base_MspInit+0xf4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d10e      	bne.n	8005380 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 800536c:	f043 0308 	orr.w	r3, r3, #8
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
}
 800537e:	e012      	b.n	80053a6 <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0e      	ldr	r2, [pc, #56]	; (80053c0 <HAL_TIM_Base_MspInit+0xf8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d10d      	bne.n	80053a6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	6453      	str	r3, [r2, #68]	; 0x44
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_TIM_Base_MspInit+0xec>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40010400 	.word	0x40010400

080053c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08c      	sub	sp, #48	; 0x30
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053cc:	f107 031c 	add.w	r3, r7, #28
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a52      	ldr	r2, [pc, #328]	; (800552c <HAL_TIM_MspPostInit+0x168>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d13e      	bne.n	8005464 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	4b51      	ldr	r3, [pc, #324]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a50      	ldr	r2, [pc, #320]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
 80053f6:	4b4e      	ldr	r3, [pc, #312]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	4b4a      	ldr	r3, [pc, #296]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a49      	ldr	r2, [pc, #292]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b47      	ldr	r3, [pc, #284]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800541e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005424:	2302      	movs	r3, #2
 8005426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542c:	2300      	movs	r3, #0
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005430:	2301      	movs	r3, #1
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005434:	f107 031c 	add.w	r3, r7, #28
 8005438:	4619      	mov	r1, r3
 800543a:	483e      	ldr	r0, [pc, #248]	; (8005534 <HAL_TIM_MspPostInit+0x170>)
 800543c:	f002 fbc2 	bl	8007bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005440:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005446:	2302      	movs	r3, #2
 8005448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544a:	2300      	movs	r3, #0
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800544e:	2300      	movs	r3, #0
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005452:	2301      	movs	r3, #1
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005456:	f107 031c 	add.w	r3, r7, #28
 800545a:	4619      	mov	r1, r3
 800545c:	4836      	ldr	r0, [pc, #216]	; (8005538 <HAL_TIM_MspPostInit+0x174>)
 800545e:	f002 fbb1 	bl	8007bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005462:	e05f      	b.n	8005524 <HAL_TIM_MspPostInit+0x160>
  else if(timHandle->Instance==TIM8)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a34      	ldr	r2, [pc, #208]	; (800553c <HAL_TIM_MspPostInit+0x178>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d15a      	bne.n	8005524 <HAL_TIM_MspPostInit+0x160>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	4b2f      	ldr	r3, [pc, #188]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	4a2e      	ldr	r2, [pc, #184]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	6313      	str	r3, [r2, #48]	; 0x30
 800547e:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	4b28      	ldr	r3, [pc, #160]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	4a27      	ldr	r2, [pc, #156]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	6313      	str	r3, [r2, #48]	; 0x30
 800549a:	4b25      	ldr	r3, [pc, #148]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4a20      	ldr	r2, [pc, #128]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	6313      	str	r3, [r2, #48]	; 0x30
 80054b6:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <HAL_TIM_MspPostInit+0x16c>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c6:	2302      	movs	r3, #2
 80054c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ce:	2300      	movs	r3, #0
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80054d2:	2303      	movs	r3, #3
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d6:	f107 031c 	add.w	r3, r7, #28
 80054da:	4619      	mov	r1, r3
 80054dc:	4816      	ldr	r0, [pc, #88]	; (8005538 <HAL_TIM_MspPostInit+0x174>)
 80054de:	f002 fb71 	bl	8007bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054e2:	2303      	movs	r3, #3
 80054e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e6:	2302      	movs	r3, #2
 80054e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ee:	2300      	movs	r3, #0
 80054f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80054f2:	2303      	movs	r3, #3
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f6:	f107 031c 	add.w	r3, r7, #28
 80054fa:	4619      	mov	r1, r3
 80054fc:	480d      	ldr	r0, [pc, #52]	; (8005534 <HAL_TIM_MspPostInit+0x170>)
 80054fe:	f002 fb61 	bl	8007bc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8005502:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005508:	2302      	movs	r3, #2
 800550a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550c:	2300      	movs	r3, #0
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005510:	2300      	movs	r3, #0
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005514:	2303      	movs	r3, #3
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005518:	f107 031c 	add.w	r3, r7, #28
 800551c:	4619      	mov	r1, r3
 800551e:	4808      	ldr	r0, [pc, #32]	; (8005540 <HAL_TIM_MspPostInit+0x17c>)
 8005520:	f002 fb50 	bl	8007bc4 <HAL_GPIO_Init>
}
 8005524:	bf00      	nop
 8005526:	3730      	adds	r7, #48	; 0x30
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40010000 	.word	0x40010000
 8005530:	40023800 	.word	0x40023800
 8005534:	40020400 	.word	0x40020400
 8005538:	40020000 	.word	0x40020000
 800553c:	40010400 	.word	0x40010400
 8005540:	40020800 	.word	0x40020800

08005544 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005548:	4b10      	ldr	r3, [pc, #64]	; (800558c <MX_UART4_Init+0x48>)
 800554a:	4a11      	ldr	r2, [pc, #68]	; (8005590 <MX_UART4_Init+0x4c>)
 800554c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <MX_UART4_Init+0x48>)
 8005550:	4a10      	ldr	r2, [pc, #64]	; (8005594 <MX_UART4_Init+0x50>)
 8005552:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005554:	4b0d      	ldr	r3, [pc, #52]	; (800558c <MX_UART4_Init+0x48>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <MX_UART4_Init+0x48>)
 800555c:	2200      	movs	r2, #0
 800555e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <MX_UART4_Init+0x48>)
 8005562:	2200      	movs	r2, #0
 8005564:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005566:	4b09      	ldr	r3, [pc, #36]	; (800558c <MX_UART4_Init+0x48>)
 8005568:	220c      	movs	r2, #12
 800556a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800556c:	4b07      	ldr	r3, [pc, #28]	; (800558c <MX_UART4_Init+0x48>)
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <MX_UART4_Init+0x48>)
 8005574:	2200      	movs	r2, #0
 8005576:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005578:	4804      	ldr	r0, [pc, #16]	; (800558c <MX_UART4_Init+0x48>)
 800557a:	f004 fb0e 	bl	8009b9a <HAL_UART_Init>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8005584:	f7ff fab2 	bl	8004aec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005588:	bf00      	nop
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20001584 	.word	0x20001584
 8005590:	40004c00 	.word	0x40004c00
 8005594:	001e8480 	.word	0x001e8480

08005598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a34      	ldr	r2, [pc, #208]	; (8005688 <HAL_UART_MspInit+0xf0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d161      	bne.n	800567e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	4b33      	ldr	r3, [pc, #204]	; (800568c <HAL_UART_MspInit+0xf4>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	4a32      	ldr	r2, [pc, #200]	; (800568c <HAL_UART_MspInit+0xf4>)
 80055c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ca:	4b30      	ldr	r3, [pc, #192]	; (800568c <HAL_UART_MspInit+0xf4>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b2c      	ldr	r3, [pc, #176]	; (800568c <HAL_UART_MspInit+0xf4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a2b      	ldr	r2, [pc, #172]	; (800568c <HAL_UART_MspInit+0xf4>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <HAL_UART_MspInit+0xf4>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055f2:	2303      	movs	r3, #3
 80055f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f6:	2302      	movs	r3, #2
 80055f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fe:	2303      	movs	r3, #3
 8005600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005602:	2308      	movs	r3, #8
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	4619      	mov	r1, r3
 800560c:	4820      	ldr	r0, [pc, #128]	; (8005690 <HAL_UART_MspInit+0xf8>)
 800560e:	f002 fad9 	bl	8007bc4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005612:	4b20      	ldr	r3, [pc, #128]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005614:	4a20      	ldr	r2, [pc, #128]	; (8005698 <HAL_UART_MspInit+0x100>)
 8005616:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005618:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <HAL_UART_MspInit+0xfc>)
 800561a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800561e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005620:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005626:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005628:	2200      	movs	r2, #0
 800562a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_UART_MspInit+0xfc>)
 800562e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005632:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005634:	4b17      	ldr	r3, [pc, #92]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005636:	2200      	movs	r2, #0
 8005638:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800563a:	4b16      	ldr	r3, [pc, #88]	; (8005694 <HAL_UART_MspInit+0xfc>)
 800563c:	2200      	movs	r2, #0
 800563e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005640:	4b14      	ldr	r3, [pc, #80]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005642:	2200      	movs	r2, #0
 8005644:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005646:	4b13      	ldr	r3, [pc, #76]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005648:	2200      	movs	r2, #0
 800564a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <HAL_UART_MspInit+0xfc>)
 800564e:	2200      	movs	r2, #0
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005652:	4810      	ldr	r0, [pc, #64]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005654:	f001 fbdc 	bl	8006e10 <HAL_DMA_Init>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800565e:	f7ff fa45 	bl	8004aec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a0b      	ldr	r2, [pc, #44]	; (8005694 <HAL_UART_MspInit+0xfc>)
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
 8005668:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <HAL_UART_MspInit+0xfc>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 800566e:	2200      	movs	r2, #0
 8005670:	2101      	movs	r1, #1
 8005672:	2034      	movs	r0, #52	; 0x34
 8005674:	f001 fb95 	bl	8006da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005678:	2034      	movs	r0, #52	; 0x34
 800567a:	f001 fbae 	bl	8006dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800567e:	bf00      	nop
 8005680:	3728      	adds	r7, #40	; 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40004c00 	.word	0x40004c00
 800568c:	40023800 	.word	0x40023800
 8005690:	40020000 	.word	0x40020000
 8005694:	200015c8 	.word	0x200015c8
 8005698:	40026040 	.word	0x40026040

0800569c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800569c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80056a0:	480d      	ldr	r0, [pc, #52]	; (80056d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80056a2:	490e      	ldr	r1, [pc, #56]	; (80056dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80056a4:	4a0e      	ldr	r2, [pc, #56]	; (80056e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80056a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056a8:	e002      	b.n	80056b0 <LoopCopyDataInit>

080056aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056ae:	3304      	adds	r3, #4

080056b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056b4:	d3f9      	bcc.n	80056aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056b6:	4a0b      	ldr	r2, [pc, #44]	; (80056e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056b8:	4c0b      	ldr	r4, [pc, #44]	; (80056e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80056ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056bc:	e001      	b.n	80056c2 <LoopFillZerobss>

080056be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056c0:	3204      	adds	r2, #4

080056c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056c4:	d3fb      	bcc.n	80056be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056c6:	f7ff fb79 	bl	8004dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ca:	f006 fe77 	bl	800c3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ce:	f7ff f903 	bl	80048d8 <main>
  bx  lr    
 80056d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80056d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056dc:	200004b0 	.word	0x200004b0
  ldr r2, =_sidata
 80056e0:	080122f0 	.word	0x080122f0
  ldr r2, =_sbss
 80056e4:	200004b0 	.word	0x200004b0
  ldr r4, =_ebss
 80056e8:	20001798 	.word	0x20001798

080056ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056ec:	e7fe      	b.n	80056ec <CAN1_RX0_IRQHandler>
	...

080056f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056f4:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <HAL_Init+0x40>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <HAL_Init+0x40>)
 80056fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_Init+0x40>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <HAL_Init+0x40>)
 8005706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800570a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <HAL_Init+0x40>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a07      	ldr	r2, [pc, #28]	; (8005730 <HAL_Init+0x40>)
 8005712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005718:	2003      	movs	r0, #3
 800571a:	f001 fb37 	bl	8006d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800571e:	200f      	movs	r0, #15
 8005720:	f000 f808 	bl	8005734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005724:	f7ff f9e8 	bl	8004af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40023c00 	.word	0x40023c00

08005734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_InitTick+0x54>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <HAL_InitTick+0x58>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	4619      	mov	r1, r3
 8005746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800574a:	fbb3 f3f1 	udiv	r3, r3, r1
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fb4f 	bl	8006df6 <HAL_SYSTICK_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e00e      	b.n	8005780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b0f      	cmp	r3, #15
 8005766:	d80a      	bhi.n	800577e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005768:	2200      	movs	r2, #0
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	f001 fb17 	bl	8006da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005774:	4a06      	ldr	r2, [pc, #24]	; (8005790 <HAL_InitTick+0x5c>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	e000      	b.n	8005780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	200002dc 	.word	0x200002dc
 800578c:	200002e4 	.word	0x200002e4
 8005790:	200002e0 	.word	0x200002e0

08005794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return uwTick;
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <HAL_GetTick+0x14>)
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20001628 	.word	0x20001628

080057ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057b4:	f7ff ffee 	bl	8005794 <HAL_GetTick>
 80057b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d005      	beq.n	80057d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HAL_Delay+0x44>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80057d2:	bf00      	nop
 80057d4:	f7ff ffde 	bl	8005794 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d8f7      	bhi.n	80057d4 <HAL_Delay+0x28>
  {
  }
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200002e4 	.word	0x200002e4

080057f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e033      	b.n	8005872 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fe fd7c 	bl	8004310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b00      	cmp	r3, #0
 8005830:	d118      	bne.n	8005864 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800583a:	f023 0302 	bic.w	r3, r3, #2
 800583e:	f043 0202 	orr.w	r2, r3, #2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fcee 	bl	8006228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	f043 0201 	orr.w	r2, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
 8005862:	e001      	b.n	8005868 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_ADC_Start+0x1a>
 8005892:	2302      	movs	r3, #2
 8005894:	e0b2      	b.n	80059fc <HAL_ADC_Start+0x180>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d018      	beq.n	80058de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058bc:	4b52      	ldr	r3, [pc, #328]	; (8005a08 <HAL_ADC_Start+0x18c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a52      	ldr	r2, [pc, #328]	; (8005a0c <HAL_ADC_Start+0x190>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	0c9a      	lsrs	r2, r3, #18
 80058c8:	4613      	mov	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	4413      	add	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80058d0:	e002      	b.n	80058d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f9      	bne.n	80058d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d17a      	bne.n	80059e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005916:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592a:	d106      	bne.n	800593a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f023 0206 	bic.w	r2, r3, #6
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	645a      	str	r2, [r3, #68]	; 0x44
 8005938:	e002      	b.n	8005940 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005948:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <HAL_ADC_Start+0x194>)
 800594a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005954:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2b00      	cmp	r3, #0
 8005960:	d12a      	bne.n	80059b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2b      	ldr	r2, [pc, #172]	; (8005a14 <HAL_ADC_Start+0x198>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d015      	beq.n	8005998 <HAL_ADC_Start+0x11c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a29      	ldr	r2, [pc, #164]	; (8005a18 <HAL_ADC_Start+0x19c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d105      	bne.n	8005982 <HAL_ADC_Start+0x106>
 8005976:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <HAL_ADC_Start+0x194>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <HAL_ADC_Start+0x1a0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d136      	bne.n	80059fa <HAL_ADC_Start+0x17e>
 800598c:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <HAL_ADC_Start+0x194>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b00      	cmp	r3, #0
 8005996:	d130      	bne.n	80059fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d129      	bne.n	80059fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	e020      	b.n	80059fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <HAL_ADC_Start+0x198>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d11b      	bne.n	80059fa <HAL_ADC_Start+0x17e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d114      	bne.n	80059fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e00b      	b.n	80059fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f043 0210 	orr.w	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	200002dc 	.word	0x200002dc
 8005a0c:	431bde83 	.word	0x431bde83
 8005a10:	40012300 	.word	0x40012300
 8005a14:	40012000 	.word	0x40012000
 8005a18:	40012100 	.word	0x40012100
 8005a1c:	40012200 	.word	0x40012200

08005a20 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d113      	bne.n	8005a66 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4c:	d10b      	bne.n	8005a66 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e063      	b.n	8005b2e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005a66:	f7ff fe95 	bl	8005794 <HAL_GetTick>
 8005a6a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a6c:	e021      	b.n	8005ab2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d01d      	beq.n	8005ab2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_ADC_PollForConversion+0x6c>
 8005a7c:	f7ff fe8a 	bl	8005794 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d212      	bcs.n	8005ab2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d00b      	beq.n	8005ab2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e03d      	b.n	8005b2e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d1d6      	bne.n	8005a6e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0212 	mvn.w	r2, #18
 8005ac8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d123      	bne.n	8005b2c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11f      	bne.n	8005b2c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d111      	bne.n	8005b2c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	f043 0201 	orr.w	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d049      	beq.n	8005c00 <HAL_ADC_IRQHandler+0xca>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d046      	beq.n	8005c00 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d105      	bne.n	8005b8a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d12b      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d127      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d119      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0220 	bic.w	r2, r2, #32
 8005bca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f9ce 	bl	8005f92 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0212 	mvn.w	r2, #18
 8005bfe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d057      	beq.n	8005cc6 <HAL_ADC_IRQHandler+0x190>
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d054      	beq.n	8005cc6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d105      	bne.n	8005c34 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d139      	bne.n	8005cb6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d006      	beq.n	8005c5e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d12b      	bne.n	8005cb6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d124      	bne.n	8005cb6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d11d      	bne.n	8005cb6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d119      	bne.n	8005cb6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c90:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0201 	orr.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fb fea8 	bl	8001a0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 020c 	mvn.w	r2, #12
 8005cc4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d017      	beq.n	8005d0c <HAL_ADC_IRQHandler+0x1d6>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d014      	beq.n	8005d0c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10d      	bne.n	8005d0c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f95c 	bl	8005fba <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f06f 0201 	mvn.w	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d1a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d015      	beq.n	8005d4e <HAL_ADC_IRQHandler+0x218>
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	f043 0202 	orr.w	r2, r3, #2
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0220 	mvn.w	r2, #32
 8005d3c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f945 	bl	8005fce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0220 	mvn.w	r2, #32
 8005d4c:	601a      	str	r2, [r3, #0]
  }
}
 8005d4e:	bf00      	nop
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_ADC_Start_DMA+0x1e>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e0e9      	b.n	8005f4a <HAL_ADC_Start_DMA+0x1f2>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d018      	beq.n	8005dbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d9c:	4b6d      	ldr	r3, [pc, #436]	; (8005f54 <HAL_ADC_Start_DMA+0x1fc>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a6d      	ldr	r2, [pc, #436]	; (8005f58 <HAL_ADC_Start_DMA+0x200>)
 8005da2:	fba2 2303 	umull	r2, r3, r2, r3
 8005da6:	0c9a      	lsrs	r2, r3, #18
 8005da8:	4613      	mov	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005db0:	e002      	b.n	8005db8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f9      	bne.n	8005db2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dcc:	d107      	bne.n	8005dde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 80a1 	bne.w	8005f30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2c:	d106      	bne.n	8005e3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f023 0206 	bic.w	r2, r3, #6
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
 8005e3a:	e002      	b.n	8005e42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e4a:	4b44      	ldr	r3, [pc, #272]	; (8005f5c <HAL_ADC_Start_DMA+0x204>)
 8005e4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	4a43      	ldr	r2, [pc, #268]	; (8005f60 <HAL_ADC_Start_DMA+0x208>)
 8005e54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	4a42      	ldr	r2, [pc, #264]	; (8005f64 <HAL_ADC_Start_DMA+0x20c>)
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	4a41      	ldr	r2, [pc, #260]	; (8005f68 <HAL_ADC_Start_DMA+0x210>)
 8005e64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005e7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	334c      	adds	r3, #76	; 0x4c
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f001 f864 	bl	8006f6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d12a      	bne.n	8005f06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2d      	ldr	r2, [pc, #180]	; (8005f6c <HAL_ADC_Start_DMA+0x214>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d015      	beq.n	8005ee6 <HAL_ADC_Start_DMA+0x18e>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2c      	ldr	r2, [pc, #176]	; (8005f70 <HAL_ADC_Start_DMA+0x218>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d105      	bne.n	8005ed0 <HAL_ADC_Start_DMA+0x178>
 8005ec4:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <HAL_ADC_Start_DMA+0x204>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <HAL_ADC_Start_DMA+0x21c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d136      	bne.n	8005f48 <HAL_ADC_Start_DMA+0x1f0>
 8005eda:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <HAL_ADC_Start_DMA+0x204>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d130      	bne.n	8005f48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d129      	bne.n	8005f48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	e020      	b.n	8005f48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_ADC_Start_DMA+0x214>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d11b      	bne.n	8005f48 <HAL_ADC_Start_DMA+0x1f0>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d114      	bne.n	8005f48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f2c:	609a      	str	r2, [r3, #8]
 8005f2e:	e00b      	b.n	8005f48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	f043 0210 	orr.w	r2, r3, #16
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	f043 0201 	orr.w	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	200002dc 	.word	0x200002dc
 8005f58:	431bde83 	.word	0x431bde83
 8005f5c:	40012300 	.word	0x40012300
 8005f60:	08006421 	.word	0x08006421
 8005f64:	080064db 	.word	0x080064db
 8005f68:	080064f7 	.word	0x080064f7
 8005f6c:	40012000 	.word	0x40012000
 8005f70:	40012100 	.word	0x40012100
 8005f74:	40012200 	.word	0x40012200

08005f78 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x1c>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e105      	b.n	800620c <HAL_ADC_ConfigChannel+0x228>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b09      	cmp	r3, #9
 800600e:	d925      	bls.n	800605c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	3b1e      	subs	r3, #30
 8006026:	2207      	movs	r2, #7
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43da      	mvns	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	400a      	ands	r2, r1
 8006034:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68d9      	ldr	r1, [r3, #12]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	4618      	mov	r0, r3
 8006048:	4603      	mov	r3, r0
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	4403      	add	r3, r0
 800604e:	3b1e      	subs	r3, #30
 8006050:	409a      	lsls	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	e022      	b.n	80060a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6919      	ldr	r1, [r3, #16]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	2207      	movs	r2, #7
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	43da      	mvns	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	400a      	ands	r2, r1
 800607e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6919      	ldr	r1, [r3, #16]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	4618      	mov	r0, r3
 8006092:	4603      	mov	r3, r0
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4403      	add	r3, r0
 8006098:	409a      	lsls	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d824      	bhi.n	80060f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	3b05      	subs	r3, #5
 80060bc:	221f      	movs	r2, #31
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43da      	mvns	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	400a      	ands	r2, r1
 80060ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	4618      	mov	r0, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	3b05      	subs	r3, #5
 80060e6:	fa00 f203 	lsl.w	r2, r0, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	635a      	str	r2, [r3, #52]	; 0x34
 80060f2:	e04c      	b.n	800618e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b0c      	cmp	r3, #12
 80060fa:	d824      	bhi.n	8006146 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	3b23      	subs	r3, #35	; 0x23
 800610e:	221f      	movs	r2, #31
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	43da      	mvns	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	400a      	ands	r2, r1
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	4618      	mov	r0, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	3b23      	subs	r3, #35	; 0x23
 8006138:	fa00 f203 	lsl.w	r2, r0, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
 8006144:	e023      	b.n	800618e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	3b41      	subs	r3, #65	; 0x41
 8006158:	221f      	movs	r2, #31
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43da      	mvns	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	400a      	ands	r2, r1
 8006166:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	4618      	mov	r0, r3
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	3b41      	subs	r3, #65	; 0x41
 8006182:	fa00 f203 	lsl.w	r2, r0, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800618e:	4b22      	ldr	r3, [pc, #136]	; (8006218 <HAL_ADC_ConfigChannel+0x234>)
 8006190:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a21      	ldr	r2, [pc, #132]	; (800621c <HAL_ADC_ConfigChannel+0x238>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d109      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x1cc>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b12      	cmp	r3, #18
 80061a2:	d105      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a19      	ldr	r2, [pc, #100]	; (800621c <HAL_ADC_ConfigChannel+0x238>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d123      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x21e>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b10      	cmp	r3, #16
 80061c0:	d003      	beq.n	80061ca <HAL_ADC_ConfigChannel+0x1e6>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b11      	cmp	r3, #17
 80061c8:	d11b      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b10      	cmp	r3, #16
 80061dc:	d111      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <HAL_ADC_ConfigChannel+0x23c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a10      	ldr	r2, [pc, #64]	; (8006224 <HAL_ADC_ConfigChannel+0x240>)
 80061e4:	fba2 2303 	umull	r2, r3, r2, r3
 80061e8:	0c9a      	lsrs	r2, r3, #18
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80061f4:	e002      	b.n	80061fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	3b01      	subs	r3, #1
 80061fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f9      	bne.n	80061f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	40012300 	.word	0x40012300
 800621c:	40012000 	.word	0x40012000
 8006220:	200002dc 	.word	0x200002dc
 8006224:	431bde83 	.word	0x431bde83

08006228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006230:	4b79      	ldr	r3, [pc, #484]	; (8006418 <ADC_Init+0x1f0>)
 8006232:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800625c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	021a      	lsls	r2, r3, #8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6899      	ldr	r1, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	4a58      	ldr	r2, [pc, #352]	; (800641c <ADC_Init+0x1f4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6899      	ldr	r1, [r3, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80062f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6899      	ldr	r1, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	e00f      	b.n	8006326 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006324:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0202 	bic.w	r2, r2, #2
 8006334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6899      	ldr	r1, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7e1b      	ldrb	r3, [r3, #24]
 8006340:	005a      	lsls	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01b      	beq.n	800638c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006362:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006372:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	3b01      	subs	r3, #1
 8006380:	035a      	lsls	r2, r3, #13
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	e007      	b.n	800639c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800639a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	051a      	lsls	r2, r3, #20
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80063d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6899      	ldr	r1, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063de:	025a      	lsls	r2, r3, #9
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6899      	ldr	r1, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	029a      	lsls	r2, r3, #10
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	609a      	str	r2, [r3, #8]
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	40012300 	.word	0x40012300
 800641c:	0f000001 	.word	0x0f000001

08006420 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006436:	2b00      	cmp	r3, #0
 8006438:	d13c      	bne.n	80064b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d12b      	bne.n	80064ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006458:	2b00      	cmp	r3, #0
 800645a:	d127      	bne.n	80064ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006466:	2b00      	cmp	r3, #0
 8006468:	d006      	beq.n	8006478 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006474:	2b00      	cmp	r3, #0
 8006476:	d119      	bne.n	80064ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0220 	bic.w	r2, r2, #32
 8006486:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	f043 0201 	orr.w	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff fd70 	bl	8005f92 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80064b2:	e00e      	b.n	80064d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f7ff fd84 	bl	8005fce <HAL_ADC_ErrorCallback>
}
 80064c6:	e004      	b.n	80064d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fd5c 	bl	8005fa6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064ee:	bf00      	nop
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2240      	movs	r2, #64	; 0x40
 8006508:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	f043 0204 	orr.w	r2, r3, #4
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	f7ff fd59 	bl	8005fce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_ADCEx_InjectedStart_IT+0x22>
 8006542:	2302      	movs	r3, #2
 8006544:	e0b2      	b.n	80066ac <HAL_ADCEx_InjectedStart_IT+0x188>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d018      	beq.n	800658e <HAL_ADCEx_InjectedStart_IT+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800656c:	4b52      	ldr	r3, [pc, #328]	; (80066b8 <HAL_ADCEx_InjectedStart_IT+0x194>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a52      	ldr	r2, [pc, #328]	; (80066bc <HAL_ADCEx_InjectedStart_IT+0x198>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	0c9a      	lsrs	r2, r3, #18
 8006578:	4613      	mov	r3, r2
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	4413      	add	r3, r2
 800657e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006580:	e002      	b.n	8006588 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	3b01      	subs	r3, #1
 8006586:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f9      	bne.n	8006582 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	d17a      	bne.n	8006692 <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0204 	mvn.w	r2, #4
 80065d2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065e2:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065e4:	4b36      	ldr	r3, [pc, #216]	; (80066c0 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 80065e6:	60fb      	str	r3, [r7, #12]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d124      	bne.n	800663e <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf0c      	ite	eq
 8006602:	2301      	moveq	r3, #1
 8006604:	2300      	movne	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006614:	2b00      	cmp	r3, #0
 8006616:	bf0c      	ite	eq
 8006618:	2301      	moveq	r3, #1
 800661a:	2300      	movne	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d041      	beq.n	80066aa <HAL_ADCEx_InjectedStart_IT+0x186>
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d03e      	beq.n	80066aa <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800663a:	609a      	str	r2, [r3, #8]
 800663c:	e035      	b.n	80066aa <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665e:	2b00      	cmp	r3, #0
 8006660:	bf0c      	ite	eq
 8006662:	2301      	moveq	r3, #1
 8006664:	2300      	movne	r3, #0
 8006666:	b2db      	uxtb	r3, r3
 8006668:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d11a      	bne.n	80066aa <HAL_ADCEx_InjectedStart_IT+0x186>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d017      	beq.n	80066aa <HAL_ADCEx_InjectedStart_IT+0x186>
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d014      	beq.n	80066aa <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	e00b      	b.n	80066aa <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f043 0210 	orr.w	r2, r3, #16
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f043 0201 	orr.w	r2, r3, #1
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	200002dc 	.word	0x200002dc
 80066bc:	431bde83 	.word	0x431bde83
 80066c0:	40012300 	.word	0x40012300
 80066c4:	40012000 	.word	0x40012000

080066c8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80066dc:	2302      	movs	r3, #2
 80066de:	e17d      	b.n	80069dc <HAL_ADCEx_InjectedConfigChannel+0x314>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b09      	cmp	r3, #9
 80066ee:	d925      	bls.n	800673c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68d9      	ldr	r1, [r3, #12]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	4613      	mov	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4413      	add	r3, r2
 8006704:	3b1e      	subs	r3, #30
 8006706:	2207      	movs	r2, #7
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	43da      	mvns	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	400a      	ands	r2, r1
 8006714:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68d9      	ldr	r1, [r3, #12]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	4618      	mov	r0, r3
 8006728:	4603      	mov	r3, r0
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4403      	add	r3, r0
 800672e:	3b1e      	subs	r3, #30
 8006730:	409a      	lsls	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	60da      	str	r2, [r3, #12]
 800673a:	e022      	b.n	8006782 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6919      	ldr	r1, [r3, #16]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	4613      	mov	r3, r2
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4413      	add	r3, r2
 8006750:	2207      	movs	r2, #7
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	43da      	mvns	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	400a      	ands	r2, r1
 800675e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6919      	ldr	r1, [r3, #16]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	4618      	mov	r0, r3
 8006772:	4603      	mov	r3, r0
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	4403      	add	r3, r0
 8006778:	409a      	lsls	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	3b01      	subs	r3, #1
 800679e:	051a      	lsls	r2, r3, #20
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	3303      	adds	r3, #3
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	221f      	movs	r2, #31
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43da      	mvns	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	400a      	ands	r2, r1
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	4618      	mov	r0, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	3303      	adds	r3, #3
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	fa00 f203 	lsl.w	r2, r0, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	4a74      	ldr	r2, [pc, #464]	; (80069e8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6899      	ldr	r1, [r3, #8]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	699a      	ldr	r2, [r3, #24]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800684a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6899      	ldr	r1, [r3, #8]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	609a      	str	r2, [r3, #8]
 800685e:	e00f      	b.n	8006880 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800686e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800687e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	7d5b      	ldrb	r3, [r3, #21]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006896:	605a      	str	r2, [r3, #4]
 8006898:	e007      	b.n	80068aa <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a8:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	7d1b      	ldrb	r3, [r3, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d008      	beq.n	80068c4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	e007      	b.n	80068d4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068d2:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d02e      	beq.n	800693a <HAL_ADCEx_InjectedConfigChannel+0x272>
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d840      	bhi.n	8006962 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d002      	beq.n	80068ea <HAL_ADCEx_InjectedConfigChannel+0x222>
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d014      	beq.n	8006912 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80068e8:	e03b      	b.n	8006962 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80068f8:	f023 030f 	bic.w	r3, r3, #15
 80068fc:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6959      	ldr	r1, [r3, #20]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	615a      	str	r2, [r3, #20]
      break;
 8006910:	e03b      	b.n	800698a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6812      	ldr	r2, [r2, #0]
 800691c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006920:	f023 030f 	bic.w	r3, r3, #15
 8006924:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6999      	ldr	r1, [r3, #24]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	619a      	str	r2, [r3, #24]
      break;
 8006938:	e027      	b.n	800698a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006948:	f023 030f 	bic.w	r3, r3, #15
 800694c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69d9      	ldr	r1, [r3, #28]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	61da      	str	r2, [r3, #28]
      break;
 8006960:	e013      	b.n	800698a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006970:	f023 030f 	bic.w	r3, r3, #15
 8006974:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a19      	ldr	r1, [r3, #32]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	621a      	str	r2, [r3, #32]
      break;
 8006988:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800698a:	4b18      	ldr	r3, [pc, #96]	; (80069ec <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800698c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d109      	bne.n	80069ac <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b12      	cmp	r3, #18
 800699e:	d105      	bne.n	80069ac <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d10d      	bne.n	80069d2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d003      	beq.n	80069c6 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b11      	cmp	r3, #17
 80069c4:	d105      	bne.n	80069d2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	000f0001 	.word	0x000f0001
 80069ec:	40012300 	.word	0x40012300
 80069f0:	40012000 	.word	0x40012000

080069f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e0ed      	b.n	8006be2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fd fdbc 	bl	8004590 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a28:	f7fe feb4 	bl	8005794 <HAL_GetTick>
 8006a2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006a2e:	e012      	b.n	8006a56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a30:	f7fe feb0 	bl	8005794 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b0a      	cmp	r3, #10
 8006a3c:	d90b      	bls.n	8006a56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e0c5      	b.n	8006be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0e5      	beq.n	8006a30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0202 	bic.w	r2, r2, #2
 8006a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a74:	f7fe fe8e 	bl	8005794 <HAL_GetTick>
 8006a78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006a7a:	e012      	b.n	8006aa2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006a7c:	f7fe fe8a 	bl	8005794 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b0a      	cmp	r3, #10
 8006a88:	d90b      	bls.n	8006aa2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2205      	movs	r2, #5
 8006a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e09f      	b.n	8006be2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e5      	bne.n	8006a7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7e1b      	ldrb	r3, [r3, #24]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d108      	bne.n	8006aca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e007      	b.n	8006ada <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	7e5b      	ldrb	r3, [r3, #25]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d108      	bne.n	8006af4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e007      	b.n	8006b04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7e9b      	ldrb	r3, [r3, #26]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d108      	bne.n	8006b1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0220 	orr.w	r2, r2, #32
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e007      	b.n	8006b2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0220 	bic.w	r2, r2, #32
 8006b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	7edb      	ldrb	r3, [r3, #27]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d108      	bne.n	8006b48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0210 	bic.w	r2, r2, #16
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e007      	b.n	8006b58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0210 	orr.w	r2, r2, #16
 8006b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7f1b      	ldrb	r3, [r3, #28]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d108      	bne.n	8006b72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0208 	orr.w	r2, r2, #8
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e007      	b.n	8006b82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0208 	bic.w	r2, r2, #8
 8006b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7f5b      	ldrb	r3, [r3, #29]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d108      	bne.n	8006b9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0204 	orr.w	r2, r2, #4
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e007      	b.n	8006bac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0204 	bic.w	r2, r2, #4
 8006baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	ea42 0103 	orr.w	r1, r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	1e5a      	subs	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <__NVIC_SetPriorityGrouping>:
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bfc:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <__NVIC_SetPriorityGrouping+0x44>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c08:	4013      	ands	r3, r2
 8006c0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c1e:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <__NVIC_SetPriorityGrouping+0x44>)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	60d3      	str	r3, [r2, #12]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	e000ed00 	.word	0xe000ed00

08006c34 <__NVIC_GetPriorityGrouping>:
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c38:	4b04      	ldr	r3, [pc, #16]	; (8006c4c <__NVIC_GetPriorityGrouping+0x18>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	f003 0307 	and.w	r3, r3, #7
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	e000ed00 	.word	0xe000ed00

08006c50 <__NVIC_EnableIRQ>:
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	db0b      	blt.n	8006c7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	f003 021f 	and.w	r2, r3, #31
 8006c68:	4907      	ldr	r1, [pc, #28]	; (8006c88 <__NVIC_EnableIRQ+0x38>)
 8006c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	2001      	movs	r0, #1
 8006c72:	fa00 f202 	lsl.w	r2, r0, r2
 8006c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	e000e100 	.word	0xe000e100

08006c8c <__NVIC_SetPriority>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	db0a      	blt.n	8006cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	490c      	ldr	r1, [pc, #48]	; (8006cd8 <__NVIC_SetPriority+0x4c>)
 8006ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006caa:	0112      	lsls	r2, r2, #4
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	440b      	add	r3, r1
 8006cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cb4:	e00a      	b.n	8006ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4908      	ldr	r1, [pc, #32]	; (8006cdc <__NVIC_SetPriority+0x50>)
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	3b04      	subs	r3, #4
 8006cc4:	0112      	lsls	r2, r2, #4
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	440b      	add	r3, r1
 8006cca:	761a      	strb	r2, [r3, #24]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	e000e100 	.word	0xe000e100
 8006cdc:	e000ed00 	.word	0xe000ed00

08006ce0 <NVIC_EncodePriority>:
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b089      	sub	sp, #36	; 0x24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f1c3 0307 	rsb	r3, r3, #7
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	bf28      	it	cs
 8006cfe:	2304      	movcs	r3, #4
 8006d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	3304      	adds	r3, #4
 8006d06:	2b06      	cmp	r3, #6
 8006d08:	d902      	bls.n	8006d10 <NVIC_EncodePriority+0x30>
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	3b03      	subs	r3, #3
 8006d0e:	e000      	b.n	8006d12 <NVIC_EncodePriority+0x32>
 8006d10:	2300      	movs	r3, #0
 8006d12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d14:	f04f 32ff 	mov.w	r2, #4294967295
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43da      	mvns	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	401a      	ands	r2, r3
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d28:	f04f 31ff 	mov.w	r1, #4294967295
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	43d9      	mvns	r1, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d38:	4313      	orrs	r3, r2
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3724      	adds	r7, #36	; 0x24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d58:	d301      	bcc.n	8006d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e00f      	b.n	8006d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d5e:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <SysTick_Config+0x40>)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d66:	210f      	movs	r1, #15
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	f7ff ff8e 	bl	8006c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <SysTick_Config+0x40>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d76:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <SysTick_Config+0x40>)
 8006d78:	2207      	movs	r2, #7
 8006d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	e000e010 	.word	0xe000e010

08006d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff ff29 	bl	8006bec <__NVIC_SetPriorityGrouping>
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b086      	sub	sp, #24
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	4603      	mov	r3, r0
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
 8006dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006db4:	f7ff ff3e 	bl	8006c34 <__NVIC_GetPriorityGrouping>
 8006db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	6978      	ldr	r0, [r7, #20]
 8006dc0:	f7ff ff8e 	bl	8006ce0 <NVIC_EncodePriority>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff ff5d 	bl	8006c8c <__NVIC_SetPriority>
}
 8006dd2:	bf00      	nop
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	4603      	mov	r3, r0
 8006de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff ff31 	bl	8006c50 <__NVIC_EnableIRQ>
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff ffa2 	bl	8006d48 <SysTick_Config>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006e1c:	f7fe fcba 	bl	8005794 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e099      	b.n	8006f60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e4c:	e00f      	b.n	8006e6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e4e:	f7fe fca1 	bl	8005794 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d908      	bls.n	8006e6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2203      	movs	r2, #3
 8006e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e078      	b.n	8006f60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e8      	bne.n	8006e4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4b38      	ldr	r3, [pc, #224]	; (8006f68 <HAL_DMA_Init+0x158>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d107      	bne.n	8006ed8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d117      	bne.n	8006f32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00e      	beq.n	8006f32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fb01 	bl	800751c <DMA_CheckFifoParam>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2240      	movs	r2, #64	; 0x40
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e016      	b.n	8006f60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fab8 	bl	80074b0 <DMA_CalcBaseAndBitshift>
 8006f40:	4603      	mov	r3, r0
 8006f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f48:	223f      	movs	r2, #63	; 0x3f
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	f010803f 	.word	0xf010803f

08006f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_DMA_Start_IT+0x26>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e040      	b.n	8007014 <HAL_DMA_Start_IT+0xa8>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d12f      	bne.n	8007006 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f000 fa4a 	bl	8007454 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc4:	223f      	movs	r2, #63	; 0x3f
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0216 	orr.w	r2, r2, #22
 8006fda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0208 	orr.w	r2, r2, #8
 8006ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e005      	b.n	8007012 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800700e:	2302      	movs	r3, #2
 8007010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007028:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800702a:	f7fe fbb3 	bl	8005794 <HAL_GetTick>
 800702e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d008      	beq.n	800704e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2280      	movs	r2, #128	; 0x80
 8007040:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e052      	b.n	80070f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0216 	bic.w	r2, r2, #22
 800705c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800706c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d103      	bne.n	800707e <HAL_DMA_Abort+0x62>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0208 	bic.w	r2, r2, #8
 800708c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800709e:	e013      	b.n	80070c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070a0:	f7fe fb78 	bl	8005794 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	d90c      	bls.n	80070c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2203      	movs	r2, #3
 80070b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e015      	b.n	80070f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e4      	bne.n	80070a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070da:	223f      	movs	r2, #63	; 0x3f
 80070dc:	409a      	lsls	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d004      	beq.n	800711a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2280      	movs	r2, #128	; 0x80
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e00c      	b.n	8007134 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2205      	movs	r2, #5
 800711e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0201 	bic.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800714c:	4b8e      	ldr	r3, [pc, #568]	; (8007388 <HAL_DMA_IRQHandler+0x248>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a8e      	ldr	r2, [pc, #568]	; (800738c <HAL_DMA_IRQHandler+0x24c>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	0a9b      	lsrs	r3, r3, #10
 8007158:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716a:	2208      	movs	r2, #8
 800716c:	409a      	lsls	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4013      	ands	r3, r2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01a      	beq.n	80071ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b00      	cmp	r3, #0
 8007182:	d013      	beq.n	80071ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0204 	bic.w	r2, r2, #4
 8007192:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007198:	2208      	movs	r2, #8
 800719a:	409a      	lsls	r2, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a4:	f043 0201 	orr.w	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b0:	2201      	movs	r2, #1
 80071b2:	409a      	lsls	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4013      	ands	r3, r2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	2201      	movs	r2, #1
 80071d0:	409a      	lsls	r2, r3
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f043 0202 	orr.w	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e6:	2204      	movs	r2, #4
 80071e8:	409a      	lsls	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4013      	ands	r3, r2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d012      	beq.n	8007218 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	2204      	movs	r2, #4
 8007206:	409a      	lsls	r2, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	f043 0204 	orr.w	r2, r3, #4
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721c:	2210      	movs	r2, #16
 800721e:	409a      	lsls	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4013      	ands	r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d043      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d03c      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723a:	2210      	movs	r2, #16
 800723c:	409a      	lsls	r2, r3
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d018      	beq.n	8007282 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d108      	bne.n	8007270 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d024      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
 800726e:	e01f      	b.n	80072b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01b      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	4798      	blx	r3
 8007280:	e016      	b.n	80072b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728c:	2b00      	cmp	r3, #0
 800728e:	d107      	bne.n	80072a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0208 	bic.w	r2, r2, #8
 800729e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b4:	2220      	movs	r2, #32
 80072b6:	409a      	lsls	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 808f 	beq.w	80073e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8087 	beq.w	80073e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	2220      	movs	r2, #32
 80072d8:	409a      	lsls	r2, r3
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d136      	bne.n	8007358 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0216 	bic.w	r2, r2, #22
 80072f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007308:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <HAL_DMA_IRQHandler+0x1da>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0208 	bic.w	r2, r2, #8
 8007328:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800732e:	223f      	movs	r2, #63	; 0x3f
 8007330:	409a      	lsls	r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	2b00      	cmp	r3, #0
 800734c:	d07e      	beq.n	800744c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3
        }
        return;
 8007356:	e079      	b.n	800744c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01d      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007378:	2b00      	cmp	r3, #0
 800737a:	d031      	beq.n	80073e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
 8007384:	e02c      	b.n	80073e0 <HAL_DMA_IRQHandler+0x2a0>
 8007386:	bf00      	nop
 8007388:	200002dc 	.word	0x200002dc
 800738c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	2b00      	cmp	r3, #0
 8007396:	d023      	beq.n	80073e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	4798      	blx	r3
 80073a0:	e01e      	b.n	80073e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10f      	bne.n	80073d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0210 	bic.w	r2, r2, #16
 80073be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d032      	beq.n	800744e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d022      	beq.n	800743a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2205      	movs	r2, #5
 80073f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0201 	bic.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	3301      	adds	r3, #1
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	429a      	cmp	r2, r3
 8007416:	d307      	bcc.n	8007428 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1f2      	bne.n	800740c <HAL_DMA_IRQHandler+0x2cc>
 8007426:	e000      	b.n	800742a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007428:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
 800744a:	e000      	b.n	800744e <HAL_DMA_IRQHandler+0x30e>
        return;
 800744c:	bf00      	nop
    }
  }
}
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007470:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d108      	bne.n	8007494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007492:	e007      	b.n	80074a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	60da      	str	r2, [r3, #12]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	3b10      	subs	r3, #16
 80074c0:	4a14      	ldr	r2, [pc, #80]	; (8007514 <DMA_CalcBaseAndBitshift+0x64>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	091b      	lsrs	r3, r3, #4
 80074c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80074ca:	4a13      	ldr	r2, [pc, #76]	; (8007518 <DMA_CalcBaseAndBitshift+0x68>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d909      	bls.n	80074f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	1d1a      	adds	r2, r3, #4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	659a      	str	r2, [r3, #88]	; 0x58
 80074f0:	e007      	b.n	8007502 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074fa:	f023 0303 	bic.w	r3, r3, #3
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	aaaaaaab 	.word	0xaaaaaaab
 8007518:	0801167c 	.word	0x0801167c

0800751c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d11f      	bne.n	8007576 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d856      	bhi.n	80075ea <DMA_CheckFifoParam+0xce>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <DMA_CheckFifoParam+0x28>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007555 	.word	0x08007555
 8007548:	08007567 	.word	0x08007567
 800754c:	08007555 	.word	0x08007555
 8007550:	080075eb 	.word	0x080075eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d046      	beq.n	80075ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007564:	e043      	b.n	80075ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800756e:	d140      	bne.n	80075f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007574:	e03d      	b.n	80075f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757e:	d121      	bne.n	80075c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d837      	bhi.n	80075f6 <DMA_CheckFifoParam+0xda>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <DMA_CheckFifoParam+0x70>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075a3 	.word	0x080075a3
 8007594:	0800759d 	.word	0x0800759d
 8007598:	080075b5 	.word	0x080075b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
      break;
 80075a0:	e030      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d025      	beq.n	80075fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b2:	e022      	b.n	80075fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075bc:	d11f      	bne.n	80075fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80075c2:	e01c      	b.n	80075fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d903      	bls.n	80075d2 <DMA_CheckFifoParam+0xb6>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d003      	beq.n	80075d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80075d0:	e018      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
      break;
 80075d6:	e015      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00e      	beq.n	8007602 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	73fb      	strb	r3, [r7, #15]
      break;
 80075e8:	e00b      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      break;
 80075ea:	bf00      	nop
 80075ec:	e00a      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      break;
 80075ee:	bf00      	nop
 80075f0:	e008      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      break;
 80075f2:	bf00      	nop
 80075f4:	e006      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      break;
 80075f6:	bf00      	nop
 80075f8:	e004      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      break;
 80075fa:	bf00      	nop
 80075fc:	e002      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      break;   
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <DMA_CheckFifoParam+0xe8>
      break;
 8007602:	bf00      	nop
    }
  } 
  
  return status; 
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop

08007614 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007626:	4b23      	ldr	r3, [pc, #140]	; (80076b4 <HAL_FLASH_Program+0xa0>)
 8007628:	7e1b      	ldrb	r3, [r3, #24]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_FLASH_Program+0x1e>
 800762e:	2302      	movs	r3, #2
 8007630:	e03b      	b.n	80076aa <HAL_FLASH_Program+0x96>
 8007632:	4b20      	ldr	r3, [pc, #128]	; (80076b4 <HAL_FLASH_Program+0xa0>)
 8007634:	2201      	movs	r2, #1
 8007636:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007638:	f24c 3050 	movw	r0, #50000	; 0xc350
 800763c:	f000 f870 	bl	8007720 <FLASH_WaitForLastOperation>
 8007640:	4603      	mov	r3, r0
 8007642:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d12b      	bne.n	80076a2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d105      	bne.n	800765c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007650:	783b      	ldrb	r3, [r7, #0]
 8007652:	4619      	mov	r1, r3
 8007654:	68b8      	ldr	r0, [r7, #8]
 8007656:	f000 f91b 	bl	8007890 <FLASH_Program_Byte>
 800765a:	e016      	b.n	800768a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d105      	bne.n	800766e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007662:	883b      	ldrh	r3, [r7, #0]
 8007664:	4619      	mov	r1, r3
 8007666:	68b8      	ldr	r0, [r7, #8]
 8007668:	f000 f8ee 	bl	8007848 <FLASH_Program_HalfWord>
 800766c:	e00d      	b.n	800768a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b02      	cmp	r3, #2
 8007672:	d105      	bne.n	8007680 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	4619      	mov	r1, r3
 8007678:	68b8      	ldr	r0, [r7, #8]
 800767a:	f000 f8c3 	bl	8007804 <FLASH_Program_Word>
 800767e:	e004      	b.n	800768a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007684:	68b8      	ldr	r0, [r7, #8]
 8007686:	f000 f88b 	bl	80077a0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800768a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800768e:	f000 f847 	bl	8007720 <FLASH_WaitForLastOperation>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007696:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <HAL_FLASH_Program+0xa4>)
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	4a07      	ldr	r2, [pc, #28]	; (80076b8 <HAL_FLASH_Program+0xa4>)
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80076a2:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <HAL_FLASH_Program+0xa0>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	2000162c 	.word	0x2000162c
 80076b8:	40023c00 	.word	0x40023c00

080076bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80076c6:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <HAL_FLASH_Unlock+0x38>)
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	da0b      	bge.n	80076e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80076ce:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <HAL_FLASH_Unlock+0x38>)
 80076d0:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <HAL_FLASH_Unlock+0x3c>)
 80076d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80076d4:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <HAL_FLASH_Unlock+0x38>)
 80076d6:	4a09      	ldr	r2, [pc, #36]	; (80076fc <HAL_FLASH_Unlock+0x40>)
 80076d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <HAL_FLASH_Unlock+0x38>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	da01      	bge.n	80076e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80076e6:	79fb      	ldrb	r3, [r7, #7]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	40023c00 	.word	0x40023c00
 80076f8:	45670123 	.word	0x45670123
 80076fc:	cdef89ab 	.word	0xcdef89ab

08007700 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <HAL_FLASH_Lock+0x1c>)
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	4a04      	ldr	r2, [pc, #16]	; (800771c <HAL_FLASH_Lock+0x1c>)
 800770a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800770e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40023c00 	.word	0x40023c00

08007720 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800772c:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <FLASH_WaitForLastOperation+0x78>)
 800772e:	2200      	movs	r2, #0
 8007730:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007732:	f7fe f82f 	bl	8005794 <HAL_GetTick>
 8007736:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007738:	e010      	b.n	800775c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d00c      	beq.n	800775c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d007      	beq.n	8007758 <FLASH_WaitForLastOperation+0x38>
 8007748:	f7fe f824 	bl	8005794 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d201      	bcs.n	800775c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e019      	b.n	8007790 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <FLASH_WaitForLastOperation+0x7c>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e8      	bne.n	800773a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <FLASH_WaitForLastOperation+0x7c>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007774:	4b09      	ldr	r3, [pc, #36]	; (800779c <FLASH_WaitForLastOperation+0x7c>)
 8007776:	2201      	movs	r2, #1
 8007778:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800777a:	4b08      	ldr	r3, [pc, #32]	; (800779c <FLASH_WaitForLastOperation+0x7c>)
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007786:	f000 f8a5 	bl	80078d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
  
}  
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	2000162c 	.word	0x2000162c
 800779c:	40023c00 	.word	0x40023c00

080077a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80077ac:	4b14      	ldr	r3, [pc, #80]	; (8007800 <FLASH_Program_DoubleWord+0x60>)
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	4a13      	ldr	r2, [pc, #76]	; (8007800 <FLASH_Program_DoubleWord+0x60>)
 80077b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80077b8:	4b11      	ldr	r3, [pc, #68]	; (8007800 <FLASH_Program_DoubleWord+0x60>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	4a10      	ldr	r2, [pc, #64]	; (8007800 <FLASH_Program_DoubleWord+0x60>)
 80077be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <FLASH_Program_DoubleWord+0x60>)
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	4a0d      	ldr	r2, [pc, #52]	; (8007800 <FLASH_Program_DoubleWord+0x60>)
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80077d6:	f3bf 8f6f 	isb	sy
}
 80077da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80077dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077e0:	f04f 0200 	mov.w	r2, #0
 80077e4:	f04f 0300 	mov.w	r3, #0
 80077e8:	000a      	movs	r2, r1
 80077ea:	2300      	movs	r3, #0
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	3104      	adds	r1, #4
 80077f0:	4613      	mov	r3, r2
 80077f2:	600b      	str	r3, [r1, #0]
}
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	40023c00 	.word	0x40023c00

08007804 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <FLASH_Program_Word+0x40>)
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <FLASH_Program_Word+0x40>)
 8007814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007818:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800781a:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <FLASH_Program_Word+0x40>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	4a09      	ldr	r2, [pc, #36]	; (8007844 <FLASH_Program_Word+0x40>)
 8007820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007824:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007826:	4b07      	ldr	r3, [pc, #28]	; (8007844 <FLASH_Program_Word+0x40>)
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	4a06      	ldr	r2, [pc, #24]	; (8007844 <FLASH_Program_Word+0x40>)
 800782c:	f043 0301 	orr.w	r3, r3, #1
 8007830:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	601a      	str	r2, [r3, #0]
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40023c00 	.word	0x40023c00

08007848 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007854:	4b0d      	ldr	r3, [pc, #52]	; (800788c <FLASH_Program_HalfWord+0x44>)
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	4a0c      	ldr	r2, [pc, #48]	; (800788c <FLASH_Program_HalfWord+0x44>)
 800785a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007860:	4b0a      	ldr	r3, [pc, #40]	; (800788c <FLASH_Program_HalfWord+0x44>)
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	4a09      	ldr	r2, [pc, #36]	; (800788c <FLASH_Program_HalfWord+0x44>)
 8007866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800786a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800786c:	4b07      	ldr	r3, [pc, #28]	; (800788c <FLASH_Program_HalfWord+0x44>)
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	4a06      	ldr	r2, [pc, #24]	; (800788c <FLASH_Program_HalfWord+0x44>)
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	887a      	ldrh	r2, [r7, #2]
 800787c:	801a      	strh	r2, [r3, #0]
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40023c00 	.word	0x40023c00

08007890 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800789c:	4b0c      	ldr	r3, [pc, #48]	; (80078d0 <FLASH_Program_Byte+0x40>)
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	4a0b      	ldr	r2, [pc, #44]	; (80078d0 <FLASH_Program_Byte+0x40>)
 80078a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80078a8:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <FLASH_Program_Byte+0x40>)
 80078aa:	4a09      	ldr	r2, [pc, #36]	; (80078d0 <FLASH_Program_Byte+0x40>)
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <FLASH_Program_Byte+0x40>)
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	4a06      	ldr	r2, [pc, #24]	; (80078d0 <FLASH_Program_Byte+0x40>)
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	78fa      	ldrb	r2, [r7, #3]
 80078c0:	701a      	strb	r2, [r3, #0]
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40023c00 	.word	0x40023c00

080078d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80078d8:	4b27      	ldr	r3, [pc, #156]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80078e4:	4b25      	ldr	r3, [pc, #148]	; (800797c <FLASH_SetErrorCode+0xa8>)
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f043 0310 	orr.w	r3, r3, #16
 80078ec:	4a23      	ldr	r2, [pc, #140]	; (800797c <FLASH_SetErrorCode+0xa8>)
 80078ee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80078f0:	4b21      	ldr	r3, [pc, #132]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 80078f2:	2210      	movs	r2, #16
 80078f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80078f6:	4b20      	ldr	r3, [pc, #128]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007902:	4b1e      	ldr	r3, [pc, #120]	; (800797c <FLASH_SetErrorCode+0xa8>)
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f043 0308 	orr.w	r3, r3, #8
 800790a:	4a1c      	ldr	r2, [pc, #112]	; (800797c <FLASH_SetErrorCode+0xa8>)
 800790c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800790e:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 8007910:	2220      	movs	r2, #32
 8007912:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007914:	4b18      	ldr	r3, [pc, #96]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d008      	beq.n	8007932 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007920:	4b16      	ldr	r3, [pc, #88]	; (800797c <FLASH_SetErrorCode+0xa8>)
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f043 0304 	orr.w	r3, r3, #4
 8007928:	4a14      	ldr	r2, [pc, #80]	; (800797c <FLASH_SetErrorCode+0xa8>)
 800792a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800792c:	4b12      	ldr	r3, [pc, #72]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007932:	4b11      	ldr	r3, [pc, #68]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793a:	2b00      	cmp	r3, #0
 800793c:	d008      	beq.n	8007950 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <FLASH_SetErrorCode+0xa8>)
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f043 0302 	orr.w	r3, r3, #2
 8007946:	4a0d      	ldr	r2, [pc, #52]	; (800797c <FLASH_SetErrorCode+0xa8>)
 8007948:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800794a:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 800794c:	2280      	movs	r2, #128	; 0x80
 800794e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d008      	beq.n	800796e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800795c:	4b07      	ldr	r3, [pc, #28]	; (800797c <FLASH_SetErrorCode+0xa8>)
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f043 0320 	orr.w	r3, r3, #32
 8007964:	4a05      	ldr	r2, [pc, #20]	; (800797c <FLASH_SetErrorCode+0xa8>)
 8007966:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007968:	4b03      	ldr	r3, [pc, #12]	; (8007978 <FLASH_SetErrorCode+0xa4>)
 800796a:	2202      	movs	r2, #2
 800796c:	60da      	str	r2, [r3, #12]
  }
}
 800796e:	bf00      	nop
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40023c00 	.word	0x40023c00
 800797c:	2000162c 	.word	0x2000162c

08007980 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007992:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <HAL_FLASHEx_Erase+0xd8>)
 8007994:	7e1b      	ldrb	r3, [r3, #24]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_FLASHEx_Erase+0x1e>
 800799a:	2302      	movs	r3, #2
 800799c:	e058      	b.n	8007a50 <HAL_FLASHEx_Erase+0xd0>
 800799e:	4b2e      	ldr	r3, [pc, #184]	; (8007a58 <HAL_FLASHEx_Erase+0xd8>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079a8:	f7ff feba 	bl	8007720 <FLASH_WaitForLastOperation>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d148      	bne.n	8007a48 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	f04f 32ff 	mov.w	r2, #4294967295
 80079bc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d115      	bne.n	80079f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f000 f844 	bl	8007a60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079dc:	f7ff fea0 	bl	8007720 <FLASH_WaitForLastOperation>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80079e4:	4b1d      	ldr	r3, [pc, #116]	; (8007a5c <HAL_FLASHEx_Erase+0xdc>)
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <HAL_FLASHEx_Erase+0xdc>)
 80079ea:	f023 0304 	bic.w	r3, r3, #4
 80079ee:	6113      	str	r3, [r2, #16]
 80079f0:	e028      	b.n	8007a44 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	60bb      	str	r3, [r7, #8]
 80079f8:	e01c      	b.n	8007a34 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	4619      	mov	r1, r3
 8007a02:	68b8      	ldr	r0, [r7, #8]
 8007a04:	f000 f850 	bl	8007aa8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a0c:	f7ff fe88 	bl	8007720 <FLASH_WaitForLastOperation>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <HAL_FLASHEx_Erase+0xdc>)
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	4a10      	ldr	r2, [pc, #64]	; (8007a5c <HAL_FLASHEx_Erase+0xdc>)
 8007a1a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007a1e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	601a      	str	r2, [r3, #0]
          break;
 8007a2c:	e00a      	b.n	8007a44 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	3301      	adds	r3, #1
 8007a32:	60bb      	str	r3, [r7, #8]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d3da      	bcc.n	80079fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007a44:	f000 f878 	bl	8007b38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a48:	4b03      	ldr	r3, [pc, #12]	; (8007a58 <HAL_FLASHEx_Erase+0xd8>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	761a      	strb	r2, [r3, #24]

  return status;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	2000162c 	.word	0x2000162c
 8007a5c:	40023c00 	.word	0x40023c00

08007a60 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a6c:	4b0d      	ldr	r3, [pc, #52]	; (8007aa4 <FLASH_MassErase+0x44>)
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	4a0c      	ldr	r2, [pc, #48]	; (8007aa4 <FLASH_MassErase+0x44>)
 8007a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <FLASH_MassErase+0x44>)
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	4a09      	ldr	r2, [pc, #36]	; (8007aa4 <FLASH_MassErase+0x44>)
 8007a7e:	f043 0304 	orr.w	r3, r3, #4
 8007a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007a84:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <FLASH_MassErase+0x44>)
 8007a86:	691a      	ldr	r2, [r3, #16]
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	4a05      	ldr	r2, [pc, #20]	; (8007aa4 <FLASH_MassErase+0x44>)
 8007a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a94:	6113      	str	r3, [r2, #16]
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	40023c00 	.word	0x40023c00

08007aa8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d102      	bne.n	8007ac4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e010      	b.n	8007ae6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d103      	bne.n	8007ad2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	e009      	b.n	8007ae6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d103      	bne.n	8007ae0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	e002      	b.n	8007ae6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007ae0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007ae4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ae6:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007af2:	4b10      	ldr	r3, [pc, #64]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	490f      	ldr	r1, [pc, #60]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007afe:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	4a0c      	ldr	r2, [pc, #48]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007b04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007b08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007b0a:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4313      	orrs	r3, r2
 8007b14:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007b16:	f043 0302 	orr.w	r3, r3, #2
 8007b1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007b1c:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	4a04      	ldr	r2, [pc, #16]	; (8007b34 <FLASH_Erase_Sector+0x8c>)
 8007b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b26:	6113      	str	r3, [r2, #16]
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	40023c00 	.word	0x40023c00

08007b38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007b3c:	4b20      	ldr	r3, [pc, #128]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d017      	beq.n	8007b78 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007b48:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b52:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007b54:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a19      	ldr	r2, [pc, #100]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a16      	ldr	r2, [pc, #88]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b6a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007b6c:	4b14      	ldr	r3, [pc, #80]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b76:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007b78:	4b11      	ldr	r3, [pc, #68]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d017      	beq.n	8007bb4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a0d      	ldr	r2, [pc, #52]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b8e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a07      	ldr	r2, [pc, #28]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ba6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ba8:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a04      	ldr	r2, [pc, #16]	; (8007bc0 <FLASH_FlushCaches+0x88>)
 8007bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bb2:	6013      	str	r3, [r2, #0]
  }
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40023c00 	.word	0x40023c00

08007bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b089      	sub	sp, #36	; 0x24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	e16b      	b.n	8007eb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007be0:	2201      	movs	r2, #1
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	f040 815a 	bne.w	8007eb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d005      	beq.n	8007c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d130      	bne.n	8007c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	2203      	movs	r2, #3
 8007c22:	fa02 f303 	lsl.w	r3, r2, r3
 8007c26:	43db      	mvns	r3, r3
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	091b      	lsrs	r3, r3, #4
 8007c62:	f003 0201 	and.w	r2, r3, #1
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d017      	beq.n	8007cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	2203      	movs	r2, #3
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	43db      	mvns	r3, r3
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d123      	bne.n	8007d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	08da      	lsrs	r2, r3, #3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3208      	adds	r2, #8
 8007cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	220f      	movs	r2, #15
 8007cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	691a      	ldr	r2, [r3, #16]
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	08da      	lsrs	r2, r3, #3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3208      	adds	r2, #8
 8007d02:	69b9      	ldr	r1, [r7, #24]
 8007d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	2203      	movs	r2, #3
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	43db      	mvns	r3, r3
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f003 0203 	and.w	r2, r3, #3
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80b4 	beq.w	8007eb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	4b60      	ldr	r3, [pc, #384]	; (8007ed0 <HAL_GPIO_Init+0x30c>)
 8007d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d52:	4a5f      	ldr	r2, [pc, #380]	; (8007ed0 <HAL_GPIO_Init+0x30c>)
 8007d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d58:	6453      	str	r3, [r2, #68]	; 0x44
 8007d5a:	4b5d      	ldr	r3, [pc, #372]	; (8007ed0 <HAL_GPIO_Init+0x30c>)
 8007d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d66:	4a5b      	ldr	r2, [pc, #364]	; (8007ed4 <HAL_GPIO_Init+0x310>)
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	089b      	lsrs	r3, r3, #2
 8007d6c:	3302      	adds	r3, #2
 8007d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	220f      	movs	r2, #15
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	43db      	mvns	r3, r3
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	4013      	ands	r3, r2
 8007d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a52      	ldr	r2, [pc, #328]	; (8007ed8 <HAL_GPIO_Init+0x314>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d02b      	beq.n	8007dea <HAL_GPIO_Init+0x226>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a51      	ldr	r2, [pc, #324]	; (8007edc <HAL_GPIO_Init+0x318>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d025      	beq.n	8007de6 <HAL_GPIO_Init+0x222>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a50      	ldr	r2, [pc, #320]	; (8007ee0 <HAL_GPIO_Init+0x31c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d01f      	beq.n	8007de2 <HAL_GPIO_Init+0x21e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a4f      	ldr	r2, [pc, #316]	; (8007ee4 <HAL_GPIO_Init+0x320>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d019      	beq.n	8007dde <HAL_GPIO_Init+0x21a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a4e      	ldr	r2, [pc, #312]	; (8007ee8 <HAL_GPIO_Init+0x324>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d013      	beq.n	8007dda <HAL_GPIO_Init+0x216>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a4d      	ldr	r2, [pc, #308]	; (8007eec <HAL_GPIO_Init+0x328>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00d      	beq.n	8007dd6 <HAL_GPIO_Init+0x212>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a4c      	ldr	r2, [pc, #304]	; (8007ef0 <HAL_GPIO_Init+0x32c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d007      	beq.n	8007dd2 <HAL_GPIO_Init+0x20e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a4b      	ldr	r2, [pc, #300]	; (8007ef4 <HAL_GPIO_Init+0x330>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <HAL_GPIO_Init+0x20a>
 8007dca:	2307      	movs	r3, #7
 8007dcc:	e00e      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007dce:	2308      	movs	r3, #8
 8007dd0:	e00c      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007dd2:	2306      	movs	r3, #6
 8007dd4:	e00a      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007dd6:	2305      	movs	r3, #5
 8007dd8:	e008      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007dda:	2304      	movs	r3, #4
 8007ddc:	e006      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007dde:	2303      	movs	r3, #3
 8007de0:	e004      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e002      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <HAL_GPIO_Init+0x228>
 8007dea:	2300      	movs	r3, #0
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	f002 0203 	and.w	r2, r2, #3
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	4093      	lsls	r3, r2
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007dfc:	4935      	ldr	r1, [pc, #212]	; (8007ed4 <HAL_GPIO_Init+0x310>)
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	089b      	lsrs	r3, r3, #2
 8007e02:	3302      	adds	r3, #2
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e0a:	4b3b      	ldr	r3, [pc, #236]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	43db      	mvns	r3, r3
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	4013      	ands	r3, r2
 8007e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e2e:	4a32      	ldr	r2, [pc, #200]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e34:	4b30      	ldr	r3, [pc, #192]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	4013      	ands	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e58:	4a27      	ldr	r2, [pc, #156]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007e5e:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	43db      	mvns	r3, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e82:	4a1d      	ldr	r2, [pc, #116]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e88:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	43db      	mvns	r3, r3
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	4013      	ands	r3, r2
 8007e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007eac:	4a12      	ldr	r2, [pc, #72]	; (8007ef8 <HAL_GPIO_Init+0x334>)
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b0f      	cmp	r3, #15
 8007ebc:	f67f ae90 	bls.w	8007be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	3724      	adds	r7, #36	; 0x24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	40013800 	.word	0x40013800
 8007ed8:	40020000 	.word	0x40020000
 8007edc:	40020400 	.word	0x40020400
 8007ee0:	40020800 	.word	0x40020800
 8007ee4:	40020c00 	.word	0x40020c00
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	40021400 	.word	0x40021400
 8007ef0:	40021800 	.word	0x40021800
 8007ef4:	40021c00 	.word	0x40021c00
 8007ef8:	40013c00 	.word	0x40013c00

08007efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	887b      	ldrh	r3, [r7, #2]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f14:	2301      	movs	r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]
 8007f18:	e001      	b.n	8007f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	807b      	strh	r3, [r7, #2]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f3c:	787b      	ldrb	r3, [r7, #1]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f42:	887a      	ldrh	r2, [r7, #2]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f48:	e003      	b.n	8007f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f4a:	887b      	ldrh	r3, [r7, #2]
 8007f4c:	041a      	lsls	r2, r3, #16
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	619a      	str	r2, [r3, #24]
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
	...

08007f60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007f6a:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f6c:	695a      	ldr	r2, [r3, #20]
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	4013      	ands	r3, r2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d006      	beq.n	8007f84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f76:	4a05      	ldr	r2, [pc, #20]	; (8007f8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007f78:	88fb      	ldrh	r3, [r7, #6]
 8007f7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7f9 f836 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40013c00 	.word	0x40013c00

08007f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e267      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d075      	beq.n	800809a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fae:	4b88      	ldr	r3, [pc, #544]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f003 030c 	and.w	r3, r3, #12
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fba:	4b85      	ldr	r3, [pc, #532]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	d112      	bne.n	8007fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fc6:	4b82      	ldr	r3, [pc, #520]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fd2:	d10b      	bne.n	8007fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd4:	4b7e      	ldr	r3, [pc, #504]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d05b      	beq.n	8008098 <HAL_RCC_OscConfig+0x108>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d157      	bne.n	8008098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e242      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff4:	d106      	bne.n	8008004 <HAL_RCC_OscConfig+0x74>
 8007ff6:	4b76      	ldr	r3, [pc, #472]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a75      	ldr	r2, [pc, #468]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8007ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	e01d      	b.n	8008040 <HAL_RCC_OscConfig+0xb0>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800800c:	d10c      	bne.n	8008028 <HAL_RCC_OscConfig+0x98>
 800800e:	4b70      	ldr	r3, [pc, #448]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a6f      	ldr	r2, [pc, #444]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8008014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	4b6d      	ldr	r3, [pc, #436]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a6c      	ldr	r2, [pc, #432]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8008020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e00b      	b.n	8008040 <HAL_RCC_OscConfig+0xb0>
 8008028:	4b69      	ldr	r3, [pc, #420]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a68      	ldr	r2, [pc, #416]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 800802e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4b66      	ldr	r3, [pc, #408]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a65      	ldr	r2, [pc, #404]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 800803a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800803e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d013      	beq.n	8008070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008048:	f7fd fba4 	bl	8005794 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008050:	f7fd fba0 	bl	8005794 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b64      	cmp	r3, #100	; 0x64
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e207      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008062:	4b5b      	ldr	r3, [pc, #364]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0xc0>
 800806e:	e014      	b.n	800809a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008070:	f7fd fb90 	bl	8005794 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008078:	f7fd fb8c 	bl	8005794 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b64      	cmp	r3, #100	; 0x64
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e1f3      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800808a:	4b51      	ldr	r3, [pc, #324]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0xe8>
 8008096:	e000      	b.n	800809a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d063      	beq.n	800816e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080a6:	4b4a      	ldr	r3, [pc, #296]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f003 030c 	and.w	r3, r3, #12
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080b2:	4b47      	ldr	r3, [pc, #284]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	d11c      	bne.n	80080f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080be:	4b44      	ldr	r3, [pc, #272]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d116      	bne.n	80080f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080ca:	4b41      	ldr	r3, [pc, #260]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_RCC_OscConfig+0x152>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d001      	beq.n	80080e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e1c7      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e2:	4b3b      	ldr	r3, [pc, #236]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	4937      	ldr	r1, [pc, #220]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080f6:	e03a      	b.n	800816e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d020      	beq.n	8008142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008100:	4b34      	ldr	r3, [pc, #208]	; (80081d4 <HAL_RCC_OscConfig+0x244>)
 8008102:	2201      	movs	r2, #1
 8008104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008106:	f7fd fb45 	bl	8005794 <HAL_GetTick>
 800810a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800810e:	f7fd fb41 	bl	8005794 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e1a8      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008120:	4b2b      	ldr	r3, [pc, #172]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812c:	4b28      	ldr	r3, [pc, #160]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	00db      	lsls	r3, r3, #3
 800813a:	4925      	ldr	r1, [pc, #148]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 800813c:	4313      	orrs	r3, r2
 800813e:	600b      	str	r3, [r1, #0]
 8008140:	e015      	b.n	800816e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008142:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <HAL_RCC_OscConfig+0x244>)
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008148:	f7fd fb24 	bl	8005794 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008150:	f7fd fb20 	bl	8005794 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e187      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008162:	4b1b      	ldr	r3, [pc, #108]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1f0      	bne.n	8008150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0308 	and.w	r3, r3, #8
 8008176:	2b00      	cmp	r3, #0
 8008178:	d036      	beq.n	80081e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008182:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <HAL_RCC_OscConfig+0x248>)
 8008184:	2201      	movs	r2, #1
 8008186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008188:	f7fd fb04 	bl	8005794 <HAL_GetTick>
 800818c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800818e:	e008      	b.n	80081a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008190:	f7fd fb00 	bl	8005794 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e167      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081a2:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <HAL_RCC_OscConfig+0x240>)
 80081a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0f0      	beq.n	8008190 <HAL_RCC_OscConfig+0x200>
 80081ae:	e01b      	b.n	80081e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081b0:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <HAL_RCC_OscConfig+0x248>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081b6:	f7fd faed 	bl	8005794 <HAL_GetTick>
 80081ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081bc:	e00e      	b.n	80081dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081be:	f7fd fae9 	bl	8005794 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d907      	bls.n	80081dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e150      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
 80081d0:	40023800 	.word	0x40023800
 80081d4:	42470000 	.word	0x42470000
 80081d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081dc:	4b88      	ldr	r3, [pc, #544]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80081de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1ea      	bne.n	80081be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 8097 	beq.w	8008324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081fa:	4b81      	ldr	r3, [pc, #516]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10f      	bne.n	8008226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008206:	2300      	movs	r3, #0
 8008208:	60bb      	str	r3, [r7, #8]
 800820a:	4b7d      	ldr	r3, [pc, #500]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	4a7c      	ldr	r2, [pc, #496]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008214:	6413      	str	r3, [r2, #64]	; 0x40
 8008216:	4b7a      	ldr	r3, [pc, #488]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821e:	60bb      	str	r3, [r7, #8]
 8008220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008222:	2301      	movs	r3, #1
 8008224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008226:	4b77      	ldr	r3, [pc, #476]	; (8008404 <HAL_RCC_OscConfig+0x474>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822e:	2b00      	cmp	r3, #0
 8008230:	d118      	bne.n	8008264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008232:	4b74      	ldr	r3, [pc, #464]	; (8008404 <HAL_RCC_OscConfig+0x474>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a73      	ldr	r2, [pc, #460]	; (8008404 <HAL_RCC_OscConfig+0x474>)
 8008238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800823c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800823e:	f7fd faa9 	bl	8005794 <HAL_GetTick>
 8008242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008244:	e008      	b.n	8008258 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008246:	f7fd faa5 	bl	8005794 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d901      	bls.n	8008258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e10c      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008258:	4b6a      	ldr	r3, [pc, #424]	; (8008404 <HAL_RCC_OscConfig+0x474>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0f0      	beq.n	8008246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d106      	bne.n	800827a <HAL_RCC_OscConfig+0x2ea>
 800826c:	4b64      	ldr	r3, [pc, #400]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	4a63      	ldr	r2, [pc, #396]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	6713      	str	r3, [r2, #112]	; 0x70
 8008278:	e01c      	b.n	80082b4 <HAL_RCC_OscConfig+0x324>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b05      	cmp	r3, #5
 8008280:	d10c      	bne.n	800829c <HAL_RCC_OscConfig+0x30c>
 8008282:	4b5f      	ldr	r3, [pc, #380]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	4a5e      	ldr	r2, [pc, #376]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008288:	f043 0304 	orr.w	r3, r3, #4
 800828c:	6713      	str	r3, [r2, #112]	; 0x70
 800828e:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	4a5b      	ldr	r2, [pc, #364]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	6713      	str	r3, [r2, #112]	; 0x70
 800829a:	e00b      	b.n	80082b4 <HAL_RCC_OscConfig+0x324>
 800829c:	4b58      	ldr	r3, [pc, #352]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 800829e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a0:	4a57      	ldr	r2, [pc, #348]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	6713      	str	r3, [r2, #112]	; 0x70
 80082a8:	4b55      	ldr	r3, [pc, #340]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ac:	4a54      	ldr	r2, [pc, #336]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80082ae:	f023 0304 	bic.w	r3, r3, #4
 80082b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d015      	beq.n	80082e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082bc:	f7fd fa6a 	bl	8005794 <HAL_GetTick>
 80082c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082c2:	e00a      	b.n	80082da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082c4:	f7fd fa66 	bl	8005794 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e0cb      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082da:	4b49      	ldr	r3, [pc, #292]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80082dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0ee      	beq.n	80082c4 <HAL_RCC_OscConfig+0x334>
 80082e6:	e014      	b.n	8008312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082e8:	f7fd fa54 	bl	8005794 <HAL_GetTick>
 80082ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ee:	e00a      	b.n	8008306 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082f0:	f7fd fa50 	bl	8005794 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fe:	4293      	cmp	r3, r2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e0b5      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008306:	4b3e      	ldr	r3, [pc, #248]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1ee      	bne.n	80082f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d105      	bne.n	8008324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008318:	4b39      	ldr	r3, [pc, #228]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 800831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831c:	4a38      	ldr	r2, [pc, #224]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 800831e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 80a1 	beq.w	8008470 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800832e:	4b34      	ldr	r3, [pc, #208]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 030c 	and.w	r3, r3, #12
 8008336:	2b08      	cmp	r3, #8
 8008338:	d05c      	beq.n	80083f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d141      	bne.n	80083c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008342:	4b31      	ldr	r3, [pc, #196]	; (8008408 <HAL_RCC_OscConfig+0x478>)
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008348:	f7fd fa24 	bl	8005794 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008350:	f7fd fa20 	bl	8005794 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e087      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008362:	4b27      	ldr	r3, [pc, #156]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f0      	bne.n	8008350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69da      	ldr	r2, [r3, #28]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	019b      	lsls	r3, r3, #6
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	085b      	lsrs	r3, r3, #1
 8008386:	3b01      	subs	r3, #1
 8008388:	041b      	lsls	r3, r3, #16
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	061b      	lsls	r3, r3, #24
 8008392:	491b      	ldr	r1, [pc, #108]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 8008394:	4313      	orrs	r3, r2
 8008396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008398:	4b1b      	ldr	r3, [pc, #108]	; (8008408 <HAL_RCC_OscConfig+0x478>)
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800839e:	f7fd f9f9 	bl	8005794 <HAL_GetTick>
 80083a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083a6:	f7fd f9f5 	bl	8005794 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e05c      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b8:	4b11      	ldr	r3, [pc, #68]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCC_OscConfig+0x416>
 80083c4:	e054      	b.n	8008470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083c6:	4b10      	ldr	r3, [pc, #64]	; (8008408 <HAL_RCC_OscConfig+0x478>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083cc:	f7fd f9e2 	bl	8005794 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083d2:	e008      	b.n	80083e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083d4:	f7fd f9de 	bl	8005794 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e045      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083e6:	4b06      	ldr	r3, [pc, #24]	; (8008400 <HAL_RCC_OscConfig+0x470>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f0      	bne.n	80083d4 <HAL_RCC_OscConfig+0x444>
 80083f2:	e03d      	b.n	8008470 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d107      	bne.n	800840c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e038      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
 8008400:	40023800 	.word	0x40023800
 8008404:	40007000 	.word	0x40007000
 8008408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800840c:	4b1b      	ldr	r3, [pc, #108]	; (800847c <HAL_RCC_OscConfig+0x4ec>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d028      	beq.n	800846c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008424:	429a      	cmp	r2, r3
 8008426:	d121      	bne.n	800846c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008432:	429a      	cmp	r2, r3
 8008434:	d11a      	bne.n	800846c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800843c:	4013      	ands	r3, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008444:	4293      	cmp	r3, r2
 8008446:	d111      	bne.n	800846c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008452:	085b      	lsrs	r3, r3, #1
 8008454:	3b01      	subs	r3, #1
 8008456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008458:	429a      	cmp	r2, r3
 800845a:	d107      	bne.n	800846c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008468:	429a      	cmp	r2, r3
 800846a:	d001      	beq.n	8008470 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	40023800 	.word	0x40023800

08008480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0cc      	b.n	800862e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008494:	4b68      	ldr	r3, [pc, #416]	; (8008638 <HAL_RCC_ClockConfig+0x1b8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0307 	and.w	r3, r3, #7
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d90c      	bls.n	80084bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084a2:	4b65      	ldr	r3, [pc, #404]	; (8008638 <HAL_RCC_ClockConfig+0x1b8>)
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	b2d2      	uxtb	r2, r2
 80084a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084aa:	4b63      	ldr	r3, [pc, #396]	; (8008638 <HAL_RCC_ClockConfig+0x1b8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d001      	beq.n	80084bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e0b8      	b.n	800862e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d020      	beq.n	800850a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084d4:	4b59      	ldr	r3, [pc, #356]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	4a58      	ldr	r2, [pc, #352]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80084da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0308 	and.w	r3, r3, #8
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d005      	beq.n	80084f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084ec:	4b53      	ldr	r3, [pc, #332]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	4a52      	ldr	r2, [pc, #328]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80084f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084f8:	4b50      	ldr	r3, [pc, #320]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	494d      	ldr	r1, [pc, #308]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	4313      	orrs	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d044      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d107      	bne.n	800852e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800851e:	4b47      	ldr	r3, [pc, #284]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d119      	bne.n	800855e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e07f      	b.n	800862e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d003      	beq.n	800853e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800853a:	2b03      	cmp	r3, #3
 800853c:	d107      	bne.n	800854e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800853e:	4b3f      	ldr	r3, [pc, #252]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d109      	bne.n	800855e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e06f      	b.n	800862e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800854e:	4b3b      	ldr	r3, [pc, #236]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e067      	b.n	800862e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800855e:	4b37      	ldr	r3, [pc, #220]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f023 0203 	bic.w	r2, r3, #3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	4934      	ldr	r1, [pc, #208]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 800856c:	4313      	orrs	r3, r2
 800856e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008570:	f7fd f910 	bl	8005794 <HAL_GetTick>
 8008574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008576:	e00a      	b.n	800858e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008578:	f7fd f90c 	bl	8005794 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	f241 3288 	movw	r2, #5000	; 0x1388
 8008586:	4293      	cmp	r3, r2
 8008588:	d901      	bls.n	800858e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e04f      	b.n	800862e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800858e:	4b2b      	ldr	r3, [pc, #172]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 020c 	and.w	r2, r3, #12
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	429a      	cmp	r2, r3
 800859e:	d1eb      	bne.n	8008578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085a0:	4b25      	ldr	r3, [pc, #148]	; (8008638 <HAL_RCC_ClockConfig+0x1b8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d20c      	bcs.n	80085c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ae:	4b22      	ldr	r3, [pc, #136]	; (8008638 <HAL_RCC_ClockConfig+0x1b8>)
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b6:	4b20      	ldr	r3, [pc, #128]	; (8008638 <HAL_RCC_ClockConfig+0x1b8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d001      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e032      	b.n	800862e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d008      	beq.n	80085e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085d4:	4b19      	ldr	r3, [pc, #100]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	4916      	ldr	r1, [pc, #88]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d009      	beq.n	8008606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085f2:	4b12      	ldr	r3, [pc, #72]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	490e      	ldr	r1, [pc, #56]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 8008602:	4313      	orrs	r3, r2
 8008604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008606:	f000 f821 	bl	800864c <HAL_RCC_GetSysClockFreq>
 800860a:	4602      	mov	r2, r0
 800860c:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_RCC_ClockConfig+0x1bc>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	091b      	lsrs	r3, r3, #4
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	490a      	ldr	r1, [pc, #40]	; (8008640 <HAL_RCC_ClockConfig+0x1c0>)
 8008618:	5ccb      	ldrb	r3, [r1, r3]
 800861a:	fa22 f303 	lsr.w	r3, r2, r3
 800861e:	4a09      	ldr	r2, [pc, #36]	; (8008644 <HAL_RCC_ClockConfig+0x1c4>)
 8008620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <HAL_RCC_ClockConfig+0x1c8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f7fd f884 	bl	8005734 <HAL_InitTick>

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40023c00 	.word	0x40023c00
 800863c:	40023800 	.word	0x40023800
 8008640:	08011664 	.word	0x08011664
 8008644:	200002dc 	.word	0x200002dc
 8008648:	200002e0 	.word	0x200002e0

0800864c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800864c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008650:	b094      	sub	sp, #80	; 0x50
 8008652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	647b      	str	r3, [r7, #68]	; 0x44
 8008658:	2300      	movs	r3, #0
 800865a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800865c:	2300      	movs	r3, #0
 800865e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008664:	4b79      	ldr	r3, [pc, #484]	; (800884c <HAL_RCC_GetSysClockFreq+0x200>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f003 030c 	and.w	r3, r3, #12
 800866c:	2b08      	cmp	r3, #8
 800866e:	d00d      	beq.n	800868c <HAL_RCC_GetSysClockFreq+0x40>
 8008670:	2b08      	cmp	r3, #8
 8008672:	f200 80e1 	bhi.w	8008838 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <HAL_RCC_GetSysClockFreq+0x34>
 800867a:	2b04      	cmp	r3, #4
 800867c:	d003      	beq.n	8008686 <HAL_RCC_GetSysClockFreq+0x3a>
 800867e:	e0db      	b.n	8008838 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008680:	4b73      	ldr	r3, [pc, #460]	; (8008850 <HAL_RCC_GetSysClockFreq+0x204>)
 8008682:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008684:	e0db      	b.n	800883e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008686:	4b73      	ldr	r3, [pc, #460]	; (8008854 <HAL_RCC_GetSysClockFreq+0x208>)
 8008688:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800868a:	e0d8      	b.n	800883e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800868c:	4b6f      	ldr	r3, [pc, #444]	; (800884c <HAL_RCC_GetSysClockFreq+0x200>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008694:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008696:	4b6d      	ldr	r3, [pc, #436]	; (800884c <HAL_RCC_GetSysClockFreq+0x200>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d063      	beq.n	800876a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086a2:	4b6a      	ldr	r3, [pc, #424]	; (800884c <HAL_RCC_GetSysClockFreq+0x200>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	099b      	lsrs	r3, r3, #6
 80086a8:	2200      	movs	r2, #0
 80086aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b4:	633b      	str	r3, [r7, #48]	; 0x30
 80086b6:	2300      	movs	r3, #0
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80086be:	4622      	mov	r2, r4
 80086c0:	462b      	mov	r3, r5
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f04f 0100 	mov.w	r1, #0
 80086ca:	0159      	lsls	r1, r3, #5
 80086cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086d0:	0150      	lsls	r0, r2, #5
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4621      	mov	r1, r4
 80086d8:	1a51      	subs	r1, r2, r1
 80086da:	6139      	str	r1, [r7, #16]
 80086dc:	4629      	mov	r1, r5
 80086de:	eb63 0301 	sbc.w	r3, r3, r1
 80086e2:	617b      	str	r3, [r7, #20]
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	f04f 0300 	mov.w	r3, #0
 80086ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086f0:	4659      	mov	r1, fp
 80086f2:	018b      	lsls	r3, r1, #6
 80086f4:	4651      	mov	r1, sl
 80086f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086fa:	4651      	mov	r1, sl
 80086fc:	018a      	lsls	r2, r1, #6
 80086fe:	4651      	mov	r1, sl
 8008700:	ebb2 0801 	subs.w	r8, r2, r1
 8008704:	4659      	mov	r1, fp
 8008706:	eb63 0901 	sbc.w	r9, r3, r1
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800871a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800871e:	4690      	mov	r8, r2
 8008720:	4699      	mov	r9, r3
 8008722:	4623      	mov	r3, r4
 8008724:	eb18 0303 	adds.w	r3, r8, r3
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	462b      	mov	r3, r5
 800872c:	eb49 0303 	adc.w	r3, r9, r3
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	f04f 0200 	mov.w	r2, #0
 8008736:	f04f 0300 	mov.w	r3, #0
 800873a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800873e:	4629      	mov	r1, r5
 8008740:	024b      	lsls	r3, r1, #9
 8008742:	4621      	mov	r1, r4
 8008744:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008748:	4621      	mov	r1, r4
 800874a:	024a      	lsls	r2, r1, #9
 800874c:	4610      	mov	r0, r2
 800874e:	4619      	mov	r1, r3
 8008750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008752:	2200      	movs	r2, #0
 8008754:	62bb      	str	r3, [r7, #40]	; 0x28
 8008756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800875c:	f7f8 fa94 	bl	8000c88 <__aeabi_uldivmod>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4613      	mov	r3, r2
 8008766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008768:	e058      	b.n	800881c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800876a:	4b38      	ldr	r3, [pc, #224]	; (800884c <HAL_RCC_GetSysClockFreq+0x200>)
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	099b      	lsrs	r3, r3, #6
 8008770:	2200      	movs	r2, #0
 8008772:	4618      	mov	r0, r3
 8008774:	4611      	mov	r1, r2
 8008776:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800877a:	623b      	str	r3, [r7, #32]
 800877c:	2300      	movs	r3, #0
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
 8008780:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008784:	4642      	mov	r2, r8
 8008786:	464b      	mov	r3, r9
 8008788:	f04f 0000 	mov.w	r0, #0
 800878c:	f04f 0100 	mov.w	r1, #0
 8008790:	0159      	lsls	r1, r3, #5
 8008792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008796:	0150      	lsls	r0, r2, #5
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4641      	mov	r1, r8
 800879e:	ebb2 0a01 	subs.w	sl, r2, r1
 80087a2:	4649      	mov	r1, r9
 80087a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80087a8:	f04f 0200 	mov.w	r2, #0
 80087ac:	f04f 0300 	mov.w	r3, #0
 80087b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80087b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80087b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80087bc:	ebb2 040a 	subs.w	r4, r2, sl
 80087c0:	eb63 050b 	sbc.w	r5, r3, fp
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	00eb      	lsls	r3, r5, #3
 80087ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087d2:	00e2      	lsls	r2, r4, #3
 80087d4:	4614      	mov	r4, r2
 80087d6:	461d      	mov	r5, r3
 80087d8:	4643      	mov	r3, r8
 80087da:	18e3      	adds	r3, r4, r3
 80087dc:	603b      	str	r3, [r7, #0]
 80087de:	464b      	mov	r3, r9
 80087e0:	eb45 0303 	adc.w	r3, r5, r3
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	f04f 0300 	mov.w	r3, #0
 80087ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087f2:	4629      	mov	r1, r5
 80087f4:	028b      	lsls	r3, r1, #10
 80087f6:	4621      	mov	r1, r4
 80087f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087fc:	4621      	mov	r1, r4
 80087fe:	028a      	lsls	r2, r1, #10
 8008800:	4610      	mov	r0, r2
 8008802:	4619      	mov	r1, r3
 8008804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008806:	2200      	movs	r2, #0
 8008808:	61bb      	str	r3, [r7, #24]
 800880a:	61fa      	str	r2, [r7, #28]
 800880c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008810:	f7f8 fa3a 	bl	8000c88 <__aeabi_uldivmod>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4613      	mov	r3, r2
 800881a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800881c:	4b0b      	ldr	r3, [pc, #44]	; (800884c <HAL_RCC_GetSysClockFreq+0x200>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	0c1b      	lsrs	r3, r3, #16
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	3301      	adds	r3, #1
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800882c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800882e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008830:	fbb2 f3f3 	udiv	r3, r2, r3
 8008834:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008836:	e002      	b.n	800883e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <HAL_RCC_GetSysClockFreq+0x204>)
 800883a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800883c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800883e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008840:	4618      	mov	r0, r3
 8008842:	3750      	adds	r7, #80	; 0x50
 8008844:	46bd      	mov	sp, r7
 8008846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800884a:	bf00      	nop
 800884c:	40023800 	.word	0x40023800
 8008850:	00f42400 	.word	0x00f42400
 8008854:	007a1200 	.word	0x007a1200

08008858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800885c:	4b03      	ldr	r3, [pc, #12]	; (800886c <HAL_RCC_GetHCLKFreq+0x14>)
 800885e:	681b      	ldr	r3, [r3, #0]
}
 8008860:	4618      	mov	r0, r3
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	200002dc 	.word	0x200002dc

08008870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008874:	f7ff fff0 	bl	8008858 <HAL_RCC_GetHCLKFreq>
 8008878:	4602      	mov	r2, r0
 800887a:	4b05      	ldr	r3, [pc, #20]	; (8008890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	0a9b      	lsrs	r3, r3, #10
 8008880:	f003 0307 	and.w	r3, r3, #7
 8008884:	4903      	ldr	r1, [pc, #12]	; (8008894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008886:	5ccb      	ldrb	r3, [r1, r3]
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800888c:	4618      	mov	r0, r3
 800888e:	bd80      	pop	{r7, pc}
 8008890:	40023800 	.word	0x40023800
 8008894:	08011674 	.word	0x08011674

08008898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800889c:	f7ff ffdc 	bl	8008858 <HAL_RCC_GetHCLKFreq>
 80088a0:	4602      	mov	r2, r0
 80088a2:	4b05      	ldr	r3, [pc, #20]	; (80088b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	0b5b      	lsrs	r3, r3, #13
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	4903      	ldr	r1, [pc, #12]	; (80088bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80088ae:	5ccb      	ldrb	r3, [r1, r3]
 80088b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	40023800 	.word	0x40023800
 80088bc:	08011674 	.word	0x08011674

080088c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e041      	b.n	8008956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7fc fcee 	bl	80052c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f000 fc7a 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	d001      	beq.n	8008978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e04e      	b.n	8008a16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0201 	orr.w	r2, r2, #1
 800898e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a23      	ldr	r2, [pc, #140]	; (8008a24 <HAL_TIM_Base_Start_IT+0xc4>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d022      	beq.n	80089e0 <HAL_TIM_Base_Start_IT+0x80>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a2:	d01d      	beq.n	80089e0 <HAL_TIM_Base_Start_IT+0x80>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <HAL_TIM_Base_Start_IT+0xc8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d018      	beq.n	80089e0 <HAL_TIM_Base_Start_IT+0x80>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a1e      	ldr	r2, [pc, #120]	; (8008a2c <HAL_TIM_Base_Start_IT+0xcc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d013      	beq.n	80089e0 <HAL_TIM_Base_Start_IT+0x80>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a1c      	ldr	r2, [pc, #112]	; (8008a30 <HAL_TIM_Base_Start_IT+0xd0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d00e      	beq.n	80089e0 <HAL_TIM_Base_Start_IT+0x80>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a1b      	ldr	r2, [pc, #108]	; (8008a34 <HAL_TIM_Base_Start_IT+0xd4>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d009      	beq.n	80089e0 <HAL_TIM_Base_Start_IT+0x80>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a19      	ldr	r2, [pc, #100]	; (8008a38 <HAL_TIM_Base_Start_IT+0xd8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d004      	beq.n	80089e0 <HAL_TIM_Base_Start_IT+0x80>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a18      	ldr	r2, [pc, #96]	; (8008a3c <HAL_TIM_Base_Start_IT+0xdc>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d111      	bne.n	8008a04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b06      	cmp	r3, #6
 80089f0:	d010      	beq.n	8008a14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f042 0201 	orr.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a02:	e007      	b.n	8008a14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40010000 	.word	0x40010000
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	40000c00 	.word	0x40000c00
 8008a34:	40010400 	.word	0x40010400
 8008a38:	40014000 	.word	0x40014000
 8008a3c:	40001800 	.word	0x40001800

08008a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e041      	b.n	8008ad6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f839 	bl	8008ade <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f000 fbba 	bl	80091f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d109      	bne.n	8008b18 <HAL_TIM_PWM_Start+0x24>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	bf14      	ite	ne
 8008b10:	2301      	movne	r3, #1
 8008b12:	2300      	moveq	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	e022      	b.n	8008b5e <HAL_TIM_PWM_Start+0x6a>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d109      	bne.n	8008b32 <HAL_TIM_PWM_Start+0x3e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	bf14      	ite	ne
 8008b2a:	2301      	movne	r3, #1
 8008b2c:	2300      	moveq	r3, #0
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	e015      	b.n	8008b5e <HAL_TIM_PWM_Start+0x6a>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d109      	bne.n	8008b4c <HAL_TIM_PWM_Start+0x58>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	bf14      	ite	ne
 8008b44:	2301      	movne	r3, #1
 8008b46:	2300      	moveq	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	e008      	b.n	8008b5e <HAL_TIM_PWM_Start+0x6a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	bf14      	ite	ne
 8008b58:	2301      	movne	r3, #1
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e07c      	b.n	8008c60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <HAL_TIM_PWM_Start+0x82>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b74:	e013      	b.n	8008b9e <HAL_TIM_PWM_Start+0xaa>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_PWM_Start+0x92>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b84:	e00b      	b.n	8008b9e <HAL_TIM_PWM_Start+0xaa>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_PWM_Start+0xa2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b94:	e003      	b.n	8008b9e <HAL_TIM_PWM_Start+0xaa>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fe10 	bl	80097cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a2d      	ldr	r2, [pc, #180]	; (8008c68 <HAL_TIM_PWM_Start+0x174>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d004      	beq.n	8008bc0 <HAL_TIM_PWM_Start+0xcc>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a2c      	ldr	r2, [pc, #176]	; (8008c6c <HAL_TIM_PWM_Start+0x178>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d101      	bne.n	8008bc4 <HAL_TIM_PWM_Start+0xd0>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_TIM_PWM_Start+0xd2>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d007      	beq.n	8008bda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a22      	ldr	r2, [pc, #136]	; (8008c68 <HAL_TIM_PWM_Start+0x174>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d022      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x136>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bec:	d01d      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x136>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a1f      	ldr	r2, [pc, #124]	; (8008c70 <HAL_TIM_PWM_Start+0x17c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d018      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x136>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1d      	ldr	r2, [pc, #116]	; (8008c74 <HAL_TIM_PWM_Start+0x180>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x136>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a1c      	ldr	r2, [pc, #112]	; (8008c78 <HAL_TIM_PWM_Start+0x184>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00e      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x136>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <HAL_TIM_PWM_Start+0x178>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d009      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x136>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a18      	ldr	r2, [pc, #96]	; (8008c7c <HAL_TIM_PWM_Start+0x188>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d004      	beq.n	8008c2a <HAL_TIM_PWM_Start+0x136>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a16      	ldr	r2, [pc, #88]	; (8008c80 <HAL_TIM_PWM_Start+0x18c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d111      	bne.n	8008c4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b06      	cmp	r3, #6
 8008c3a:	d010      	beq.n	8008c5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c4c:	e007      	b.n	8008c5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0201 	orr.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40010000 	.word	0x40010000
 8008c6c:	40010400 	.word	0x40010400
 8008c70:	40000400 	.word	0x40000400
 8008c74:	40000800 	.word	0x40000800
 8008c78:	40000c00 	.word	0x40000c00
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40001800 	.word	0x40001800

08008c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d122      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d11b      	bne.n	8008ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0202 	mvn.w	r2, #2
 8008cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d003      	beq.n	8008cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa77 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 8008ccc:	e005      	b.n	8008cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa69 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fa7a 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d122      	bne.n	8008d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d11b      	bne.n	8008d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f06f 0204 	mvn.w	r2, #4
 8008d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa4d 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 8008d20:	e005      	b.n	8008d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa3f 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fa50 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	d122      	bne.n	8008d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d11b      	bne.n	8008d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f06f 0208 	mvn.w	r2, #8
 8008d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2204      	movs	r2, #4
 8008d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fa23 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 8008d74:	e005      	b.n	8008d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fa15 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa26 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	f003 0310 	and.w	r3, r3, #16
 8008d92:	2b10      	cmp	r3, #16
 8008d94:	d122      	bne.n	8008ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d11b      	bne.n	8008ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f06f 0210 	mvn.w	r2, #16
 8008dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2208      	movs	r2, #8
 8008db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f9f9 	bl	80091ba <HAL_TIM_IC_CaptureCallback>
 8008dc8:	e005      	b.n	8008dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f9eb 	bl	80091a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f9fc 	bl	80091ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d10e      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d107      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f06f 0201 	mvn.w	r2, #1
 8008e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7fb fd3e 	bl	8004884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e12:	2b80      	cmp	r3, #128	; 0x80
 8008e14:	d10e      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e20:	2b80      	cmp	r3, #128	; 0x80
 8008e22:	d107      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fe84 	bl	8009b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d10e      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b40      	cmp	r3, #64	; 0x40
 8008e4e:	d107      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9c1 	bl	80091e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d10e      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d107      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f06f 0220 	mvn.w	r2, #32
 8008e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fe4e 	bl	8009b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d101      	bne.n	8008eb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e0ae      	b.n	8009010 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b0c      	cmp	r3, #12
 8008ebe:	f200 809f 	bhi.w	8009000 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008efd 	.word	0x08008efd
 8008ecc:	08009001 	.word	0x08009001
 8008ed0:	08009001 	.word	0x08009001
 8008ed4:	08009001 	.word	0x08009001
 8008ed8:	08008f3d 	.word	0x08008f3d
 8008edc:	08009001 	.word	0x08009001
 8008ee0:	08009001 	.word	0x08009001
 8008ee4:	08009001 	.word	0x08009001
 8008ee8:	08008f7f 	.word	0x08008f7f
 8008eec:	08009001 	.word	0x08009001
 8008ef0:	08009001 	.word	0x08009001
 8008ef4:	08009001 	.word	0x08009001
 8008ef8:	08008fbf 	.word	0x08008fbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fa18 	bl	8009338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0208 	orr.w	r2, r2, #8
 8008f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f022 0204 	bic.w	r2, r2, #4
 8008f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	6999      	ldr	r1, [r3, #24]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	691a      	ldr	r2, [r3, #16]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	619a      	str	r2, [r3, #24]
      break;
 8008f3a:	e064      	b.n	8009006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fa68 	bl	8009418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	699a      	ldr	r2, [r3, #24]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	6999      	ldr	r1, [r3, #24]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	021a      	lsls	r2, r3, #8
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	619a      	str	r2, [r3, #24]
      break;
 8008f7c:	e043      	b.n	8009006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fabd 	bl	8009504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69da      	ldr	r2, [r3, #28]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0208 	orr.w	r2, r2, #8
 8008f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69da      	ldr	r2, [r3, #28]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0204 	bic.w	r2, r2, #4
 8008fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69d9      	ldr	r1, [r3, #28]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	691a      	ldr	r2, [r3, #16]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	61da      	str	r2, [r3, #28]
      break;
 8008fbc:	e023      	b.n	8009006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fb11 	bl	80095ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69da      	ldr	r2, [r3, #28]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69d9      	ldr	r1, [r3, #28]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	021a      	lsls	r2, r3, #8
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	61da      	str	r2, [r3, #28]
      break;
 8008ffe:	e002      	b.n	8009006 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]
      break;
 8009004:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800900e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_TIM_ConfigClockSource+0x1c>
 8009030:	2302      	movs	r3, #2
 8009032:	e0b4      	b.n	800919e <HAL_TIM_ConfigClockSource+0x186>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800905a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800906c:	d03e      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0xd4>
 800906e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009072:	f200 8087 	bhi.w	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907a:	f000 8086 	beq.w	800918a <HAL_TIM_ConfigClockSource+0x172>
 800907e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009082:	d87f      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 8009084:	2b70      	cmp	r3, #112	; 0x70
 8009086:	d01a      	beq.n	80090be <HAL_TIM_ConfigClockSource+0xa6>
 8009088:	2b70      	cmp	r3, #112	; 0x70
 800908a:	d87b      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 800908c:	2b60      	cmp	r3, #96	; 0x60
 800908e:	d050      	beq.n	8009132 <HAL_TIM_ConfigClockSource+0x11a>
 8009090:	2b60      	cmp	r3, #96	; 0x60
 8009092:	d877      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 8009094:	2b50      	cmp	r3, #80	; 0x50
 8009096:	d03c      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0xfa>
 8009098:	2b50      	cmp	r3, #80	; 0x50
 800909a:	d873      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	d058      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0x13a>
 80090a0:	2b40      	cmp	r3, #64	; 0x40
 80090a2:	d86f      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 80090a4:	2b30      	cmp	r3, #48	; 0x30
 80090a6:	d064      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x15a>
 80090a8:	2b30      	cmp	r3, #48	; 0x30
 80090aa:	d86b      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d060      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x15a>
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d867      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d05c      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x15a>
 80090b8:	2b10      	cmp	r3, #16
 80090ba:	d05a      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x15a>
 80090bc:	e062      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6899      	ldr	r1, [r3, #8]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f000 fb5d 	bl	800978c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	609a      	str	r2, [r3, #8]
      break;
 80090ea:	e04f      	b.n	800918c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	6899      	ldr	r1, [r3, #8]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f000 fb46 	bl	800978c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800910e:	609a      	str	r2, [r3, #8]
      break;
 8009110:	e03c      	b.n	800918c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	6859      	ldr	r1, [r3, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	461a      	mov	r2, r3
 8009120:	f000 faba 	bl	8009698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2150      	movs	r1, #80	; 0x50
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fb13 	bl	8009756 <TIM_ITRx_SetConfig>
      break;
 8009130:	e02c      	b.n	800918c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	6859      	ldr	r1, [r3, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	461a      	mov	r2, r3
 8009140:	f000 fad9 	bl	80096f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2160      	movs	r1, #96	; 0x60
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fb03 	bl	8009756 <TIM_ITRx_SetConfig>
      break;
 8009150:	e01c      	b.n	800918c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	6859      	ldr	r1, [r3, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	461a      	mov	r2, r3
 8009160:	f000 fa9a 	bl	8009698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2140      	movs	r1, #64	; 0x40
 800916a:	4618      	mov	r0, r3
 800916c:	f000 faf3 	bl	8009756 <TIM_ITRx_SetConfig>
      break;
 8009170:	e00c      	b.n	800918c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f000 faea 	bl	8009756 <TIM_ITRx_SetConfig>
      break;
 8009182:	e003      	b.n	800918c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
      break;
 8009188:	e000      	b.n	800918c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800918a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
	...

080091f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a40      	ldr	r2, [pc, #256]	; (800930c <TIM_Base_SetConfig+0x114>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d013      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009216:	d00f      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a3d      	ldr	r2, [pc, #244]	; (8009310 <TIM_Base_SetConfig+0x118>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00b      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a3c      	ldr	r2, [pc, #240]	; (8009314 <TIM_Base_SetConfig+0x11c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d007      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a3b      	ldr	r2, [pc, #236]	; (8009318 <TIM_Base_SetConfig+0x120>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d003      	beq.n	8009238 <TIM_Base_SetConfig+0x40>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a3a      	ldr	r2, [pc, #232]	; (800931c <TIM_Base_SetConfig+0x124>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d108      	bne.n	800924a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a2f      	ldr	r2, [pc, #188]	; (800930c <TIM_Base_SetConfig+0x114>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d02b      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009258:	d027      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a2c      	ldr	r2, [pc, #176]	; (8009310 <TIM_Base_SetConfig+0x118>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d023      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a2b      	ldr	r2, [pc, #172]	; (8009314 <TIM_Base_SetConfig+0x11c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d01f      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a2a      	ldr	r2, [pc, #168]	; (8009318 <TIM_Base_SetConfig+0x120>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d01b      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a29      	ldr	r2, [pc, #164]	; (800931c <TIM_Base_SetConfig+0x124>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d017      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a28      	ldr	r2, [pc, #160]	; (8009320 <TIM_Base_SetConfig+0x128>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d013      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a27      	ldr	r2, [pc, #156]	; (8009324 <TIM_Base_SetConfig+0x12c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00f      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a26      	ldr	r2, [pc, #152]	; (8009328 <TIM_Base_SetConfig+0x130>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d00b      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a25      	ldr	r2, [pc, #148]	; (800932c <TIM_Base_SetConfig+0x134>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d007      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a24      	ldr	r2, [pc, #144]	; (8009330 <TIM_Base_SetConfig+0x138>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d003      	beq.n	80092aa <TIM_Base_SetConfig+0xb2>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a23      	ldr	r2, [pc, #140]	; (8009334 <TIM_Base_SetConfig+0x13c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d108      	bne.n	80092bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a0a      	ldr	r2, [pc, #40]	; (800930c <TIM_Base_SetConfig+0x114>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <TIM_Base_SetConfig+0xf8>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a0c      	ldr	r2, [pc, #48]	; (800931c <TIM_Base_SetConfig+0x124>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d103      	bne.n	80092f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	691a      	ldr	r2, [r3, #16]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	615a      	str	r2, [r3, #20]
}
 80092fe:	bf00      	nop
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40010000 	.word	0x40010000
 8009310:	40000400 	.word	0x40000400
 8009314:	40000800 	.word	0x40000800
 8009318:	40000c00 	.word	0x40000c00
 800931c:	40010400 	.word	0x40010400
 8009320:	40014000 	.word	0x40014000
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800
 800932c:	40001800 	.word	0x40001800
 8009330:	40001c00 	.word	0x40001c00
 8009334:	40002000 	.word	0x40002000

08009338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f023 0201 	bic.w	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0303 	bic.w	r3, r3, #3
 800936e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	4313      	orrs	r3, r2
 8009378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f023 0302 	bic.w	r3, r3, #2
 8009380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	4313      	orrs	r3, r2
 800938a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a20      	ldr	r2, [pc, #128]	; (8009410 <TIM_OC1_SetConfig+0xd8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d003      	beq.n	800939c <TIM_OC1_SetConfig+0x64>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a1f      	ldr	r2, [pc, #124]	; (8009414 <TIM_OC1_SetConfig+0xdc>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d10c      	bne.n	80093b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f023 0308 	bic.w	r3, r3, #8
 80093a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f023 0304 	bic.w	r3, r3, #4
 80093b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a15      	ldr	r2, [pc, #84]	; (8009410 <TIM_OC1_SetConfig+0xd8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d003      	beq.n	80093c6 <TIM_OC1_SetConfig+0x8e>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a14      	ldr	r2, [pc, #80]	; (8009414 <TIM_OC1_SetConfig+0xdc>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d111      	bne.n	80093ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4313      	orrs	r3, r2
 80093de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	621a      	str	r2, [r3, #32]
}
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	40010000 	.word	0x40010000
 8009414:	40010400 	.word	0x40010400

08009418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	f023 0210 	bic.w	r2, r3, #16
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	4313      	orrs	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f023 0320 	bic.w	r3, r3, #32
 8009462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	4313      	orrs	r3, r2
 800946e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a22      	ldr	r2, [pc, #136]	; (80094fc <TIM_OC2_SetConfig+0xe4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d003      	beq.n	8009480 <TIM_OC2_SetConfig+0x68>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a21      	ldr	r2, [pc, #132]	; (8009500 <TIM_OC2_SetConfig+0xe8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d10d      	bne.n	800949c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4313      	orrs	r3, r2
 8009492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800949a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a17      	ldr	r2, [pc, #92]	; (80094fc <TIM_OC2_SetConfig+0xe4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <TIM_OC2_SetConfig+0x94>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a16      	ldr	r2, [pc, #88]	; (8009500 <TIM_OC2_SetConfig+0xe8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d113      	bne.n	80094d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40010000 	.word	0x40010000
 8009500:	40010400 	.word	0x40010400

08009504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800954c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a21      	ldr	r2, [pc, #132]	; (80095e4 <TIM_OC3_SetConfig+0xe0>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d003      	beq.n	800956a <TIM_OC3_SetConfig+0x66>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <TIM_OC3_SetConfig+0xe4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d10d      	bne.n	8009586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <TIM_OC3_SetConfig+0xe0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_OC3_SetConfig+0x92>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a15      	ldr	r2, [pc, #84]	; (80095e8 <TIM_OC3_SetConfig+0xe4>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d113      	bne.n	80095be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800959c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	621a      	str	r2, [r3, #32]
}
 80095d8:	bf00      	nop
 80095da:	371c      	adds	r7, #28
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	40010000 	.word	0x40010000
 80095e8:	40010400 	.word	0x40010400

080095ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b087      	sub	sp, #28
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	031b      	lsls	r3, r3, #12
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a12      	ldr	r2, [pc, #72]	; (8009690 <TIM_OC4_SetConfig+0xa4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d003      	beq.n	8009654 <TIM_OC4_SetConfig+0x68>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a11      	ldr	r2, [pc, #68]	; (8009694 <TIM_OC4_SetConfig+0xa8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d109      	bne.n	8009668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800965a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	019b      	lsls	r3, r3, #6
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	4313      	orrs	r3, r2
 8009666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	621a      	str	r2, [r3, #32]
}
 8009682:	bf00      	nop
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40010000 	.word	0x40010000
 8009694:	40010400 	.word	0x40010400

08009698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a1b      	ldr	r3, [r3, #32]
 80096a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	f023 0201 	bic.w	r2, r3, #1
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f023 030a 	bic.w	r3, r3, #10
 80096d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4313      	orrs	r3, r2
 80096dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b087      	sub	sp, #28
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	f023 0210 	bic.w	r2, r3, #16
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	031b      	lsls	r3, r3, #12
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	4313      	orrs	r3, r2
 800972a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	621a      	str	r2, [r3, #32]
}
 800974a:	bf00      	nop
 800974c:	371c      	adds	r7, #28
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009756:	b480      	push	{r7}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4313      	orrs	r3, r2
 8009774:	f043 0307 	orr.w	r3, r3, #7
 8009778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	609a      	str	r2, [r3, #8]
}
 8009780:	bf00      	nop
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	021a      	lsls	r2, r3, #8
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	609a      	str	r2, [r3, #8]
}
 80097c0:	bf00      	nop
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f003 031f 	and.w	r3, r3, #31
 80097de:	2201      	movs	r2, #1
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6a1a      	ldr	r2, [r3, #32]
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	43db      	mvns	r3, r3
 80097ee:	401a      	ands	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	fa01 f303 	lsl.w	r3, r1, r3
 8009804:	431a      	orrs	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	621a      	str	r2, [r3, #32]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
	...

08009818 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <HAL_TIMEx_PWMN_Start+0x24>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b01      	cmp	r3, #1
 8009832:	bf14      	ite	ne
 8009834:	2301      	movne	r3, #1
 8009836:	2300      	moveq	r3, #0
 8009838:	b2db      	uxtb	r3, r3
 800983a:	e022      	b.n	8009882 <HAL_TIMEx_PWMN_Start+0x6a>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b04      	cmp	r3, #4
 8009840:	d109      	bne.n	8009856 <HAL_TIMEx_PWMN_Start+0x3e>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b01      	cmp	r3, #1
 800984c:	bf14      	ite	ne
 800984e:	2301      	movne	r3, #1
 8009850:	2300      	moveq	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	e015      	b.n	8009882 <HAL_TIMEx_PWMN_Start+0x6a>
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b08      	cmp	r3, #8
 800985a:	d109      	bne.n	8009870 <HAL_TIMEx_PWMN_Start+0x58>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	bf14      	ite	ne
 8009868:	2301      	movne	r3, #1
 800986a:	2300      	moveq	r3, #0
 800986c:	b2db      	uxtb	r3, r3
 800986e:	e008      	b.n	8009882 <HAL_TIMEx_PWMN_Start+0x6a>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b01      	cmp	r3, #1
 800987a:	bf14      	ite	ne
 800987c:	2301      	movne	r3, #1
 800987e:	2300      	moveq	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e06d      	b.n	8009966 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d104      	bne.n	800989a <HAL_TIMEx_PWMN_Start+0x82>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009898:	e013      	b.n	80098c2 <HAL_TIMEx_PWMN_Start+0xaa>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d104      	bne.n	80098aa <HAL_TIMEx_PWMN_Start+0x92>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2202      	movs	r2, #2
 80098a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098a8:	e00b      	b.n	80098c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d104      	bne.n	80098ba <HAL_TIMEx_PWMN_Start+0xa2>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098b8:	e003      	b.n	80098c2 <HAL_TIMEx_PWMN_Start+0xaa>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2202      	movs	r2, #2
 80098be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2204      	movs	r2, #4
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 f940 	bl	8009b50 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a22      	ldr	r2, [pc, #136]	; (8009970 <HAL_TIMEx_PWMN_Start+0x158>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d022      	beq.n	8009930 <HAL_TIMEx_PWMN_Start+0x118>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f2:	d01d      	beq.n	8009930 <HAL_TIMEx_PWMN_Start+0x118>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a1e      	ldr	r2, [pc, #120]	; (8009974 <HAL_TIMEx_PWMN_Start+0x15c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d018      	beq.n	8009930 <HAL_TIMEx_PWMN_Start+0x118>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a1d      	ldr	r2, [pc, #116]	; (8009978 <HAL_TIMEx_PWMN_Start+0x160>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d013      	beq.n	8009930 <HAL_TIMEx_PWMN_Start+0x118>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a1b      	ldr	r2, [pc, #108]	; (800997c <HAL_TIMEx_PWMN_Start+0x164>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d00e      	beq.n	8009930 <HAL_TIMEx_PWMN_Start+0x118>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a1a      	ldr	r2, [pc, #104]	; (8009980 <HAL_TIMEx_PWMN_Start+0x168>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d009      	beq.n	8009930 <HAL_TIMEx_PWMN_Start+0x118>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a18      	ldr	r2, [pc, #96]	; (8009984 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d004      	beq.n	8009930 <HAL_TIMEx_PWMN_Start+0x118>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a17      	ldr	r2, [pc, #92]	; (8009988 <HAL_TIMEx_PWMN_Start+0x170>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d111      	bne.n	8009954 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b06      	cmp	r3, #6
 8009940:	d010      	beq.n	8009964 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0201 	orr.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	e007      	b.n	8009964 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	40010000 	.word	0x40010000
 8009974:	40000400 	.word	0x40000400
 8009978:	40000800 	.word	0x40000800
 800997c:	40000c00 	.word	0x40000c00
 8009980:	40010400 	.word	0x40010400
 8009984:	40014000 	.word	0x40014000
 8009988:	40001800 	.word	0x40001800

0800998c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800999c:	2b01      	cmp	r3, #1
 800999e:	d101      	bne.n	80099a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099a0:	2302      	movs	r3, #2
 80099a2:	e05a      	b.n	8009a5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a21      	ldr	r2, [pc, #132]	; (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d022      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f0:	d01d      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a1d      	ldr	r2, [pc, #116]	; (8009a6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d018      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a1b      	ldr	r2, [pc, #108]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d013      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a1a      	ldr	r2, [pc, #104]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00e      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a18      	ldr	r2, [pc, #96]	; (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d009      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a17      	ldr	r2, [pc, #92]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d004      	beq.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a15      	ldr	r2, [pc, #84]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d10c      	bne.n	8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800
 8009a74:	40000c00 	.word	0x40000c00
 8009a78:	40010400 	.word	0x40010400
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40001800 	.word	0x40001800

08009a84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d101      	bne.n	8009aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	e03d      	b.n	8009b1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f003 031f 	and.w	r3, r3, #31
 8009b62:	2204      	movs	r2, #4
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6a1a      	ldr	r2, [r3, #32]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	43db      	mvns	r3, r3
 8009b72:	401a      	ands	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a1a      	ldr	r2, [r3, #32]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 031f 	and.w	r3, r3, #31
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	fa01 f303 	lsl.w	r3, r1, r3
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	621a      	str	r2, [r3, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e03f      	b.n	8009c2c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fb fce9 	bl	8005598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2224      	movs	r2, #36	; 0x24
 8009bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 ff9c 	bl	800ab1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691a      	ldr	r2, [r3, #16]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bf2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695a      	ldr	r2, [r3, #20]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68da      	ldr	r2, [r3, #12]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	4613      	mov	r3, r2
 8009c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c44:	2300      	movs	r3, #0
 8009c46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d17c      	bne.n	8009d4e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <HAL_UART_Transmit+0x2c>
 8009c5a:	88fb      	ldrh	r3, [r7, #6]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e075      	b.n	8009d50 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <HAL_UART_Transmit+0x3e>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e06e      	b.n	8009d50 <HAL_UART_Transmit+0x11c>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2221      	movs	r2, #33	; 0x21
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c88:	f7fb fd84 	bl	8005794 <HAL_GetTick>
 8009c8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	88fa      	ldrh	r2, [r7, #6]
 8009c92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca2:	d108      	bne.n	8009cb6 <HAL_UART_Transmit+0x82>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cac:	2300      	movs	r3, #0
 8009cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e003      	b.n	8009cbe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009cc6:	e02a      	b.n	8009d1e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2180      	movs	r1, #128	; 0x80
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 fc54 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e036      	b.n	8009d50 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10b      	bne.n	8009d00 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	3302      	adds	r3, #2
 8009cfc:	61bb      	str	r3, [r7, #24]
 8009cfe:	e007      	b.n	8009d10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	781a      	ldrb	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1cf      	bne.n	8009cc8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2140      	movs	r1, #64	; 0x40
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fc24 	bl	800a580 <UART_WaitOnFlagUntilTimeout>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e006      	b.n	8009d50 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e000      	b.n	8009d50 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d4e:	2302      	movs	r3, #2
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3720      	adds	r7, #32
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08c      	sub	sp, #48	; 0x30
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	d152      	bne.n	8009e18 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009d78:	88fb      	ldrh	r3, [r7, #6]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e04b      	b.n	8009e1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d101      	bne.n	8009d90 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	e044      	b.n	8009e1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009d9e:	88fb      	ldrh	r3, [r7, #6]
 8009da0:	461a      	mov	r2, r3
 8009da2:	68b9      	ldr	r1, [r7, #8]
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 fc59 	bl	800a65c <UART_Start_Receive_DMA>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d12c      	bne.n	8009e12 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d125      	bne.n	8009e0c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	613b      	str	r3, [r7, #16]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	613b      	str	r3, [r7, #16]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	613b      	str	r3, [r7, #16]
 8009dd4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	330c      	adds	r3, #12
 8009ddc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	617b      	str	r3, [r7, #20]
   return(result);
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f043 0310 	orr.w	r3, r3, #16
 8009dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	330c      	adds	r3, #12
 8009df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df6:	627a      	str	r2, [r7, #36]	; 0x24
 8009df8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6a39      	ldr	r1, [r7, #32]
 8009dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e5      	bne.n	8009dd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009e0a:	e002      	b.n	8009e12 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e16:	e000      	b.n	8009e1a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009e18:	2302      	movs	r3, #2
  }
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3730      	adds	r7, #48	; 0x30
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b0ba      	sub	sp, #232	; 0xe8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5a:	f003 030f 	and.w	r3, r3, #15
 8009e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10f      	bne.n	8009e8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d009      	beq.n	8009e8a <HAL_UART_IRQHandler+0x66>
 8009e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fd8f 	bl	800a9a6 <UART_Receive_IT>
      return;
 8009e88:	e256      	b.n	800a338 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 80de 	beq.w	800a050 <HAL_UART_IRQHandler+0x22c>
 8009e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d106      	bne.n	8009eae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 80d1 	beq.w	800a050 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00b      	beq.n	8009ed2 <HAL_UART_IRQHandler+0xae>
 8009eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	f043 0201 	orr.w	r2, r3, #1
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed6:	f003 0304 	and.w	r3, r3, #4
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <HAL_UART_IRQHandler+0xd2>
 8009ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	f043 0202 	orr.w	r2, r3, #2
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00b      	beq.n	8009f1a <HAL_UART_IRQHandler+0xf6>
 8009f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d005      	beq.n	8009f1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	f043 0204 	orr.w	r2, r3, #4
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f1e:	f003 0308 	and.w	r3, r3, #8
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d011      	beq.n	8009f4a <HAL_UART_IRQHandler+0x126>
 8009f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f2a:	f003 0320 	and.w	r3, r3, #32
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d105      	bne.n	8009f3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	f043 0208 	orr.w	r2, r3, #8
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 81ed 	beq.w	800a32e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f58:	f003 0320 	and.w	r3, r3, #32
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d008      	beq.n	8009f72 <HAL_UART_IRQHandler+0x14e>
 8009f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fd1a 	bl	800a9a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7c:	2b40      	cmp	r3, #64	; 0x40
 8009f7e:	bf0c      	ite	eq
 8009f80:	2301      	moveq	r3, #1
 8009f82:	2300      	movne	r3, #0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	f003 0308 	and.w	r3, r3, #8
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d103      	bne.n	8009f9e <HAL_UART_IRQHandler+0x17a>
 8009f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d04f      	beq.n	800a03e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fc22 	bl	800a7e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fae:	2b40      	cmp	r3, #64	; 0x40
 8009fb0:	d141      	bne.n	800a036 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3314      	adds	r3, #20
 8009fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1d9      	bne.n	8009fb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a002:	2b00      	cmp	r3, #0
 800a004:	d013      	beq.n	800a02e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00a:	4a7d      	ldr	r2, [pc, #500]	; (800a200 <HAL_UART_IRQHandler+0x3dc>)
 800a00c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a012:	4618      	mov	r0, r3
 800a014:	f7fd f872 	bl	80070fc <HAL_DMA_Abort_IT>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d016      	beq.n	800a04c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a028:	4610      	mov	r0, r2
 800a02a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a02c:	e00e      	b.n	800a04c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f9a4 	bl	800a37c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a034:	e00a      	b.n	800a04c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f9a0 	bl	800a37c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a03c:	e006      	b.n	800a04c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f99c 	bl	800a37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a04a:	e170      	b.n	800a32e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a04c:	bf00      	nop
    return;
 800a04e:	e16e      	b.n	800a32e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a054:	2b01      	cmp	r3, #1
 800a056:	f040 814a 	bne.w	800a2ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a05e:	f003 0310 	and.w	r3, r3, #16
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 8143 	beq.w	800a2ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 813c 	beq.w	800a2ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a076:	2300      	movs	r3, #0
 800a078:	60bb      	str	r3, [r7, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60bb      	str	r3, [r7, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	60bb      	str	r3, [r7, #8]
 800a08a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a096:	2b40      	cmp	r3, #64	; 0x40
 800a098:	f040 80b4 	bne.w	800a204 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a0a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 8140 	beq.w	800a332 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	f080 8139 	bcs.w	800a332 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d2:	f000 8088 	beq.w	800a1e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	330c      	adds	r3, #12
 800a0dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a0ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	330c      	adds	r3, #12
 800a0fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a10e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a11a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1d9      	bne.n	800a0d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3314      	adds	r3, #20
 800a128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a134:	f023 0301 	bic.w	r3, r3, #1
 800a138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3314      	adds	r3, #20
 800a142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a146:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a14a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a14e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e1      	bne.n	800a122 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3314      	adds	r3, #20
 800a164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a16e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3314      	adds	r3, #20
 800a17e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a182:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a184:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a18a:	e841 2300 	strex	r3, r2, [r1]
 800a18e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e3      	bne.n	800a15e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2220      	movs	r2, #32
 800a19a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	330c      	adds	r3, #12
 800a1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1b6:	f023 0310 	bic.w	r3, r3, #16
 800a1ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	330c      	adds	r3, #12
 800a1c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a1c8:	65ba      	str	r2, [r7, #88]	; 0x58
 800a1ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e3      	bne.n	800a1a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fc ff1b 	bl	800701c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7f9 f8f8 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1fc:	e099      	b.n	800a332 <HAL_UART_IRQHandler+0x50e>
 800a1fe:	bf00      	nop
 800a200:	0800a8af 	.word	0x0800a8af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a218:	b29b      	uxth	r3, r3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 808b 	beq.w	800a336 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 8086 	beq.w	800a336 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	330c      	adds	r3, #12
 800a230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	330c      	adds	r3, #12
 800a24a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a24e:	647a      	str	r2, [r7, #68]	; 0x44
 800a250:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a254:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e3      	bne.n	800a22a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3314      	adds	r3, #20
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	e853 3f00 	ldrex	r3, [r3]
 800a270:	623b      	str	r3, [r7, #32]
   return(result);
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	f023 0301 	bic.w	r3, r3, #1
 800a278:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3314      	adds	r3, #20
 800a282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a286:	633a      	str	r2, [r7, #48]	; 0x30
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e3      	bne.n	800a262 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	330c      	adds	r3, #12
 800a2ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0310 	bic.w	r3, r3, #16
 800a2be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a2cc:	61fa      	str	r2, [r7, #28]
 800a2ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	69b9      	ldr	r1, [r7, #24]
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e3      	bne.n	800a2a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7f9 f880 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a2ec:	e023      	b.n	800a336 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d009      	beq.n	800a30e <HAL_UART_IRQHandler+0x4ea>
 800a2fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fae5 	bl	800a8d6 <UART_Transmit_IT>
    return;
 800a30c:	e014      	b.n	800a338 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00e      	beq.n	800a338 <HAL_UART_IRQHandler+0x514>
 800a31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d008      	beq.n	800a338 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fb25 	bl	800a976 <UART_EndTransmit_IT>
    return;
 800a32c:	e004      	b.n	800a338 <HAL_UART_IRQHandler+0x514>
    return;
 800a32e:	bf00      	nop
 800a330:	e002      	b.n	800a338 <HAL_UART_IRQHandler+0x514>
      return;
 800a332:	bf00      	nop
 800a334:	e000      	b.n	800a338 <HAL_UART_IRQHandler+0x514>
      return;
 800a336:	bf00      	nop
  }
}
 800a338:	37e8      	adds	r7, #232	; 0xe8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop

0800a340 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b09c      	sub	sp, #112	; 0x70
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d172      	bne.n	800a492 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3d2:	65ba      	str	r2, [r7, #88]	; 0x58
 800a3d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e5      	bne.n	800a3b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	f023 0301 	bic.w	r3, r3, #1
 800a3fc:	667b      	str	r3, [r7, #100]	; 0x64
 800a3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3314      	adds	r3, #20
 800a404:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a406:	647a      	str	r2, [r7, #68]	; 0x44
 800a408:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a40c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a41a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3314      	adds	r3, #20
 800a420:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	623b      	str	r3, [r7, #32]
   return(result);
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a430:	663b      	str	r3, [r7, #96]	; 0x60
 800a432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3314      	adds	r3, #20
 800a438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a43a:	633a      	str	r2, [r7, #48]	; 0x30
 800a43c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a442:	e841 2300 	strex	r3, r2, [r1]
 800a446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1e5      	bne.n	800a41a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a450:	2220      	movs	r2, #32
 800a452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d119      	bne.n	800a492 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	330c      	adds	r3, #12
 800a464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	e853 3f00 	ldrex	r3, [r3]
 800a46c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f023 0310 	bic.w	r3, r3, #16
 800a474:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	330c      	adds	r3, #12
 800a47c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a47e:	61fa      	str	r2, [r7, #28]
 800a480:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	69b9      	ldr	r1, [r7, #24]
 800a484:	69fa      	ldr	r2, [r7, #28]
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	617b      	str	r3, [r7, #20]
   return(result);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e5      	bne.n	800a45e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	2b01      	cmp	r3, #1
 800a498:	d106      	bne.n	800a4a8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a49c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4a2:	f7f8 ffa3 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4a6:	e002      	b.n	800a4ae <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a4a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a4aa:	f7ff ff53 	bl	800a354 <HAL_UART_RxCpltCallback>
}
 800a4ae:	bf00      	nop
 800a4b0:	3770      	adds	r7, #112	; 0x70
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d108      	bne.n	800a4de <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4d0:	085b      	lsrs	r3, r3, #1
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7f8 ff88 	bl	80033ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4dc:	e002      	b.n	800a4e4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f7ff ff42 	bl	800a368 <HAL_UART_RxHalfCpltCallback>
}
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a508:	2b80      	cmp	r3, #128	; 0x80
 800a50a:	bf0c      	ite	eq
 800a50c:	2301      	moveq	r3, #1
 800a50e:	2300      	movne	r3, #0
 800a510:	b2db      	uxtb	r3, r3
 800a512:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b21      	cmp	r3, #33	; 0x21
 800a51e:	d108      	bne.n	800a532 <UART_DMAError+0x46>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d005      	beq.n	800a532 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2200      	movs	r2, #0
 800a52a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a52c:	68b8      	ldr	r0, [r7, #8]
 800a52e:	f000 f933 	bl	800a798 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53c:	2b40      	cmp	r3, #64	; 0x40
 800a53e:	bf0c      	ite	eq
 800a540:	2301      	moveq	r3, #1
 800a542:	2300      	movne	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b22      	cmp	r3, #34	; 0x22
 800a552:	d108      	bne.n	800a566 <UART_DMAError+0x7a>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2200      	movs	r2, #0
 800a55e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a560:	68b8      	ldr	r0, [r7, #8]
 800a562:	f000 f941 	bl	800a7e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	f043 0210 	orr.w	r2, r3, #16
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a572:	68b8      	ldr	r0, [r7, #8]
 800a574:	f7ff ff02 	bl	800a37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b090      	sub	sp, #64	; 0x40
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	603b      	str	r3, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a590:	e050      	b.n	800a634 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d04c      	beq.n	800a634 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d007      	beq.n	800a5b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5a0:	f7fb f8f8 	bl	8005794 <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d241      	bcs.n	800a634 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	330c      	adds	r3, #12
 800a5b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	330c      	adds	r3, #12
 800a5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5d0:	637a      	str	r2, [r7, #52]	; 0x34
 800a5d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5d8:	e841 2300 	strex	r3, r2, [r1]
 800a5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e5      	bne.n	800a5b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3314      	adds	r3, #20
 800a5ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	f023 0301 	bic.w	r3, r3, #1
 800a5fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3314      	adds	r3, #20
 800a602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a604:	623a      	str	r2, [r7, #32]
 800a606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	69f9      	ldr	r1, [r7, #28]
 800a60a:	6a3a      	ldr	r2, [r7, #32]
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	61bb      	str	r3, [r7, #24]
   return(result);
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e5      	bne.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2220      	movs	r2, #32
 800a624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e00f      	b.n	800a654 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4013      	ands	r3, r2
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	429a      	cmp	r2, r3
 800a642:	bf0c      	ite	eq
 800a644:	2301      	moveq	r3, #1
 800a646:	2300      	movne	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d09f      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3740      	adds	r7, #64	; 0x40
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b098      	sub	sp, #96	; 0x60
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	4613      	mov	r3, r2
 800a668:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	88fa      	ldrh	r2, [r7, #6]
 800a674:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2222      	movs	r2, #34	; 0x22
 800a680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	4a40      	ldr	r2, [pc, #256]	; (800a78c <UART_Start_Receive_DMA+0x130>)
 800a68a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a690:	4a3f      	ldr	r2, [pc, #252]	; (800a790 <UART_Start_Receive_DMA+0x134>)
 800a692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a698:	4a3e      	ldr	r2, [pc, #248]	; (800a794 <UART_Start_Receive_DMA+0x138>)
 800a69a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a6a4:	f107 0308 	add.w	r3, r7, #8
 800a6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	f7fc fc56 	bl	8006f6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	613b      	str	r3, [r7, #16]
 800a6d4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d019      	beq.n	800a71a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	330c      	adds	r3, #12
 800a6ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	330c      	adds	r3, #12
 800a704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a706:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a708:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a70c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e5      	bne.n	800a6e6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3314      	adds	r3, #20
 800a720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	f043 0301 	orr.w	r3, r3, #1
 800a730:	657b      	str	r3, [r7, #84]	; 0x54
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3314      	adds	r3, #20
 800a738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a73a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a73c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e5      	bne.n	800a71a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3314      	adds	r3, #20
 800a754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	617b      	str	r3, [r7, #20]
   return(result);
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a764:	653b      	str	r3, [r7, #80]	; 0x50
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3314      	adds	r3, #20
 800a76c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a76e:	627a      	str	r2, [r7, #36]	; 0x24
 800a770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	6a39      	ldr	r1, [r7, #32]
 800a774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e5      	bne.n	800a74e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3760      	adds	r7, #96	; 0x60
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	0800a391 	.word	0x0800a391
 800a790:	0800a4b7 	.word	0x0800a4b7
 800a794:	0800a4ed 	.word	0x0800a4ed

0800a798 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a798:	b480      	push	{r7}
 800a79a:	b089      	sub	sp, #36	; 0x24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	330c      	adds	r3, #12
 800a7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	e853 3f00 	ldrex	r3, [r3]
 800a7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	330c      	adds	r3, #12
 800a7be:	69fa      	ldr	r2, [r7, #28]
 800a7c0:	61ba      	str	r2, [r7, #24]
 800a7c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c4:	6979      	ldr	r1, [r7, #20]
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e5      	bne.n	800a7a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a7dc:	bf00      	nop
 800a7de:	3724      	adds	r7, #36	; 0x24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b095      	sub	sp, #84	; 0x54
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	330c      	adds	r3, #12
 800a7f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7fa:	e853 3f00 	ldrex	r3, [r3]
 800a7fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a806:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	330c      	adds	r3, #12
 800a80e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a810:	643a      	str	r2, [r7, #64]	; 0x40
 800a812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a818:	e841 2300 	strex	r3, r2, [r1]
 800a81c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1e5      	bne.n	800a7f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3314      	adds	r3, #20
 800a82a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	61fb      	str	r3, [r7, #28]
   return(result);
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	f023 0301 	bic.w	r3, r3, #1
 800a83a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3314      	adds	r3, #20
 800a842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a844:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e5      	bne.n	800a824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d119      	bne.n	800a894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	e853 3f00 	ldrex	r3, [r3]
 800a86e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f023 0310 	bic.w	r3, r3, #16
 800a876:	647b      	str	r3, [r7, #68]	; 0x44
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	330c      	adds	r3, #12
 800a87e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a880:	61ba      	str	r2, [r7, #24]
 800a882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a884:	6979      	ldr	r1, [r7, #20]
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	e841 2300 	strex	r3, r2, [r1]
 800a88c:	613b      	str	r3, [r7, #16]
   return(result);
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e5      	bne.n	800a860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2220      	movs	r2, #32
 800a898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a8a2:	bf00      	nop
 800a8a4:	3754      	adds	r7, #84	; 0x54
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff fd57 	bl	800a37c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b21      	cmp	r3, #33	; 0x21
 800a8e8:	d13e      	bne.n	800a968 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8f2:	d114      	bne.n	800a91e <UART_Transmit_IT+0x48>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d110      	bne.n	800a91e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a910:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	1c9a      	adds	r2, r3, #2
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	621a      	str	r2, [r3, #32]
 800a91c:	e008      	b.n	800a930 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a1b      	ldr	r3, [r3, #32]
 800a922:	1c59      	adds	r1, r3, #1
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6211      	str	r1, [r2, #32]
 800a928:	781a      	ldrb	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a934:	b29b      	uxth	r3, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	b29b      	uxth	r3, r3
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	4619      	mov	r1, r3
 800a93e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10f      	bne.n	800a964 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	e000      	b.n	800a96a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a968:	2302      	movs	r3, #2
  }
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a98c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2220      	movs	r2, #32
 800a992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff fcd2 	bl	800a340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b08c      	sub	sp, #48	; 0x30
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b22      	cmp	r3, #34	; 0x22
 800a9b8:	f040 80ab 	bne.w	800ab12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c4:	d117      	bne.n	800a9f6 <UART_Receive_IT+0x50>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d113      	bne.n	800a9f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ee:	1c9a      	adds	r2, r3, #2
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a9f4:	e026      	b.n	800aa44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa08:	d007      	beq.n	800aa1a <UART_Receive_IT+0x74>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10a      	bne.n	800aa28 <UART_Receive_IT+0x82>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	701a      	strb	r2, [r3, #0]
 800aa26:	e008      	b.n	800aa3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	4619      	mov	r1, r3
 800aa52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d15a      	bne.n	800ab0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f022 0220 	bic.w	r2, r2, #32
 800aa66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	695a      	ldr	r2, [r3, #20]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 0201 	bic.w	r2, r2, #1
 800aa86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d135      	bne.n	800ab04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	330c      	adds	r3, #12
 800aaa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	613b      	str	r3, [r7, #16]
   return(result);
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	f023 0310 	bic.w	r3, r3, #16
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	330c      	adds	r3, #12
 800aabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabe:	623a      	str	r2, [r7, #32]
 800aac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	69f9      	ldr	r1, [r7, #28]
 800aac4:	6a3a      	ldr	r2, [r7, #32]
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	61bb      	str	r3, [r7, #24]
   return(result);
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0310 	and.w	r3, r3, #16
 800aadc:	2b10      	cmp	r3, #16
 800aade:	d10a      	bne.n	800aaf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7f8 fc75 	bl	80033ec <HAL_UARTEx_RxEventCallback>
 800ab02:	e002      	b.n	800ab0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fc25 	bl	800a354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e002      	b.n	800ab14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	e000      	b.n	800ab14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ab12:	2302      	movs	r3, #2
  }
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3730      	adds	r7, #48	; 0x30
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab20:	b0c0      	sub	sp, #256	; 0x100
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab38:	68d9      	ldr	r1, [r3, #12]
 800ab3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	ea40 0301 	orr.w	r3, r0, r1
 800ab44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab4a:	689a      	ldr	r2, [r3, #8]
 800ab4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ab68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ab74:	f021 010c 	bic.w	r1, r1, #12
 800ab78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab82:	430b      	orrs	r3, r1
 800ab84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab96:	6999      	ldr	r1, [r3, #24]
 800ab98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	ea40 0301 	orr.w	r3, r0, r1
 800aba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	4b8f      	ldr	r3, [pc, #572]	; (800ade8 <UART_SetConfig+0x2cc>)
 800abac:	429a      	cmp	r2, r3
 800abae:	d005      	beq.n	800abbc <UART_SetConfig+0xa0>
 800abb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	4b8d      	ldr	r3, [pc, #564]	; (800adec <UART_SetConfig+0x2d0>)
 800abb8:	429a      	cmp	r2, r3
 800abba:	d104      	bne.n	800abc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800abbc:	f7fd fe6c 	bl	8008898 <HAL_RCC_GetPCLK2Freq>
 800abc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800abc4:	e003      	b.n	800abce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800abc6:	f7fd fe53 	bl	8008870 <HAL_RCC_GetPCLK1Freq>
 800abca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abd8:	f040 810c 	bne.w	800adf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800abdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abe6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800abea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800abee:	4622      	mov	r2, r4
 800abf0:	462b      	mov	r3, r5
 800abf2:	1891      	adds	r1, r2, r2
 800abf4:	65b9      	str	r1, [r7, #88]	; 0x58
 800abf6:	415b      	adcs	r3, r3
 800abf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800abfe:	4621      	mov	r1, r4
 800ac00:	eb12 0801 	adds.w	r8, r2, r1
 800ac04:	4629      	mov	r1, r5
 800ac06:	eb43 0901 	adc.w	r9, r3, r1
 800ac0a:	f04f 0200 	mov.w	r2, #0
 800ac0e:	f04f 0300 	mov.w	r3, #0
 800ac12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac1e:	4690      	mov	r8, r2
 800ac20:	4699      	mov	r9, r3
 800ac22:	4623      	mov	r3, r4
 800ac24:	eb18 0303 	adds.w	r3, r8, r3
 800ac28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac2c:	462b      	mov	r3, r5
 800ac2e:	eb49 0303 	adc.w	r3, r9, r3
 800ac32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ac46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	18db      	adds	r3, r3, r3
 800ac4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ac50:	4613      	mov	r3, r2
 800ac52:	eb42 0303 	adc.w	r3, r2, r3
 800ac56:	657b      	str	r3, [r7, #84]	; 0x54
 800ac58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ac5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ac60:	f7f6 f812 	bl	8000c88 <__aeabi_uldivmod>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4b61      	ldr	r3, [pc, #388]	; (800adf0 <UART_SetConfig+0x2d4>)
 800ac6a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac6e:	095b      	lsrs	r3, r3, #5
 800ac70:	011c      	lsls	r4, r3, #4
 800ac72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac76:	2200      	movs	r2, #0
 800ac78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ac80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac84:	4642      	mov	r2, r8
 800ac86:	464b      	mov	r3, r9
 800ac88:	1891      	adds	r1, r2, r2
 800ac8a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac8c:	415b      	adcs	r3, r3
 800ac8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac94:	4641      	mov	r1, r8
 800ac96:	eb12 0a01 	adds.w	sl, r2, r1
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	eb43 0b01 	adc.w	fp, r3, r1
 800aca0:	f04f 0200 	mov.w	r2, #0
 800aca4:	f04f 0300 	mov.w	r3, #0
 800aca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800acac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800acb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acb4:	4692      	mov	sl, r2
 800acb6:	469b      	mov	fp, r3
 800acb8:	4643      	mov	r3, r8
 800acba:	eb1a 0303 	adds.w	r3, sl, r3
 800acbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acc2:	464b      	mov	r3, r9
 800acc4:	eb4b 0303 	adc.w	r3, fp, r3
 800acc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800accc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800acd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800acdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ace0:	460b      	mov	r3, r1
 800ace2:	18db      	adds	r3, r3, r3
 800ace4:	643b      	str	r3, [r7, #64]	; 0x40
 800ace6:	4613      	mov	r3, r2
 800ace8:	eb42 0303 	adc.w	r3, r2, r3
 800acec:	647b      	str	r3, [r7, #68]	; 0x44
 800acee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800acf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800acf6:	f7f5 ffc7 	bl	8000c88 <__aeabi_uldivmod>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4611      	mov	r1, r2
 800ad00:	4b3b      	ldr	r3, [pc, #236]	; (800adf0 <UART_SetConfig+0x2d4>)
 800ad02:	fba3 2301 	umull	r2, r3, r3, r1
 800ad06:	095b      	lsrs	r3, r3, #5
 800ad08:	2264      	movs	r2, #100	; 0x64
 800ad0a:	fb02 f303 	mul.w	r3, r2, r3
 800ad0e:	1acb      	subs	r3, r1, r3
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ad16:	4b36      	ldr	r3, [pc, #216]	; (800adf0 <UART_SetConfig+0x2d4>)
 800ad18:	fba3 2302 	umull	r2, r3, r3, r2
 800ad1c:	095b      	lsrs	r3, r3, #5
 800ad1e:	005b      	lsls	r3, r3, #1
 800ad20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad24:	441c      	add	r4, r3
 800ad26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ad34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ad38:	4642      	mov	r2, r8
 800ad3a:	464b      	mov	r3, r9
 800ad3c:	1891      	adds	r1, r2, r2
 800ad3e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ad40:	415b      	adcs	r3, r3
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad48:	4641      	mov	r1, r8
 800ad4a:	1851      	adds	r1, r2, r1
 800ad4c:	6339      	str	r1, [r7, #48]	; 0x30
 800ad4e:	4649      	mov	r1, r9
 800ad50:	414b      	adcs	r3, r1
 800ad52:	637b      	str	r3, [r7, #52]	; 0x34
 800ad54:	f04f 0200 	mov.w	r2, #0
 800ad58:	f04f 0300 	mov.w	r3, #0
 800ad5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ad60:	4659      	mov	r1, fp
 800ad62:	00cb      	lsls	r3, r1, #3
 800ad64:	4651      	mov	r1, sl
 800ad66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad6a:	4651      	mov	r1, sl
 800ad6c:	00ca      	lsls	r2, r1, #3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4619      	mov	r1, r3
 800ad72:	4603      	mov	r3, r0
 800ad74:	4642      	mov	r2, r8
 800ad76:	189b      	adds	r3, r3, r2
 800ad78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	460a      	mov	r2, r1
 800ad80:	eb42 0303 	adc.w	r3, r2, r3
 800ad84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	18db      	adds	r3, r3, r3
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ada2:	4613      	mov	r3, r2
 800ada4:	eb42 0303 	adc.w	r3, r2, r3
 800ada8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800adae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800adb2:	f7f5 ff69 	bl	8000c88 <__aeabi_uldivmod>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4b0d      	ldr	r3, [pc, #52]	; (800adf0 <UART_SetConfig+0x2d4>)
 800adbc:	fba3 1302 	umull	r1, r3, r3, r2
 800adc0:	095b      	lsrs	r3, r3, #5
 800adc2:	2164      	movs	r1, #100	; 0x64
 800adc4:	fb01 f303 	mul.w	r3, r1, r3
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	3332      	adds	r3, #50	; 0x32
 800adce:	4a08      	ldr	r2, [pc, #32]	; (800adf0 <UART_SetConfig+0x2d4>)
 800add0:	fba2 2303 	umull	r2, r3, r2, r3
 800add4:	095b      	lsrs	r3, r3, #5
 800add6:	f003 0207 	and.w	r2, r3, #7
 800adda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4422      	add	r2, r4
 800ade2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ade4:	e106      	b.n	800aff4 <UART_SetConfig+0x4d8>
 800ade6:	bf00      	nop
 800ade8:	40011000 	.word	0x40011000
 800adec:	40011400 	.word	0x40011400
 800adf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adf8:	2200      	movs	r2, #0
 800adfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800adfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ae06:	4642      	mov	r2, r8
 800ae08:	464b      	mov	r3, r9
 800ae0a:	1891      	adds	r1, r2, r2
 800ae0c:	6239      	str	r1, [r7, #32]
 800ae0e:	415b      	adcs	r3, r3
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
 800ae12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae16:	4641      	mov	r1, r8
 800ae18:	1854      	adds	r4, r2, r1
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	eb43 0501 	adc.w	r5, r3, r1
 800ae20:	f04f 0200 	mov.w	r2, #0
 800ae24:	f04f 0300 	mov.w	r3, #0
 800ae28:	00eb      	lsls	r3, r5, #3
 800ae2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae2e:	00e2      	lsls	r2, r4, #3
 800ae30:	4614      	mov	r4, r2
 800ae32:	461d      	mov	r5, r3
 800ae34:	4643      	mov	r3, r8
 800ae36:	18e3      	adds	r3, r4, r3
 800ae38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	eb45 0303 	adc.w	r3, r5, r3
 800ae42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae56:	f04f 0200 	mov.w	r2, #0
 800ae5a:	f04f 0300 	mov.w	r3, #0
 800ae5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ae62:	4629      	mov	r1, r5
 800ae64:	008b      	lsls	r3, r1, #2
 800ae66:	4621      	mov	r1, r4
 800ae68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	008a      	lsls	r2, r1, #2
 800ae70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ae74:	f7f5 ff08 	bl	8000c88 <__aeabi_uldivmod>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4b60      	ldr	r3, [pc, #384]	; (800b000 <UART_SetConfig+0x4e4>)
 800ae7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ae82:	095b      	lsrs	r3, r3, #5
 800ae84:	011c      	lsls	r4, r3, #4
 800ae86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae98:	4642      	mov	r2, r8
 800ae9a:	464b      	mov	r3, r9
 800ae9c:	1891      	adds	r1, r2, r2
 800ae9e:	61b9      	str	r1, [r7, #24]
 800aea0:	415b      	adcs	r3, r3
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aea8:	4641      	mov	r1, r8
 800aeaa:	1851      	adds	r1, r2, r1
 800aeac:	6139      	str	r1, [r7, #16]
 800aeae:	4649      	mov	r1, r9
 800aeb0:	414b      	adcs	r3, r1
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	f04f 0200 	mov.w	r2, #0
 800aeb8:	f04f 0300 	mov.w	r3, #0
 800aebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aec0:	4659      	mov	r1, fp
 800aec2:	00cb      	lsls	r3, r1, #3
 800aec4:	4651      	mov	r1, sl
 800aec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeca:	4651      	mov	r1, sl
 800aecc:	00ca      	lsls	r2, r1, #3
 800aece:	4610      	mov	r0, r2
 800aed0:	4619      	mov	r1, r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	4642      	mov	r2, r8
 800aed6:	189b      	adds	r3, r3, r2
 800aed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aedc:	464b      	mov	r3, r9
 800aede:	460a      	mov	r2, r1
 800aee0:	eb42 0303 	adc.w	r3, r2, r3
 800aee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	67bb      	str	r3, [r7, #120]	; 0x78
 800aef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aef4:	f04f 0200 	mov.w	r2, #0
 800aef8:	f04f 0300 	mov.w	r3, #0
 800aefc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800af00:	4649      	mov	r1, r9
 800af02:	008b      	lsls	r3, r1, #2
 800af04:	4641      	mov	r1, r8
 800af06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af0a:	4641      	mov	r1, r8
 800af0c:	008a      	lsls	r2, r1, #2
 800af0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800af12:	f7f5 feb9 	bl	8000c88 <__aeabi_uldivmod>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4611      	mov	r1, r2
 800af1c:	4b38      	ldr	r3, [pc, #224]	; (800b000 <UART_SetConfig+0x4e4>)
 800af1e:	fba3 2301 	umull	r2, r3, r3, r1
 800af22:	095b      	lsrs	r3, r3, #5
 800af24:	2264      	movs	r2, #100	; 0x64
 800af26:	fb02 f303 	mul.w	r3, r2, r3
 800af2a:	1acb      	subs	r3, r1, r3
 800af2c:	011b      	lsls	r3, r3, #4
 800af2e:	3332      	adds	r3, #50	; 0x32
 800af30:	4a33      	ldr	r2, [pc, #204]	; (800b000 <UART_SetConfig+0x4e4>)
 800af32:	fba2 2303 	umull	r2, r3, r2, r3
 800af36:	095b      	lsrs	r3, r3, #5
 800af38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af3c:	441c      	add	r4, r3
 800af3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af42:	2200      	movs	r2, #0
 800af44:	673b      	str	r3, [r7, #112]	; 0x70
 800af46:	677a      	str	r2, [r7, #116]	; 0x74
 800af48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800af4c:	4642      	mov	r2, r8
 800af4e:	464b      	mov	r3, r9
 800af50:	1891      	adds	r1, r2, r2
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	415b      	adcs	r3, r3
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800af5c:	4641      	mov	r1, r8
 800af5e:	1851      	adds	r1, r2, r1
 800af60:	6039      	str	r1, [r7, #0]
 800af62:	4649      	mov	r1, r9
 800af64:	414b      	adcs	r3, r1
 800af66:	607b      	str	r3, [r7, #4]
 800af68:	f04f 0200 	mov.w	r2, #0
 800af6c:	f04f 0300 	mov.w	r3, #0
 800af70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800af74:	4659      	mov	r1, fp
 800af76:	00cb      	lsls	r3, r1, #3
 800af78:	4651      	mov	r1, sl
 800af7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af7e:	4651      	mov	r1, sl
 800af80:	00ca      	lsls	r2, r1, #3
 800af82:	4610      	mov	r0, r2
 800af84:	4619      	mov	r1, r3
 800af86:	4603      	mov	r3, r0
 800af88:	4642      	mov	r2, r8
 800af8a:	189b      	adds	r3, r3, r2
 800af8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af8e:	464b      	mov	r3, r9
 800af90:	460a      	mov	r2, r1
 800af92:	eb42 0303 	adc.w	r3, r2, r3
 800af96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	663b      	str	r3, [r7, #96]	; 0x60
 800afa2:	667a      	str	r2, [r7, #100]	; 0x64
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800afb0:	4649      	mov	r1, r9
 800afb2:	008b      	lsls	r3, r1, #2
 800afb4:	4641      	mov	r1, r8
 800afb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afba:	4641      	mov	r1, r8
 800afbc:	008a      	lsls	r2, r1, #2
 800afbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800afc2:	f7f5 fe61 	bl	8000c88 <__aeabi_uldivmod>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <UART_SetConfig+0x4e4>)
 800afcc:	fba3 1302 	umull	r1, r3, r3, r2
 800afd0:	095b      	lsrs	r3, r3, #5
 800afd2:	2164      	movs	r1, #100	; 0x64
 800afd4:	fb01 f303 	mul.w	r3, r1, r3
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	3332      	adds	r3, #50	; 0x32
 800afde:	4a08      	ldr	r2, [pc, #32]	; (800b000 <UART_SetConfig+0x4e4>)
 800afe0:	fba2 2303 	umull	r2, r3, r2, r3
 800afe4:	095b      	lsrs	r3, r3, #5
 800afe6:	f003 020f 	and.w	r2, r3, #15
 800afea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4422      	add	r2, r4
 800aff2:	609a      	str	r2, [r3, #8]
}
 800aff4:	bf00      	nop
 800aff6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800affa:	46bd      	mov	sp, r7
 800affc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b000:	51eb851f 	.word	0x51eb851f

0800b004 <arm_sin_f32>:
 800b004:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b084 <arm_sin_f32+0x80>
 800b008:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b00c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b014:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b018:	d504      	bpl.n	800b024 <arm_sin_f32+0x20>
 800b01a:	ee17 3a90 	vmov	r3, s15
 800b01e:	3b01      	subs	r3, #1
 800b020:	ee07 3a90 	vmov	s15, r3
 800b024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b028:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b088 <arm_sin_f32+0x84>
 800b02c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b030:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b034:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b038:	ee17 3a90 	vmov	r3, s15
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b042:	d21a      	bcs.n	800b07a <arm_sin_f32+0x76>
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04c:	1c59      	adds	r1, r3, #1
 800b04e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b052:	4a0e      	ldr	r2, [pc, #56]	; (800b08c <arm_sin_f32+0x88>)
 800b054:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b05c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b060:	ed93 7a00 	vldr	s14, [r3]
 800b064:	edd2 6a00 	vldr	s13, [r2]
 800b068:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b06c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b070:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b074:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b078:	4770      	bx	lr
 800b07a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b07e:	2101      	movs	r1, #1
 800b080:	2300      	movs	r3, #0
 800b082:	e7e6      	b.n	800b052 <arm_sin_f32+0x4e>
 800b084:	3e22f983 	.word	0x3e22f983
 800b088:	44000000 	.word	0x44000000
 800b08c:	08011684 	.word	0x08011684

0800b090 <arm_cos_f32>:
 800b090:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b118 <arm_cos_f32+0x88>
 800b094:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b098:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b09c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b0ac:	d504      	bpl.n	800b0b8 <arm_cos_f32+0x28>
 800b0ae:	ee17 3a90 	vmov	r3, s15
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	ee07 3a90 	vmov	s15, r3
 800b0b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0bc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b11c <arm_cos_f32+0x8c>
 800b0c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b0c4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b0c8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b0cc:	ee17 3a90 	vmov	r3, s15
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0d6:	d21a      	bcs.n	800b10e <arm_cos_f32+0x7e>
 800b0d8:	ee07 3a90 	vmov	s15, r3
 800b0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e0:	1c59      	adds	r1, r3, #1
 800b0e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b0e6:	4a0e      	ldr	r2, [pc, #56]	; (800b120 <arm_cos_f32+0x90>)
 800b0e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b0ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b0f4:	ed93 7a00 	vldr	s14, [r3]
 800b0f8:	edd2 6a00 	vldr	s13, [r2]
 800b0fc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b100:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b104:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b108:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b10c:	4770      	bx	lr
 800b10e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b112:	2101      	movs	r1, #1
 800b114:	2300      	movs	r3, #0
 800b116:	e7e6      	b.n	800b0e6 <arm_cos_f32+0x56>
 800b118:	3e22f983 	.word	0x3e22f983
 800b11c:	44000000 	.word	0x44000000
 800b120:	08011684 	.word	0x08011684

0800b124 <__cvt>:
 800b124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b128:	ec55 4b10 	vmov	r4, r5, d0
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	460e      	mov	r6, r1
 800b130:	4619      	mov	r1, r3
 800b132:	462b      	mov	r3, r5
 800b134:	bfbb      	ittet	lt
 800b136:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b13a:	461d      	movlt	r5, r3
 800b13c:	2300      	movge	r3, #0
 800b13e:	232d      	movlt	r3, #45	; 0x2d
 800b140:	700b      	strb	r3, [r1, #0]
 800b142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b144:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b148:	4691      	mov	r9, r2
 800b14a:	f023 0820 	bic.w	r8, r3, #32
 800b14e:	bfbc      	itt	lt
 800b150:	4622      	movlt	r2, r4
 800b152:	4614      	movlt	r4, r2
 800b154:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b158:	d005      	beq.n	800b166 <__cvt+0x42>
 800b15a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b15e:	d100      	bne.n	800b162 <__cvt+0x3e>
 800b160:	3601      	adds	r6, #1
 800b162:	2102      	movs	r1, #2
 800b164:	e000      	b.n	800b168 <__cvt+0x44>
 800b166:	2103      	movs	r1, #3
 800b168:	ab03      	add	r3, sp, #12
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	ab02      	add	r3, sp, #8
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	ec45 4b10 	vmov	d0, r4, r5
 800b174:	4653      	mov	r3, sl
 800b176:	4632      	mov	r2, r6
 800b178:	f001 fa02 	bl	800c580 <_dtoa_r>
 800b17c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b180:	4607      	mov	r7, r0
 800b182:	d102      	bne.n	800b18a <__cvt+0x66>
 800b184:	f019 0f01 	tst.w	r9, #1
 800b188:	d022      	beq.n	800b1d0 <__cvt+0xac>
 800b18a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b18e:	eb07 0906 	add.w	r9, r7, r6
 800b192:	d110      	bne.n	800b1b6 <__cvt+0x92>
 800b194:	783b      	ldrb	r3, [r7, #0]
 800b196:	2b30      	cmp	r3, #48	; 0x30
 800b198:	d10a      	bne.n	800b1b0 <__cvt+0x8c>
 800b19a:	2200      	movs	r2, #0
 800b19c:	2300      	movs	r3, #0
 800b19e:	4620      	mov	r0, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	f7f5 fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1a6:	b918      	cbnz	r0, 800b1b0 <__cvt+0x8c>
 800b1a8:	f1c6 0601 	rsb	r6, r6, #1
 800b1ac:	f8ca 6000 	str.w	r6, [sl]
 800b1b0:	f8da 3000 	ldr.w	r3, [sl]
 800b1b4:	4499      	add	r9, r3
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	4629      	mov	r1, r5
 800b1be:	f7f5 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1c2:	b108      	cbz	r0, 800b1c8 <__cvt+0xa4>
 800b1c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1c8:	2230      	movs	r2, #48	; 0x30
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	454b      	cmp	r3, r9
 800b1ce:	d307      	bcc.n	800b1e0 <__cvt+0xbc>
 800b1d0:	9b03      	ldr	r3, [sp, #12]
 800b1d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1d4:	1bdb      	subs	r3, r3, r7
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	b004      	add	sp, #16
 800b1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e0:	1c59      	adds	r1, r3, #1
 800b1e2:	9103      	str	r1, [sp, #12]
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	e7f0      	b.n	800b1ca <__cvt+0xa6>

0800b1e8 <__exponent>:
 800b1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	bfb8      	it	lt
 800b1f0:	4249      	neglt	r1, r1
 800b1f2:	f803 2b02 	strb.w	r2, [r3], #2
 800b1f6:	bfb4      	ite	lt
 800b1f8:	222d      	movlt	r2, #45	; 0x2d
 800b1fa:	222b      	movge	r2, #43	; 0x2b
 800b1fc:	2909      	cmp	r1, #9
 800b1fe:	7042      	strb	r2, [r0, #1]
 800b200:	dd2a      	ble.n	800b258 <__exponent+0x70>
 800b202:	f10d 0207 	add.w	r2, sp, #7
 800b206:	4617      	mov	r7, r2
 800b208:	260a      	movs	r6, #10
 800b20a:	4694      	mov	ip, r2
 800b20c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b210:	fb06 1415 	mls	r4, r6, r5, r1
 800b214:	3430      	adds	r4, #48	; 0x30
 800b216:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b21a:	460c      	mov	r4, r1
 800b21c:	2c63      	cmp	r4, #99	; 0x63
 800b21e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b222:	4629      	mov	r1, r5
 800b224:	dcf1      	bgt.n	800b20a <__exponent+0x22>
 800b226:	3130      	adds	r1, #48	; 0x30
 800b228:	f1ac 0402 	sub.w	r4, ip, #2
 800b22c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b230:	1c41      	adds	r1, r0, #1
 800b232:	4622      	mov	r2, r4
 800b234:	42ba      	cmp	r2, r7
 800b236:	d30a      	bcc.n	800b24e <__exponent+0x66>
 800b238:	f10d 0209 	add.w	r2, sp, #9
 800b23c:	eba2 020c 	sub.w	r2, r2, ip
 800b240:	42bc      	cmp	r4, r7
 800b242:	bf88      	it	hi
 800b244:	2200      	movhi	r2, #0
 800b246:	4413      	add	r3, r2
 800b248:	1a18      	subs	r0, r3, r0
 800b24a:	b003      	add	sp, #12
 800b24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b24e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b252:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b256:	e7ed      	b.n	800b234 <__exponent+0x4c>
 800b258:	2330      	movs	r3, #48	; 0x30
 800b25a:	3130      	adds	r1, #48	; 0x30
 800b25c:	7083      	strb	r3, [r0, #2]
 800b25e:	70c1      	strb	r1, [r0, #3]
 800b260:	1d03      	adds	r3, r0, #4
 800b262:	e7f1      	b.n	800b248 <__exponent+0x60>

0800b264 <_printf_float>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	ed2d 8b02 	vpush	{d8}
 800b26c:	b08d      	sub	sp, #52	; 0x34
 800b26e:	460c      	mov	r4, r1
 800b270:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b274:	4616      	mov	r6, r2
 800b276:	461f      	mov	r7, r3
 800b278:	4605      	mov	r5, r0
 800b27a:	f001 f84f 	bl	800c31c <_localeconv_r>
 800b27e:	f8d0 a000 	ldr.w	sl, [r0]
 800b282:	4650      	mov	r0, sl
 800b284:	f7f4 fff4 	bl	8000270 <strlen>
 800b288:	2300      	movs	r3, #0
 800b28a:	930a      	str	r3, [sp, #40]	; 0x28
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	9305      	str	r3, [sp, #20]
 800b290:	f8d8 3000 	ldr.w	r3, [r8]
 800b294:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b298:	3307      	adds	r3, #7
 800b29a:	f023 0307 	bic.w	r3, r3, #7
 800b29e:	f103 0208 	add.w	r2, r3, #8
 800b2a2:	f8c8 2000 	str.w	r2, [r8]
 800b2a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2ae:	9307      	str	r3, [sp, #28]
 800b2b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2b4:	ee08 0a10 	vmov	s16, r0
 800b2b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b2bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2c0:	4b9e      	ldr	r3, [pc, #632]	; (800b53c <_printf_float+0x2d8>)
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c6:	f7f5 fc31 	bl	8000b2c <__aeabi_dcmpun>
 800b2ca:	bb88      	cbnz	r0, 800b330 <_printf_float+0xcc>
 800b2cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2d0:	4b9a      	ldr	r3, [pc, #616]	; (800b53c <_printf_float+0x2d8>)
 800b2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d6:	f7f5 fc0b 	bl	8000af0 <__aeabi_dcmple>
 800b2da:	bb48      	cbnz	r0, 800b330 <_printf_float+0xcc>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2300      	movs	r3, #0
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	f7f5 fbfa 	bl	8000adc <__aeabi_dcmplt>
 800b2e8:	b110      	cbz	r0, 800b2f0 <_printf_float+0x8c>
 800b2ea:	232d      	movs	r3, #45	; 0x2d
 800b2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2f0:	4a93      	ldr	r2, [pc, #588]	; (800b540 <_printf_float+0x2dc>)
 800b2f2:	4b94      	ldr	r3, [pc, #592]	; (800b544 <_printf_float+0x2e0>)
 800b2f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b2f8:	bf94      	ite	ls
 800b2fa:	4690      	movls	r8, r2
 800b2fc:	4698      	movhi	r8, r3
 800b2fe:	2303      	movs	r3, #3
 800b300:	6123      	str	r3, [r4, #16]
 800b302:	9b05      	ldr	r3, [sp, #20]
 800b304:	f023 0304 	bic.w	r3, r3, #4
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	f04f 0900 	mov.w	r9, #0
 800b30e:	9700      	str	r7, [sp, #0]
 800b310:	4633      	mov	r3, r6
 800b312:	aa0b      	add	r2, sp, #44	; 0x2c
 800b314:	4621      	mov	r1, r4
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f9da 	bl	800b6d0 <_printf_common>
 800b31c:	3001      	adds	r0, #1
 800b31e:	f040 8090 	bne.w	800b442 <_printf_float+0x1de>
 800b322:	f04f 30ff 	mov.w	r0, #4294967295
 800b326:	b00d      	add	sp, #52	; 0x34
 800b328:	ecbd 8b02 	vpop	{d8}
 800b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b330:	4642      	mov	r2, r8
 800b332:	464b      	mov	r3, r9
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f5 fbf8 	bl	8000b2c <__aeabi_dcmpun>
 800b33c:	b140      	cbz	r0, 800b350 <_printf_float+0xec>
 800b33e:	464b      	mov	r3, r9
 800b340:	2b00      	cmp	r3, #0
 800b342:	bfbc      	itt	lt
 800b344:	232d      	movlt	r3, #45	; 0x2d
 800b346:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b34a:	4a7f      	ldr	r2, [pc, #508]	; (800b548 <_printf_float+0x2e4>)
 800b34c:	4b7f      	ldr	r3, [pc, #508]	; (800b54c <_printf_float+0x2e8>)
 800b34e:	e7d1      	b.n	800b2f4 <_printf_float+0x90>
 800b350:	6863      	ldr	r3, [r4, #4]
 800b352:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b356:	9206      	str	r2, [sp, #24]
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	d13f      	bne.n	800b3dc <_printf_float+0x178>
 800b35c:	2306      	movs	r3, #6
 800b35e:	6063      	str	r3, [r4, #4]
 800b360:	9b05      	ldr	r3, [sp, #20]
 800b362:	6861      	ldr	r1, [r4, #4]
 800b364:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b368:	2300      	movs	r3, #0
 800b36a:	9303      	str	r3, [sp, #12]
 800b36c:	ab0a      	add	r3, sp, #40	; 0x28
 800b36e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b372:	ab09      	add	r3, sp, #36	; 0x24
 800b374:	ec49 8b10 	vmov	d0, r8, r9
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	6022      	str	r2, [r4, #0]
 800b37c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b380:	4628      	mov	r0, r5
 800b382:	f7ff fecf 	bl	800b124 <__cvt>
 800b386:	9b06      	ldr	r3, [sp, #24]
 800b388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b38a:	2b47      	cmp	r3, #71	; 0x47
 800b38c:	4680      	mov	r8, r0
 800b38e:	d108      	bne.n	800b3a2 <_printf_float+0x13e>
 800b390:	1cc8      	adds	r0, r1, #3
 800b392:	db02      	blt.n	800b39a <_printf_float+0x136>
 800b394:	6863      	ldr	r3, [r4, #4]
 800b396:	4299      	cmp	r1, r3
 800b398:	dd41      	ble.n	800b41e <_printf_float+0x1ba>
 800b39a:	f1ab 0302 	sub.w	r3, fp, #2
 800b39e:	fa5f fb83 	uxtb.w	fp, r3
 800b3a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b3a6:	d820      	bhi.n	800b3ea <_printf_float+0x186>
 800b3a8:	3901      	subs	r1, #1
 800b3aa:	465a      	mov	r2, fp
 800b3ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b3b0:	9109      	str	r1, [sp, #36]	; 0x24
 800b3b2:	f7ff ff19 	bl	800b1e8 <__exponent>
 800b3b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3b8:	1813      	adds	r3, r2, r0
 800b3ba:	2a01      	cmp	r2, #1
 800b3bc:	4681      	mov	r9, r0
 800b3be:	6123      	str	r3, [r4, #16]
 800b3c0:	dc02      	bgt.n	800b3c8 <_printf_float+0x164>
 800b3c2:	6822      	ldr	r2, [r4, #0]
 800b3c4:	07d2      	lsls	r2, r2, #31
 800b3c6:	d501      	bpl.n	800b3cc <_printf_float+0x168>
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d09c      	beq.n	800b30e <_printf_float+0xaa>
 800b3d4:	232d      	movs	r3, #45	; 0x2d
 800b3d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3da:	e798      	b.n	800b30e <_printf_float+0xaa>
 800b3dc:	9a06      	ldr	r2, [sp, #24]
 800b3de:	2a47      	cmp	r2, #71	; 0x47
 800b3e0:	d1be      	bne.n	800b360 <_printf_float+0xfc>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1bc      	bne.n	800b360 <_printf_float+0xfc>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e7b9      	b.n	800b35e <_printf_float+0xfa>
 800b3ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b3ee:	d118      	bne.n	800b422 <_printf_float+0x1be>
 800b3f0:	2900      	cmp	r1, #0
 800b3f2:	6863      	ldr	r3, [r4, #4]
 800b3f4:	dd0b      	ble.n	800b40e <_printf_float+0x1aa>
 800b3f6:	6121      	str	r1, [r4, #16]
 800b3f8:	b913      	cbnz	r3, 800b400 <_printf_float+0x19c>
 800b3fa:	6822      	ldr	r2, [r4, #0]
 800b3fc:	07d0      	lsls	r0, r2, #31
 800b3fe:	d502      	bpl.n	800b406 <_printf_float+0x1a2>
 800b400:	3301      	adds	r3, #1
 800b402:	440b      	add	r3, r1
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	65a1      	str	r1, [r4, #88]	; 0x58
 800b408:	f04f 0900 	mov.w	r9, #0
 800b40c:	e7de      	b.n	800b3cc <_printf_float+0x168>
 800b40e:	b913      	cbnz	r3, 800b416 <_printf_float+0x1b2>
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	07d2      	lsls	r2, r2, #31
 800b414:	d501      	bpl.n	800b41a <_printf_float+0x1b6>
 800b416:	3302      	adds	r3, #2
 800b418:	e7f4      	b.n	800b404 <_printf_float+0x1a0>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e7f2      	b.n	800b404 <_printf_float+0x1a0>
 800b41e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b424:	4299      	cmp	r1, r3
 800b426:	db05      	blt.n	800b434 <_printf_float+0x1d0>
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	6121      	str	r1, [r4, #16]
 800b42c:	07d8      	lsls	r0, r3, #31
 800b42e:	d5ea      	bpl.n	800b406 <_printf_float+0x1a2>
 800b430:	1c4b      	adds	r3, r1, #1
 800b432:	e7e7      	b.n	800b404 <_printf_float+0x1a0>
 800b434:	2900      	cmp	r1, #0
 800b436:	bfd4      	ite	le
 800b438:	f1c1 0202 	rsble	r2, r1, #2
 800b43c:	2201      	movgt	r2, #1
 800b43e:	4413      	add	r3, r2
 800b440:	e7e0      	b.n	800b404 <_printf_float+0x1a0>
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	055a      	lsls	r2, r3, #21
 800b446:	d407      	bmi.n	800b458 <_printf_float+0x1f4>
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	4642      	mov	r2, r8
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	d12c      	bne.n	800b4b0 <_printf_float+0x24c>
 800b456:	e764      	b.n	800b322 <_printf_float+0xbe>
 800b458:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b45c:	f240 80e0 	bls.w	800b620 <_printf_float+0x3bc>
 800b460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b464:	2200      	movs	r2, #0
 800b466:	2300      	movs	r3, #0
 800b468:	f7f5 fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d034      	beq.n	800b4da <_printf_float+0x276>
 800b470:	4a37      	ldr	r2, [pc, #220]	; (800b550 <_printf_float+0x2ec>)
 800b472:	2301      	movs	r3, #1
 800b474:	4631      	mov	r1, r6
 800b476:	4628      	mov	r0, r5
 800b478:	47b8      	blx	r7
 800b47a:	3001      	adds	r0, #1
 800b47c:	f43f af51 	beq.w	800b322 <_printf_float+0xbe>
 800b480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b484:	429a      	cmp	r2, r3
 800b486:	db02      	blt.n	800b48e <_printf_float+0x22a>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	07d8      	lsls	r0, r3, #31
 800b48c:	d510      	bpl.n	800b4b0 <_printf_float+0x24c>
 800b48e:	ee18 3a10 	vmov	r3, s16
 800b492:	4652      	mov	r2, sl
 800b494:	4631      	mov	r1, r6
 800b496:	4628      	mov	r0, r5
 800b498:	47b8      	blx	r7
 800b49a:	3001      	adds	r0, #1
 800b49c:	f43f af41 	beq.w	800b322 <_printf_float+0xbe>
 800b4a0:	f04f 0800 	mov.w	r8, #0
 800b4a4:	f104 091a 	add.w	r9, r4, #26
 800b4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	4543      	cmp	r3, r8
 800b4ae:	dc09      	bgt.n	800b4c4 <_printf_float+0x260>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	079b      	lsls	r3, r3, #30
 800b4b4:	f100 8107 	bmi.w	800b6c6 <_printf_float+0x462>
 800b4b8:	68e0      	ldr	r0, [r4, #12]
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4bc:	4298      	cmp	r0, r3
 800b4be:	bfb8      	it	lt
 800b4c0:	4618      	movlt	r0, r3
 800b4c2:	e730      	b.n	800b326 <_printf_float+0xc2>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	464a      	mov	r2, r9
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f af27 	beq.w	800b322 <_printf_float+0xbe>
 800b4d4:	f108 0801 	add.w	r8, r8, #1
 800b4d8:	e7e6      	b.n	800b4a8 <_printf_float+0x244>
 800b4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc39      	bgt.n	800b554 <_printf_float+0x2f0>
 800b4e0:	4a1b      	ldr	r2, [pc, #108]	; (800b550 <_printf_float+0x2ec>)
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	47b8      	blx	r7
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	f43f af19 	beq.w	800b322 <_printf_float+0xbe>
 800b4f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	d102      	bne.n	800b4fe <_printf_float+0x29a>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	07d9      	lsls	r1, r3, #31
 800b4fc:	d5d8      	bpl.n	800b4b0 <_printf_float+0x24c>
 800b4fe:	ee18 3a10 	vmov	r3, s16
 800b502:	4652      	mov	r2, sl
 800b504:	4631      	mov	r1, r6
 800b506:	4628      	mov	r0, r5
 800b508:	47b8      	blx	r7
 800b50a:	3001      	adds	r0, #1
 800b50c:	f43f af09 	beq.w	800b322 <_printf_float+0xbe>
 800b510:	f04f 0900 	mov.w	r9, #0
 800b514:	f104 0a1a 	add.w	sl, r4, #26
 800b518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51a:	425b      	negs	r3, r3
 800b51c:	454b      	cmp	r3, r9
 800b51e:	dc01      	bgt.n	800b524 <_printf_float+0x2c0>
 800b520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b522:	e792      	b.n	800b44a <_printf_float+0x1e6>
 800b524:	2301      	movs	r3, #1
 800b526:	4652      	mov	r2, sl
 800b528:	4631      	mov	r1, r6
 800b52a:	4628      	mov	r0, r5
 800b52c:	47b8      	blx	r7
 800b52e:	3001      	adds	r0, #1
 800b530:	f43f aef7 	beq.w	800b322 <_printf_float+0xbe>
 800b534:	f109 0901 	add.w	r9, r9, #1
 800b538:	e7ee      	b.n	800b518 <_printf_float+0x2b4>
 800b53a:	bf00      	nop
 800b53c:	7fefffff 	.word	0x7fefffff
 800b540:	08011e88 	.word	0x08011e88
 800b544:	08011e8c 	.word	0x08011e8c
 800b548:	08011e90 	.word	0x08011e90
 800b54c:	08011e94 	.word	0x08011e94
 800b550:	08012260 	.word	0x08012260
 800b554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b558:	429a      	cmp	r2, r3
 800b55a:	bfa8      	it	ge
 800b55c:	461a      	movge	r2, r3
 800b55e:	2a00      	cmp	r2, #0
 800b560:	4691      	mov	r9, r2
 800b562:	dc37      	bgt.n	800b5d4 <_printf_float+0x370>
 800b564:	f04f 0b00 	mov.w	fp, #0
 800b568:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b56c:	f104 021a 	add.w	r2, r4, #26
 800b570:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b572:	9305      	str	r3, [sp, #20]
 800b574:	eba3 0309 	sub.w	r3, r3, r9
 800b578:	455b      	cmp	r3, fp
 800b57a:	dc33      	bgt.n	800b5e4 <_printf_float+0x380>
 800b57c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b580:	429a      	cmp	r2, r3
 800b582:	db3b      	blt.n	800b5fc <_printf_float+0x398>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	07da      	lsls	r2, r3, #31
 800b588:	d438      	bmi.n	800b5fc <_printf_float+0x398>
 800b58a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b58e:	eba2 0903 	sub.w	r9, r2, r3
 800b592:	9b05      	ldr	r3, [sp, #20]
 800b594:	1ad2      	subs	r2, r2, r3
 800b596:	4591      	cmp	r9, r2
 800b598:	bfa8      	it	ge
 800b59a:	4691      	movge	r9, r2
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	dc35      	bgt.n	800b60e <_printf_float+0x3aa>
 800b5a2:	f04f 0800 	mov.w	r8, #0
 800b5a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5aa:	f104 0a1a 	add.w	sl, r4, #26
 800b5ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	eba3 0309 	sub.w	r3, r3, r9
 800b5b8:	4543      	cmp	r3, r8
 800b5ba:	f77f af79 	ble.w	800b4b0 <_printf_float+0x24c>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4652      	mov	r2, sl
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	47b8      	blx	r7
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	f43f aeaa 	beq.w	800b322 <_printf_float+0xbe>
 800b5ce:	f108 0801 	add.w	r8, r8, #1
 800b5d2:	e7ec      	b.n	800b5ae <_printf_float+0x34a>
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4642      	mov	r2, r8
 800b5da:	4628      	mov	r0, r5
 800b5dc:	47b8      	blx	r7
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d1c0      	bne.n	800b564 <_printf_float+0x300>
 800b5e2:	e69e      	b.n	800b322 <_printf_float+0xbe>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	9205      	str	r2, [sp, #20]
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f43f ae97 	beq.w	800b322 <_printf_float+0xbe>
 800b5f4:	9a05      	ldr	r2, [sp, #20]
 800b5f6:	f10b 0b01 	add.w	fp, fp, #1
 800b5fa:	e7b9      	b.n	800b570 <_printf_float+0x30c>
 800b5fc:	ee18 3a10 	vmov	r3, s16
 800b600:	4652      	mov	r2, sl
 800b602:	4631      	mov	r1, r6
 800b604:	4628      	mov	r0, r5
 800b606:	47b8      	blx	r7
 800b608:	3001      	adds	r0, #1
 800b60a:	d1be      	bne.n	800b58a <_printf_float+0x326>
 800b60c:	e689      	b.n	800b322 <_printf_float+0xbe>
 800b60e:	9a05      	ldr	r2, [sp, #20]
 800b610:	464b      	mov	r3, r9
 800b612:	4442      	add	r2, r8
 800b614:	4631      	mov	r1, r6
 800b616:	4628      	mov	r0, r5
 800b618:	47b8      	blx	r7
 800b61a:	3001      	adds	r0, #1
 800b61c:	d1c1      	bne.n	800b5a2 <_printf_float+0x33e>
 800b61e:	e680      	b.n	800b322 <_printf_float+0xbe>
 800b620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b622:	2a01      	cmp	r2, #1
 800b624:	dc01      	bgt.n	800b62a <_printf_float+0x3c6>
 800b626:	07db      	lsls	r3, r3, #31
 800b628:	d53a      	bpl.n	800b6a0 <_printf_float+0x43c>
 800b62a:	2301      	movs	r3, #1
 800b62c:	4642      	mov	r2, r8
 800b62e:	4631      	mov	r1, r6
 800b630:	4628      	mov	r0, r5
 800b632:	47b8      	blx	r7
 800b634:	3001      	adds	r0, #1
 800b636:	f43f ae74 	beq.w	800b322 <_printf_float+0xbe>
 800b63a:	ee18 3a10 	vmov	r3, s16
 800b63e:	4652      	mov	r2, sl
 800b640:	4631      	mov	r1, r6
 800b642:	4628      	mov	r0, r5
 800b644:	47b8      	blx	r7
 800b646:	3001      	adds	r0, #1
 800b648:	f43f ae6b 	beq.w	800b322 <_printf_float+0xbe>
 800b64c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b650:	2200      	movs	r2, #0
 800b652:	2300      	movs	r3, #0
 800b654:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b658:	f7f5 fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800b65c:	b9d8      	cbnz	r0, 800b696 <_printf_float+0x432>
 800b65e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b662:	f108 0201 	add.w	r2, r8, #1
 800b666:	4631      	mov	r1, r6
 800b668:	4628      	mov	r0, r5
 800b66a:	47b8      	blx	r7
 800b66c:	3001      	adds	r0, #1
 800b66e:	d10e      	bne.n	800b68e <_printf_float+0x42a>
 800b670:	e657      	b.n	800b322 <_printf_float+0xbe>
 800b672:	2301      	movs	r3, #1
 800b674:	4652      	mov	r2, sl
 800b676:	4631      	mov	r1, r6
 800b678:	4628      	mov	r0, r5
 800b67a:	47b8      	blx	r7
 800b67c:	3001      	adds	r0, #1
 800b67e:	f43f ae50 	beq.w	800b322 <_printf_float+0xbe>
 800b682:	f108 0801 	add.w	r8, r8, #1
 800b686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b688:	3b01      	subs	r3, #1
 800b68a:	4543      	cmp	r3, r8
 800b68c:	dcf1      	bgt.n	800b672 <_printf_float+0x40e>
 800b68e:	464b      	mov	r3, r9
 800b690:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b694:	e6da      	b.n	800b44c <_printf_float+0x1e8>
 800b696:	f04f 0800 	mov.w	r8, #0
 800b69a:	f104 0a1a 	add.w	sl, r4, #26
 800b69e:	e7f2      	b.n	800b686 <_printf_float+0x422>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	4642      	mov	r2, r8
 800b6a4:	e7df      	b.n	800b666 <_printf_float+0x402>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	464a      	mov	r2, r9
 800b6aa:	4631      	mov	r1, r6
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	47b8      	blx	r7
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	f43f ae36 	beq.w	800b322 <_printf_float+0xbe>
 800b6b6:	f108 0801 	add.w	r8, r8, #1
 800b6ba:	68e3      	ldr	r3, [r4, #12]
 800b6bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6be:	1a5b      	subs	r3, r3, r1
 800b6c0:	4543      	cmp	r3, r8
 800b6c2:	dcf0      	bgt.n	800b6a6 <_printf_float+0x442>
 800b6c4:	e6f8      	b.n	800b4b8 <_printf_float+0x254>
 800b6c6:	f04f 0800 	mov.w	r8, #0
 800b6ca:	f104 0919 	add.w	r9, r4, #25
 800b6ce:	e7f4      	b.n	800b6ba <_printf_float+0x456>

0800b6d0 <_printf_common>:
 800b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d4:	4616      	mov	r6, r2
 800b6d6:	4699      	mov	r9, r3
 800b6d8:	688a      	ldr	r2, [r1, #8]
 800b6da:	690b      	ldr	r3, [r1, #16]
 800b6dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	bfb8      	it	lt
 800b6e4:	4613      	movlt	r3, r2
 800b6e6:	6033      	str	r3, [r6, #0]
 800b6e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	b10a      	cbz	r2, 800b6f6 <_printf_common+0x26>
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	6033      	str	r3, [r6, #0]
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	0699      	lsls	r1, r3, #26
 800b6fa:	bf42      	ittt	mi
 800b6fc:	6833      	ldrmi	r3, [r6, #0]
 800b6fe:	3302      	addmi	r3, #2
 800b700:	6033      	strmi	r3, [r6, #0]
 800b702:	6825      	ldr	r5, [r4, #0]
 800b704:	f015 0506 	ands.w	r5, r5, #6
 800b708:	d106      	bne.n	800b718 <_printf_common+0x48>
 800b70a:	f104 0a19 	add.w	sl, r4, #25
 800b70e:	68e3      	ldr	r3, [r4, #12]
 800b710:	6832      	ldr	r2, [r6, #0]
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	42ab      	cmp	r3, r5
 800b716:	dc26      	bgt.n	800b766 <_printf_common+0x96>
 800b718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b71c:	1e13      	subs	r3, r2, #0
 800b71e:	6822      	ldr	r2, [r4, #0]
 800b720:	bf18      	it	ne
 800b722:	2301      	movne	r3, #1
 800b724:	0692      	lsls	r2, r2, #26
 800b726:	d42b      	bmi.n	800b780 <_printf_common+0xb0>
 800b728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b72c:	4649      	mov	r1, r9
 800b72e:	4638      	mov	r0, r7
 800b730:	47c0      	blx	r8
 800b732:	3001      	adds	r0, #1
 800b734:	d01e      	beq.n	800b774 <_printf_common+0xa4>
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	6922      	ldr	r2, [r4, #16]
 800b73a:	f003 0306 	and.w	r3, r3, #6
 800b73e:	2b04      	cmp	r3, #4
 800b740:	bf02      	ittt	eq
 800b742:	68e5      	ldreq	r5, [r4, #12]
 800b744:	6833      	ldreq	r3, [r6, #0]
 800b746:	1aed      	subeq	r5, r5, r3
 800b748:	68a3      	ldr	r3, [r4, #8]
 800b74a:	bf0c      	ite	eq
 800b74c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b750:	2500      	movne	r5, #0
 800b752:	4293      	cmp	r3, r2
 800b754:	bfc4      	itt	gt
 800b756:	1a9b      	subgt	r3, r3, r2
 800b758:	18ed      	addgt	r5, r5, r3
 800b75a:	2600      	movs	r6, #0
 800b75c:	341a      	adds	r4, #26
 800b75e:	42b5      	cmp	r5, r6
 800b760:	d11a      	bne.n	800b798 <_printf_common+0xc8>
 800b762:	2000      	movs	r0, #0
 800b764:	e008      	b.n	800b778 <_printf_common+0xa8>
 800b766:	2301      	movs	r3, #1
 800b768:	4652      	mov	r2, sl
 800b76a:	4649      	mov	r1, r9
 800b76c:	4638      	mov	r0, r7
 800b76e:	47c0      	blx	r8
 800b770:	3001      	adds	r0, #1
 800b772:	d103      	bne.n	800b77c <_printf_common+0xac>
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77c:	3501      	adds	r5, #1
 800b77e:	e7c6      	b.n	800b70e <_printf_common+0x3e>
 800b780:	18e1      	adds	r1, r4, r3
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	2030      	movs	r0, #48	; 0x30
 800b786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b78a:	4422      	add	r2, r4
 800b78c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b794:	3302      	adds	r3, #2
 800b796:	e7c7      	b.n	800b728 <_printf_common+0x58>
 800b798:	2301      	movs	r3, #1
 800b79a:	4622      	mov	r2, r4
 800b79c:	4649      	mov	r1, r9
 800b79e:	4638      	mov	r0, r7
 800b7a0:	47c0      	blx	r8
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	d0e6      	beq.n	800b774 <_printf_common+0xa4>
 800b7a6:	3601      	adds	r6, #1
 800b7a8:	e7d9      	b.n	800b75e <_printf_common+0x8e>
	...

0800b7ac <_printf_i>:
 800b7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	7e0f      	ldrb	r7, [r1, #24]
 800b7b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7b4:	2f78      	cmp	r7, #120	; 0x78
 800b7b6:	4691      	mov	r9, r2
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	469a      	mov	sl, r3
 800b7be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7c2:	d807      	bhi.n	800b7d4 <_printf_i+0x28>
 800b7c4:	2f62      	cmp	r7, #98	; 0x62
 800b7c6:	d80a      	bhi.n	800b7de <_printf_i+0x32>
 800b7c8:	2f00      	cmp	r7, #0
 800b7ca:	f000 80d4 	beq.w	800b976 <_printf_i+0x1ca>
 800b7ce:	2f58      	cmp	r7, #88	; 0x58
 800b7d0:	f000 80c0 	beq.w	800b954 <_printf_i+0x1a8>
 800b7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7dc:	e03a      	b.n	800b854 <_printf_i+0xa8>
 800b7de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7e2:	2b15      	cmp	r3, #21
 800b7e4:	d8f6      	bhi.n	800b7d4 <_printf_i+0x28>
 800b7e6:	a101      	add	r1, pc, #4	; (adr r1, 800b7ec <_printf_i+0x40>)
 800b7e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7ec:	0800b845 	.word	0x0800b845
 800b7f0:	0800b859 	.word	0x0800b859
 800b7f4:	0800b7d5 	.word	0x0800b7d5
 800b7f8:	0800b7d5 	.word	0x0800b7d5
 800b7fc:	0800b7d5 	.word	0x0800b7d5
 800b800:	0800b7d5 	.word	0x0800b7d5
 800b804:	0800b859 	.word	0x0800b859
 800b808:	0800b7d5 	.word	0x0800b7d5
 800b80c:	0800b7d5 	.word	0x0800b7d5
 800b810:	0800b7d5 	.word	0x0800b7d5
 800b814:	0800b7d5 	.word	0x0800b7d5
 800b818:	0800b95d 	.word	0x0800b95d
 800b81c:	0800b885 	.word	0x0800b885
 800b820:	0800b917 	.word	0x0800b917
 800b824:	0800b7d5 	.word	0x0800b7d5
 800b828:	0800b7d5 	.word	0x0800b7d5
 800b82c:	0800b97f 	.word	0x0800b97f
 800b830:	0800b7d5 	.word	0x0800b7d5
 800b834:	0800b885 	.word	0x0800b885
 800b838:	0800b7d5 	.word	0x0800b7d5
 800b83c:	0800b7d5 	.word	0x0800b7d5
 800b840:	0800b91f 	.word	0x0800b91f
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	1d1a      	adds	r2, r3, #4
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	602a      	str	r2, [r5, #0]
 800b84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b854:	2301      	movs	r3, #1
 800b856:	e09f      	b.n	800b998 <_printf_i+0x1ec>
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	682b      	ldr	r3, [r5, #0]
 800b85c:	0607      	lsls	r7, r0, #24
 800b85e:	f103 0104 	add.w	r1, r3, #4
 800b862:	6029      	str	r1, [r5, #0]
 800b864:	d501      	bpl.n	800b86a <_printf_i+0xbe>
 800b866:	681e      	ldr	r6, [r3, #0]
 800b868:	e003      	b.n	800b872 <_printf_i+0xc6>
 800b86a:	0646      	lsls	r6, r0, #25
 800b86c:	d5fb      	bpl.n	800b866 <_printf_i+0xba>
 800b86e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b872:	2e00      	cmp	r6, #0
 800b874:	da03      	bge.n	800b87e <_printf_i+0xd2>
 800b876:	232d      	movs	r3, #45	; 0x2d
 800b878:	4276      	negs	r6, r6
 800b87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b87e:	485a      	ldr	r0, [pc, #360]	; (800b9e8 <_printf_i+0x23c>)
 800b880:	230a      	movs	r3, #10
 800b882:	e012      	b.n	800b8aa <_printf_i+0xfe>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	6820      	ldr	r0, [r4, #0]
 800b888:	1d19      	adds	r1, r3, #4
 800b88a:	6029      	str	r1, [r5, #0]
 800b88c:	0605      	lsls	r5, r0, #24
 800b88e:	d501      	bpl.n	800b894 <_printf_i+0xe8>
 800b890:	681e      	ldr	r6, [r3, #0]
 800b892:	e002      	b.n	800b89a <_printf_i+0xee>
 800b894:	0641      	lsls	r1, r0, #25
 800b896:	d5fb      	bpl.n	800b890 <_printf_i+0xe4>
 800b898:	881e      	ldrh	r6, [r3, #0]
 800b89a:	4853      	ldr	r0, [pc, #332]	; (800b9e8 <_printf_i+0x23c>)
 800b89c:	2f6f      	cmp	r7, #111	; 0x6f
 800b89e:	bf0c      	ite	eq
 800b8a0:	2308      	moveq	r3, #8
 800b8a2:	230a      	movne	r3, #10
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8aa:	6865      	ldr	r5, [r4, #4]
 800b8ac:	60a5      	str	r5, [r4, #8]
 800b8ae:	2d00      	cmp	r5, #0
 800b8b0:	bfa2      	ittt	ge
 800b8b2:	6821      	ldrge	r1, [r4, #0]
 800b8b4:	f021 0104 	bicge.w	r1, r1, #4
 800b8b8:	6021      	strge	r1, [r4, #0]
 800b8ba:	b90e      	cbnz	r6, 800b8c0 <_printf_i+0x114>
 800b8bc:	2d00      	cmp	r5, #0
 800b8be:	d04b      	beq.n	800b958 <_printf_i+0x1ac>
 800b8c0:	4615      	mov	r5, r2
 800b8c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b8ca:	5dc7      	ldrb	r7, [r0, r7]
 800b8cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8d0:	4637      	mov	r7, r6
 800b8d2:	42bb      	cmp	r3, r7
 800b8d4:	460e      	mov	r6, r1
 800b8d6:	d9f4      	bls.n	800b8c2 <_printf_i+0x116>
 800b8d8:	2b08      	cmp	r3, #8
 800b8da:	d10b      	bne.n	800b8f4 <_printf_i+0x148>
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	07de      	lsls	r6, r3, #31
 800b8e0:	d508      	bpl.n	800b8f4 <_printf_i+0x148>
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	6861      	ldr	r1, [r4, #4]
 800b8e6:	4299      	cmp	r1, r3
 800b8e8:	bfde      	ittt	le
 800b8ea:	2330      	movle	r3, #48	; 0x30
 800b8ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8f4:	1b52      	subs	r2, r2, r5
 800b8f6:	6122      	str	r2, [r4, #16]
 800b8f8:	f8cd a000 	str.w	sl, [sp]
 800b8fc:	464b      	mov	r3, r9
 800b8fe:	aa03      	add	r2, sp, #12
 800b900:	4621      	mov	r1, r4
 800b902:	4640      	mov	r0, r8
 800b904:	f7ff fee4 	bl	800b6d0 <_printf_common>
 800b908:	3001      	adds	r0, #1
 800b90a:	d14a      	bne.n	800b9a2 <_printf_i+0x1f6>
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295
 800b910:	b004      	add	sp, #16
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	f043 0320 	orr.w	r3, r3, #32
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	4833      	ldr	r0, [pc, #204]	; (800b9ec <_printf_i+0x240>)
 800b920:	2778      	movs	r7, #120	; 0x78
 800b922:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	6829      	ldr	r1, [r5, #0]
 800b92a:	061f      	lsls	r7, r3, #24
 800b92c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b930:	d402      	bmi.n	800b938 <_printf_i+0x18c>
 800b932:	065f      	lsls	r7, r3, #25
 800b934:	bf48      	it	mi
 800b936:	b2b6      	uxthmi	r6, r6
 800b938:	07df      	lsls	r7, r3, #31
 800b93a:	bf48      	it	mi
 800b93c:	f043 0320 	orrmi.w	r3, r3, #32
 800b940:	6029      	str	r1, [r5, #0]
 800b942:	bf48      	it	mi
 800b944:	6023      	strmi	r3, [r4, #0]
 800b946:	b91e      	cbnz	r6, 800b950 <_printf_i+0x1a4>
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	f023 0320 	bic.w	r3, r3, #32
 800b94e:	6023      	str	r3, [r4, #0]
 800b950:	2310      	movs	r3, #16
 800b952:	e7a7      	b.n	800b8a4 <_printf_i+0xf8>
 800b954:	4824      	ldr	r0, [pc, #144]	; (800b9e8 <_printf_i+0x23c>)
 800b956:	e7e4      	b.n	800b922 <_printf_i+0x176>
 800b958:	4615      	mov	r5, r2
 800b95a:	e7bd      	b.n	800b8d8 <_printf_i+0x12c>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	6826      	ldr	r6, [r4, #0]
 800b960:	6961      	ldr	r1, [r4, #20]
 800b962:	1d18      	adds	r0, r3, #4
 800b964:	6028      	str	r0, [r5, #0]
 800b966:	0635      	lsls	r5, r6, #24
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	d501      	bpl.n	800b970 <_printf_i+0x1c4>
 800b96c:	6019      	str	r1, [r3, #0]
 800b96e:	e002      	b.n	800b976 <_printf_i+0x1ca>
 800b970:	0670      	lsls	r0, r6, #25
 800b972:	d5fb      	bpl.n	800b96c <_printf_i+0x1c0>
 800b974:	8019      	strh	r1, [r3, #0]
 800b976:	2300      	movs	r3, #0
 800b978:	6123      	str	r3, [r4, #16]
 800b97a:	4615      	mov	r5, r2
 800b97c:	e7bc      	b.n	800b8f8 <_printf_i+0x14c>
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	1d1a      	adds	r2, r3, #4
 800b982:	602a      	str	r2, [r5, #0]
 800b984:	681d      	ldr	r5, [r3, #0]
 800b986:	6862      	ldr	r2, [r4, #4]
 800b988:	2100      	movs	r1, #0
 800b98a:	4628      	mov	r0, r5
 800b98c:	f7f4 fc20 	bl	80001d0 <memchr>
 800b990:	b108      	cbz	r0, 800b996 <_printf_i+0x1ea>
 800b992:	1b40      	subs	r0, r0, r5
 800b994:	6060      	str	r0, [r4, #4]
 800b996:	6863      	ldr	r3, [r4, #4]
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	2300      	movs	r3, #0
 800b99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9a0:	e7aa      	b.n	800b8f8 <_printf_i+0x14c>
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	47d0      	blx	sl
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d0ad      	beq.n	800b90c <_printf_i+0x160>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	079b      	lsls	r3, r3, #30
 800b9b4:	d413      	bmi.n	800b9de <_printf_i+0x232>
 800b9b6:	68e0      	ldr	r0, [r4, #12]
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	bfb8      	it	lt
 800b9be:	4618      	movlt	r0, r3
 800b9c0:	e7a6      	b.n	800b910 <_printf_i+0x164>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	47d0      	blx	sl
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d09d      	beq.n	800b90c <_printf_i+0x160>
 800b9d0:	3501      	adds	r5, #1
 800b9d2:	68e3      	ldr	r3, [r4, #12]
 800b9d4:	9903      	ldr	r1, [sp, #12]
 800b9d6:	1a5b      	subs	r3, r3, r1
 800b9d8:	42ab      	cmp	r3, r5
 800b9da:	dcf2      	bgt.n	800b9c2 <_printf_i+0x216>
 800b9dc:	e7eb      	b.n	800b9b6 <_printf_i+0x20a>
 800b9de:	2500      	movs	r5, #0
 800b9e0:	f104 0619 	add.w	r6, r4, #25
 800b9e4:	e7f5      	b.n	800b9d2 <_printf_i+0x226>
 800b9e6:	bf00      	nop
 800b9e8:	08011e98 	.word	0x08011e98
 800b9ec:	08011ea9 	.word	0x08011ea9

0800b9f0 <_scanf_float>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	b087      	sub	sp, #28
 800b9f6:	4617      	mov	r7, r2
 800b9f8:	9303      	str	r3, [sp, #12]
 800b9fa:	688b      	ldr	r3, [r1, #8]
 800b9fc:	1e5a      	subs	r2, r3, #1
 800b9fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba02:	bf83      	ittte	hi
 800ba04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ba08:	195b      	addhi	r3, r3, r5
 800ba0a:	9302      	strhi	r3, [sp, #8]
 800ba0c:	2300      	movls	r3, #0
 800ba0e:	bf86      	itte	hi
 800ba10:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba14:	608b      	strhi	r3, [r1, #8]
 800ba16:	9302      	strls	r3, [sp, #8]
 800ba18:	680b      	ldr	r3, [r1, #0]
 800ba1a:	468b      	mov	fp, r1
 800ba1c:	2500      	movs	r5, #0
 800ba1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ba22:	f84b 3b1c 	str.w	r3, [fp], #28
 800ba26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	465e      	mov	r6, fp
 800ba30:	46aa      	mov	sl, r5
 800ba32:	46a9      	mov	r9, r5
 800ba34:	9501      	str	r5, [sp, #4]
 800ba36:	68a2      	ldr	r2, [r4, #8]
 800ba38:	b152      	cbz	r2, 800ba50 <_scanf_float+0x60>
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	2b4e      	cmp	r3, #78	; 0x4e
 800ba40:	d864      	bhi.n	800bb0c <_scanf_float+0x11c>
 800ba42:	2b40      	cmp	r3, #64	; 0x40
 800ba44:	d83c      	bhi.n	800bac0 <_scanf_float+0xd0>
 800ba46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ba4a:	b2c8      	uxtb	r0, r1
 800ba4c:	280e      	cmp	r0, #14
 800ba4e:	d93a      	bls.n	800bac6 <_scanf_float+0xd6>
 800ba50:	f1b9 0f00 	cmp.w	r9, #0
 800ba54:	d003      	beq.n	800ba5e <_scanf_float+0x6e>
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba62:	f1ba 0f01 	cmp.w	sl, #1
 800ba66:	f200 8113 	bhi.w	800bc90 <_scanf_float+0x2a0>
 800ba6a:	455e      	cmp	r6, fp
 800ba6c:	f200 8105 	bhi.w	800bc7a <_scanf_float+0x28a>
 800ba70:	2501      	movs	r5, #1
 800ba72:	4628      	mov	r0, r5
 800ba74:	b007      	add	sp, #28
 800ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ba7e:	2a0d      	cmp	r2, #13
 800ba80:	d8e6      	bhi.n	800ba50 <_scanf_float+0x60>
 800ba82:	a101      	add	r1, pc, #4	; (adr r1, 800ba88 <_scanf_float+0x98>)
 800ba84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba88:	0800bbc7 	.word	0x0800bbc7
 800ba8c:	0800ba51 	.word	0x0800ba51
 800ba90:	0800ba51 	.word	0x0800ba51
 800ba94:	0800ba51 	.word	0x0800ba51
 800ba98:	0800bc27 	.word	0x0800bc27
 800ba9c:	0800bbff 	.word	0x0800bbff
 800baa0:	0800ba51 	.word	0x0800ba51
 800baa4:	0800ba51 	.word	0x0800ba51
 800baa8:	0800bbd5 	.word	0x0800bbd5
 800baac:	0800ba51 	.word	0x0800ba51
 800bab0:	0800ba51 	.word	0x0800ba51
 800bab4:	0800ba51 	.word	0x0800ba51
 800bab8:	0800ba51 	.word	0x0800ba51
 800babc:	0800bb8d 	.word	0x0800bb8d
 800bac0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bac4:	e7db      	b.n	800ba7e <_scanf_float+0x8e>
 800bac6:	290e      	cmp	r1, #14
 800bac8:	d8c2      	bhi.n	800ba50 <_scanf_float+0x60>
 800baca:	a001      	add	r0, pc, #4	; (adr r0, 800bad0 <_scanf_float+0xe0>)
 800bacc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bad0:	0800bb7f 	.word	0x0800bb7f
 800bad4:	0800ba51 	.word	0x0800ba51
 800bad8:	0800bb7f 	.word	0x0800bb7f
 800badc:	0800bc13 	.word	0x0800bc13
 800bae0:	0800ba51 	.word	0x0800ba51
 800bae4:	0800bb2d 	.word	0x0800bb2d
 800bae8:	0800bb69 	.word	0x0800bb69
 800baec:	0800bb69 	.word	0x0800bb69
 800baf0:	0800bb69 	.word	0x0800bb69
 800baf4:	0800bb69 	.word	0x0800bb69
 800baf8:	0800bb69 	.word	0x0800bb69
 800bafc:	0800bb69 	.word	0x0800bb69
 800bb00:	0800bb69 	.word	0x0800bb69
 800bb04:	0800bb69 	.word	0x0800bb69
 800bb08:	0800bb69 	.word	0x0800bb69
 800bb0c:	2b6e      	cmp	r3, #110	; 0x6e
 800bb0e:	d809      	bhi.n	800bb24 <_scanf_float+0x134>
 800bb10:	2b60      	cmp	r3, #96	; 0x60
 800bb12:	d8b2      	bhi.n	800ba7a <_scanf_float+0x8a>
 800bb14:	2b54      	cmp	r3, #84	; 0x54
 800bb16:	d077      	beq.n	800bc08 <_scanf_float+0x218>
 800bb18:	2b59      	cmp	r3, #89	; 0x59
 800bb1a:	d199      	bne.n	800ba50 <_scanf_float+0x60>
 800bb1c:	2d07      	cmp	r5, #7
 800bb1e:	d197      	bne.n	800ba50 <_scanf_float+0x60>
 800bb20:	2508      	movs	r5, #8
 800bb22:	e029      	b.n	800bb78 <_scanf_float+0x188>
 800bb24:	2b74      	cmp	r3, #116	; 0x74
 800bb26:	d06f      	beq.n	800bc08 <_scanf_float+0x218>
 800bb28:	2b79      	cmp	r3, #121	; 0x79
 800bb2a:	e7f6      	b.n	800bb1a <_scanf_float+0x12a>
 800bb2c:	6821      	ldr	r1, [r4, #0]
 800bb2e:	05c8      	lsls	r0, r1, #23
 800bb30:	d51a      	bpl.n	800bb68 <_scanf_float+0x178>
 800bb32:	9b02      	ldr	r3, [sp, #8]
 800bb34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb38:	6021      	str	r1, [r4, #0]
 800bb3a:	f109 0901 	add.w	r9, r9, #1
 800bb3e:	b11b      	cbz	r3, 800bb48 <_scanf_float+0x158>
 800bb40:	3b01      	subs	r3, #1
 800bb42:	3201      	adds	r2, #1
 800bb44:	9302      	str	r3, [sp, #8]
 800bb46:	60a2      	str	r2, [r4, #8]
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	60a3      	str	r3, [r4, #8]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	3301      	adds	r3, #1
 800bb52:	6123      	str	r3, [r4, #16]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	607b      	str	r3, [r7, #4]
 800bb5c:	f340 8084 	ble.w	800bc68 <_scanf_float+0x278>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	3301      	adds	r3, #1
 800bb64:	603b      	str	r3, [r7, #0]
 800bb66:	e766      	b.n	800ba36 <_scanf_float+0x46>
 800bb68:	eb1a 0f05 	cmn.w	sl, r5
 800bb6c:	f47f af70 	bne.w	800ba50 <_scanf_float+0x60>
 800bb70:	6822      	ldr	r2, [r4, #0]
 800bb72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bb76:	6022      	str	r2, [r4, #0]
 800bb78:	f806 3b01 	strb.w	r3, [r6], #1
 800bb7c:	e7e4      	b.n	800bb48 <_scanf_float+0x158>
 800bb7e:	6822      	ldr	r2, [r4, #0]
 800bb80:	0610      	lsls	r0, r2, #24
 800bb82:	f57f af65 	bpl.w	800ba50 <_scanf_float+0x60>
 800bb86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb8a:	e7f4      	b.n	800bb76 <_scanf_float+0x186>
 800bb8c:	f1ba 0f00 	cmp.w	sl, #0
 800bb90:	d10e      	bne.n	800bbb0 <_scanf_float+0x1c0>
 800bb92:	f1b9 0f00 	cmp.w	r9, #0
 800bb96:	d10e      	bne.n	800bbb6 <_scanf_float+0x1c6>
 800bb98:	6822      	ldr	r2, [r4, #0]
 800bb9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bb9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bba2:	d108      	bne.n	800bbb6 <_scanf_float+0x1c6>
 800bba4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bba8:	6022      	str	r2, [r4, #0]
 800bbaa:	f04f 0a01 	mov.w	sl, #1
 800bbae:	e7e3      	b.n	800bb78 <_scanf_float+0x188>
 800bbb0:	f1ba 0f02 	cmp.w	sl, #2
 800bbb4:	d055      	beq.n	800bc62 <_scanf_float+0x272>
 800bbb6:	2d01      	cmp	r5, #1
 800bbb8:	d002      	beq.n	800bbc0 <_scanf_float+0x1d0>
 800bbba:	2d04      	cmp	r5, #4
 800bbbc:	f47f af48 	bne.w	800ba50 <_scanf_float+0x60>
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	b2ed      	uxtb	r5, r5
 800bbc4:	e7d8      	b.n	800bb78 <_scanf_float+0x188>
 800bbc6:	f1ba 0f01 	cmp.w	sl, #1
 800bbca:	f47f af41 	bne.w	800ba50 <_scanf_float+0x60>
 800bbce:	f04f 0a02 	mov.w	sl, #2
 800bbd2:	e7d1      	b.n	800bb78 <_scanf_float+0x188>
 800bbd4:	b97d      	cbnz	r5, 800bbf6 <_scanf_float+0x206>
 800bbd6:	f1b9 0f00 	cmp.w	r9, #0
 800bbda:	f47f af3c 	bne.w	800ba56 <_scanf_float+0x66>
 800bbde:	6822      	ldr	r2, [r4, #0]
 800bbe0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bbe4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bbe8:	f47f af39 	bne.w	800ba5e <_scanf_float+0x6e>
 800bbec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bbf0:	6022      	str	r2, [r4, #0]
 800bbf2:	2501      	movs	r5, #1
 800bbf4:	e7c0      	b.n	800bb78 <_scanf_float+0x188>
 800bbf6:	2d03      	cmp	r5, #3
 800bbf8:	d0e2      	beq.n	800bbc0 <_scanf_float+0x1d0>
 800bbfa:	2d05      	cmp	r5, #5
 800bbfc:	e7de      	b.n	800bbbc <_scanf_float+0x1cc>
 800bbfe:	2d02      	cmp	r5, #2
 800bc00:	f47f af26 	bne.w	800ba50 <_scanf_float+0x60>
 800bc04:	2503      	movs	r5, #3
 800bc06:	e7b7      	b.n	800bb78 <_scanf_float+0x188>
 800bc08:	2d06      	cmp	r5, #6
 800bc0a:	f47f af21 	bne.w	800ba50 <_scanf_float+0x60>
 800bc0e:	2507      	movs	r5, #7
 800bc10:	e7b2      	b.n	800bb78 <_scanf_float+0x188>
 800bc12:	6822      	ldr	r2, [r4, #0]
 800bc14:	0591      	lsls	r1, r2, #22
 800bc16:	f57f af1b 	bpl.w	800ba50 <_scanf_float+0x60>
 800bc1a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bc1e:	6022      	str	r2, [r4, #0]
 800bc20:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc24:	e7a8      	b.n	800bb78 <_scanf_float+0x188>
 800bc26:	6822      	ldr	r2, [r4, #0]
 800bc28:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bc2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bc30:	d006      	beq.n	800bc40 <_scanf_float+0x250>
 800bc32:	0550      	lsls	r0, r2, #21
 800bc34:	f57f af0c 	bpl.w	800ba50 <_scanf_float+0x60>
 800bc38:	f1b9 0f00 	cmp.w	r9, #0
 800bc3c:	f43f af0f 	beq.w	800ba5e <_scanf_float+0x6e>
 800bc40:	0591      	lsls	r1, r2, #22
 800bc42:	bf58      	it	pl
 800bc44:	9901      	ldrpl	r1, [sp, #4]
 800bc46:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc4a:	bf58      	it	pl
 800bc4c:	eba9 0101 	subpl.w	r1, r9, r1
 800bc50:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bc54:	bf58      	it	pl
 800bc56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc5a:	6022      	str	r2, [r4, #0]
 800bc5c:	f04f 0900 	mov.w	r9, #0
 800bc60:	e78a      	b.n	800bb78 <_scanf_float+0x188>
 800bc62:	f04f 0a03 	mov.w	sl, #3
 800bc66:	e787      	b.n	800bb78 <_scanf_float+0x188>
 800bc68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc6c:	4639      	mov	r1, r7
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4798      	blx	r3
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f43f aedf 	beq.w	800ba36 <_scanf_float+0x46>
 800bc78:	e6ea      	b.n	800ba50 <_scanf_float+0x60>
 800bc7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bc7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc82:	463a      	mov	r2, r7
 800bc84:	4640      	mov	r0, r8
 800bc86:	4798      	blx	r3
 800bc88:	6923      	ldr	r3, [r4, #16]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	6123      	str	r3, [r4, #16]
 800bc8e:	e6ec      	b.n	800ba6a <_scanf_float+0x7a>
 800bc90:	1e6b      	subs	r3, r5, #1
 800bc92:	2b06      	cmp	r3, #6
 800bc94:	d825      	bhi.n	800bce2 <_scanf_float+0x2f2>
 800bc96:	2d02      	cmp	r5, #2
 800bc98:	d836      	bhi.n	800bd08 <_scanf_float+0x318>
 800bc9a:	455e      	cmp	r6, fp
 800bc9c:	f67f aee8 	bls.w	800ba70 <_scanf_float+0x80>
 800bca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bca4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bca8:	463a      	mov	r2, r7
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4798      	blx	r3
 800bcae:	6923      	ldr	r3, [r4, #16]
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	6123      	str	r3, [r4, #16]
 800bcb4:	e7f1      	b.n	800bc9a <_scanf_float+0x2aa>
 800bcb6:	9802      	ldr	r0, [sp, #8]
 800bcb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcbc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bcc0:	9002      	str	r0, [sp, #8]
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	4798      	blx	r3
 800bcc8:	6923      	ldr	r3, [r4, #16]
 800bcca:	3b01      	subs	r3, #1
 800bccc:	6123      	str	r3, [r4, #16]
 800bcce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcd2:	fa5f fa8a 	uxtb.w	sl, sl
 800bcd6:	f1ba 0f02 	cmp.w	sl, #2
 800bcda:	d1ec      	bne.n	800bcb6 <_scanf_float+0x2c6>
 800bcdc:	3d03      	subs	r5, #3
 800bcde:	b2ed      	uxtb	r5, r5
 800bce0:	1b76      	subs	r6, r6, r5
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	05da      	lsls	r2, r3, #23
 800bce6:	d52f      	bpl.n	800bd48 <_scanf_float+0x358>
 800bce8:	055b      	lsls	r3, r3, #21
 800bcea:	d510      	bpl.n	800bd0e <_scanf_float+0x31e>
 800bcec:	455e      	cmp	r6, fp
 800bcee:	f67f aebf 	bls.w	800ba70 <_scanf_float+0x80>
 800bcf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcfa:	463a      	mov	r2, r7
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	4798      	blx	r3
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	6123      	str	r3, [r4, #16]
 800bd06:	e7f1      	b.n	800bcec <_scanf_float+0x2fc>
 800bd08:	46aa      	mov	sl, r5
 800bd0a:	9602      	str	r6, [sp, #8]
 800bd0c:	e7df      	b.n	800bcce <_scanf_float+0x2de>
 800bd0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd12:	6923      	ldr	r3, [r4, #16]
 800bd14:	2965      	cmp	r1, #101	; 0x65
 800bd16:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	d00c      	beq.n	800bd3c <_scanf_float+0x34c>
 800bd22:	2945      	cmp	r1, #69	; 0x45
 800bd24:	d00a      	beq.n	800bd3c <_scanf_float+0x34c>
 800bd26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd2a:	463a      	mov	r2, r7
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	4798      	blx	r3
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	1eb5      	subs	r5, r6, #2
 800bd3a:	6123      	str	r3, [r4, #16]
 800bd3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd40:	463a      	mov	r2, r7
 800bd42:	4640      	mov	r0, r8
 800bd44:	4798      	blx	r3
 800bd46:	462e      	mov	r6, r5
 800bd48:	6825      	ldr	r5, [r4, #0]
 800bd4a:	f015 0510 	ands.w	r5, r5, #16
 800bd4e:	d158      	bne.n	800be02 <_scanf_float+0x412>
 800bd50:	7035      	strb	r5, [r6, #0]
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bd58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd5c:	d11c      	bne.n	800bd98 <_scanf_float+0x3a8>
 800bd5e:	9b01      	ldr	r3, [sp, #4]
 800bd60:	454b      	cmp	r3, r9
 800bd62:	eba3 0209 	sub.w	r2, r3, r9
 800bd66:	d124      	bne.n	800bdb2 <_scanf_float+0x3c2>
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4659      	mov	r1, fp
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	f002 fdb3 	bl	800e8d8 <_strtod_r>
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	6821      	ldr	r1, [r4, #0]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f011 0f02 	tst.w	r1, #2
 800bd7c:	ec57 6b10 	vmov	r6, r7, d0
 800bd80:	f103 0204 	add.w	r2, r3, #4
 800bd84:	d020      	beq.n	800bdc8 <_scanf_float+0x3d8>
 800bd86:	9903      	ldr	r1, [sp, #12]
 800bd88:	600a      	str	r2, [r1, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	e9c3 6700 	strd	r6, r7, [r3]
 800bd90:	68e3      	ldr	r3, [r4, #12]
 800bd92:	3301      	adds	r3, #1
 800bd94:	60e3      	str	r3, [r4, #12]
 800bd96:	e66c      	b.n	800ba72 <_scanf_float+0x82>
 800bd98:	9b04      	ldr	r3, [sp, #16]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0e4      	beq.n	800bd68 <_scanf_float+0x378>
 800bd9e:	9905      	ldr	r1, [sp, #20]
 800bda0:	230a      	movs	r3, #10
 800bda2:	462a      	mov	r2, r5
 800bda4:	3101      	adds	r1, #1
 800bda6:	4640      	mov	r0, r8
 800bda8:	f002 fe1e 	bl	800e9e8 <_strtol_r>
 800bdac:	9b04      	ldr	r3, [sp, #16]
 800bdae:	9e05      	ldr	r6, [sp, #20]
 800bdb0:	1ac2      	subs	r2, r0, r3
 800bdb2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bdb6:	429e      	cmp	r6, r3
 800bdb8:	bf28      	it	cs
 800bdba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bdbe:	4912      	ldr	r1, [pc, #72]	; (800be08 <_scanf_float+0x418>)
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f000 f943 	bl	800c04c <siprintf>
 800bdc6:	e7cf      	b.n	800bd68 <_scanf_float+0x378>
 800bdc8:	f011 0f04 	tst.w	r1, #4
 800bdcc:	9903      	ldr	r1, [sp, #12]
 800bdce:	600a      	str	r2, [r1, #0]
 800bdd0:	d1db      	bne.n	800bd8a <_scanf_float+0x39a>
 800bdd2:	f8d3 8000 	ldr.w	r8, [r3]
 800bdd6:	ee10 2a10 	vmov	r2, s0
 800bdda:	ee10 0a10 	vmov	r0, s0
 800bdde:	463b      	mov	r3, r7
 800bde0:	4639      	mov	r1, r7
 800bde2:	f7f4 fea3 	bl	8000b2c <__aeabi_dcmpun>
 800bde6:	b128      	cbz	r0, 800bdf4 <_scanf_float+0x404>
 800bde8:	4808      	ldr	r0, [pc, #32]	; (800be0c <_scanf_float+0x41c>)
 800bdea:	f000 fb1b 	bl	800c424 <nanf>
 800bdee:	ed88 0a00 	vstr	s0, [r8]
 800bdf2:	e7cd      	b.n	800bd90 <_scanf_float+0x3a0>
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	f7f4 fef6 	bl	8000be8 <__aeabi_d2f>
 800bdfc:	f8c8 0000 	str.w	r0, [r8]
 800be00:	e7c6      	b.n	800bd90 <_scanf_float+0x3a0>
 800be02:	2500      	movs	r5, #0
 800be04:	e635      	b.n	800ba72 <_scanf_float+0x82>
 800be06:	bf00      	nop
 800be08:	08011eba 	.word	0x08011eba
 800be0c:	08011efa 	.word	0x08011efa

0800be10 <std>:
 800be10:	2300      	movs	r3, #0
 800be12:	b510      	push	{r4, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	e9c0 3300 	strd	r3, r3, [r0]
 800be1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be1e:	6083      	str	r3, [r0, #8]
 800be20:	8181      	strh	r1, [r0, #12]
 800be22:	6643      	str	r3, [r0, #100]	; 0x64
 800be24:	81c2      	strh	r2, [r0, #14]
 800be26:	6183      	str	r3, [r0, #24]
 800be28:	4619      	mov	r1, r3
 800be2a:	2208      	movs	r2, #8
 800be2c:	305c      	adds	r0, #92	; 0x5c
 800be2e:	f000 fa6d 	bl	800c30c <memset>
 800be32:	4b05      	ldr	r3, [pc, #20]	; (800be48 <std+0x38>)
 800be34:	6263      	str	r3, [r4, #36]	; 0x24
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <std+0x3c>)
 800be38:	62a3      	str	r3, [r4, #40]	; 0x28
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <std+0x40>)
 800be3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <std+0x44>)
 800be40:	6224      	str	r4, [r4, #32]
 800be42:	6323      	str	r3, [r4, #48]	; 0x30
 800be44:	bd10      	pop	{r4, pc}
 800be46:	bf00      	nop
 800be48:	0800c0e5 	.word	0x0800c0e5
 800be4c:	0800c10b 	.word	0x0800c10b
 800be50:	0800c143 	.word	0x0800c143
 800be54:	0800c167 	.word	0x0800c167

0800be58 <stdio_exit_handler>:
 800be58:	4a02      	ldr	r2, [pc, #8]	; (800be64 <stdio_exit_handler+0xc>)
 800be5a:	4903      	ldr	r1, [pc, #12]	; (800be68 <stdio_exit_handler+0x10>)
 800be5c:	4803      	ldr	r0, [pc, #12]	; (800be6c <stdio_exit_handler+0x14>)
 800be5e:	f000 b869 	b.w	800bf34 <_fwalk_sglue>
 800be62:	bf00      	nop
 800be64:	200002e8 	.word	0x200002e8
 800be68:	0800f671 	.word	0x0800f671
 800be6c:	200002f4 	.word	0x200002f4

0800be70 <cleanup_stdio>:
 800be70:	6841      	ldr	r1, [r0, #4]
 800be72:	4b0c      	ldr	r3, [pc, #48]	; (800bea4 <cleanup_stdio+0x34>)
 800be74:	4299      	cmp	r1, r3
 800be76:	b510      	push	{r4, lr}
 800be78:	4604      	mov	r4, r0
 800be7a:	d001      	beq.n	800be80 <cleanup_stdio+0x10>
 800be7c:	f003 fbf8 	bl	800f670 <_fflush_r>
 800be80:	68a1      	ldr	r1, [r4, #8]
 800be82:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <cleanup_stdio+0x38>)
 800be84:	4299      	cmp	r1, r3
 800be86:	d002      	beq.n	800be8e <cleanup_stdio+0x1e>
 800be88:	4620      	mov	r0, r4
 800be8a:	f003 fbf1 	bl	800f670 <_fflush_r>
 800be8e:	68e1      	ldr	r1, [r4, #12]
 800be90:	4b06      	ldr	r3, [pc, #24]	; (800beac <cleanup_stdio+0x3c>)
 800be92:	4299      	cmp	r1, r3
 800be94:	d004      	beq.n	800bea0 <cleanup_stdio+0x30>
 800be96:	4620      	mov	r0, r4
 800be98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be9c:	f003 bbe8 	b.w	800f670 <_fflush_r>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	bf00      	nop
 800bea4:	2000164c 	.word	0x2000164c
 800bea8:	200016b4 	.word	0x200016b4
 800beac:	2000171c 	.word	0x2000171c

0800beb0 <global_stdio_init.part.0>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	4b0b      	ldr	r3, [pc, #44]	; (800bee0 <global_stdio_init.part.0+0x30>)
 800beb4:	4c0b      	ldr	r4, [pc, #44]	; (800bee4 <global_stdio_init.part.0+0x34>)
 800beb6:	4a0c      	ldr	r2, [pc, #48]	; (800bee8 <global_stdio_init.part.0+0x38>)
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	4620      	mov	r0, r4
 800bebc:	2200      	movs	r2, #0
 800bebe:	2104      	movs	r1, #4
 800bec0:	f7ff ffa6 	bl	800be10 <std>
 800bec4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bec8:	2201      	movs	r2, #1
 800beca:	2109      	movs	r1, #9
 800becc:	f7ff ffa0 	bl	800be10 <std>
 800bed0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bed4:	2202      	movs	r2, #2
 800bed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beda:	2112      	movs	r1, #18
 800bedc:	f7ff bf98 	b.w	800be10 <std>
 800bee0:	20001784 	.word	0x20001784
 800bee4:	2000164c 	.word	0x2000164c
 800bee8:	0800be59 	.word	0x0800be59

0800beec <__sfp_lock_acquire>:
 800beec:	4801      	ldr	r0, [pc, #4]	; (800bef4 <__sfp_lock_acquire+0x8>)
 800beee:	f000 ba89 	b.w	800c404 <__retarget_lock_acquire_recursive>
 800bef2:	bf00      	nop
 800bef4:	2000178d 	.word	0x2000178d

0800bef8 <__sfp_lock_release>:
 800bef8:	4801      	ldr	r0, [pc, #4]	; (800bf00 <__sfp_lock_release+0x8>)
 800befa:	f000 ba84 	b.w	800c406 <__retarget_lock_release_recursive>
 800befe:	bf00      	nop
 800bf00:	2000178d 	.word	0x2000178d

0800bf04 <__sinit>:
 800bf04:	b510      	push	{r4, lr}
 800bf06:	4604      	mov	r4, r0
 800bf08:	f7ff fff0 	bl	800beec <__sfp_lock_acquire>
 800bf0c:	6a23      	ldr	r3, [r4, #32]
 800bf0e:	b11b      	cbz	r3, 800bf18 <__sinit+0x14>
 800bf10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf14:	f7ff bff0 	b.w	800bef8 <__sfp_lock_release>
 800bf18:	4b04      	ldr	r3, [pc, #16]	; (800bf2c <__sinit+0x28>)
 800bf1a:	6223      	str	r3, [r4, #32]
 800bf1c:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <__sinit+0x2c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d1f5      	bne.n	800bf10 <__sinit+0xc>
 800bf24:	f7ff ffc4 	bl	800beb0 <global_stdio_init.part.0>
 800bf28:	e7f2      	b.n	800bf10 <__sinit+0xc>
 800bf2a:	bf00      	nop
 800bf2c:	0800be71 	.word	0x0800be71
 800bf30:	20001784 	.word	0x20001784

0800bf34 <_fwalk_sglue>:
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf38:	4607      	mov	r7, r0
 800bf3a:	4688      	mov	r8, r1
 800bf3c:	4614      	mov	r4, r2
 800bf3e:	2600      	movs	r6, #0
 800bf40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf44:	f1b9 0901 	subs.w	r9, r9, #1
 800bf48:	d505      	bpl.n	800bf56 <_fwalk_sglue+0x22>
 800bf4a:	6824      	ldr	r4, [r4, #0]
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	d1f7      	bne.n	800bf40 <_fwalk_sglue+0xc>
 800bf50:	4630      	mov	r0, r6
 800bf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf56:	89ab      	ldrh	r3, [r5, #12]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d907      	bls.n	800bf6c <_fwalk_sglue+0x38>
 800bf5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf60:	3301      	adds	r3, #1
 800bf62:	d003      	beq.n	800bf6c <_fwalk_sglue+0x38>
 800bf64:	4629      	mov	r1, r5
 800bf66:	4638      	mov	r0, r7
 800bf68:	47c0      	blx	r8
 800bf6a:	4306      	orrs	r6, r0
 800bf6c:	3568      	adds	r5, #104	; 0x68
 800bf6e:	e7e9      	b.n	800bf44 <_fwalk_sglue+0x10>

0800bf70 <iprintf>:
 800bf70:	b40f      	push	{r0, r1, r2, r3}
 800bf72:	b507      	push	{r0, r1, r2, lr}
 800bf74:	4906      	ldr	r1, [pc, #24]	; (800bf90 <iprintf+0x20>)
 800bf76:	ab04      	add	r3, sp, #16
 800bf78:	6808      	ldr	r0, [r1, #0]
 800bf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7e:	6881      	ldr	r1, [r0, #8]
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	f003 f887 	bl	800f094 <_vfiprintf_r>
 800bf86:	b003      	add	sp, #12
 800bf88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf8c:	b004      	add	sp, #16
 800bf8e:	4770      	bx	lr
 800bf90:	20000340 	.word	0x20000340

0800bf94 <_puts_r>:
 800bf94:	6a03      	ldr	r3, [r0, #32]
 800bf96:	b570      	push	{r4, r5, r6, lr}
 800bf98:	6884      	ldr	r4, [r0, #8]
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	460e      	mov	r6, r1
 800bf9e:	b90b      	cbnz	r3, 800bfa4 <_puts_r+0x10>
 800bfa0:	f7ff ffb0 	bl	800bf04 <__sinit>
 800bfa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa6:	07db      	lsls	r3, r3, #31
 800bfa8:	d405      	bmi.n	800bfb6 <_puts_r+0x22>
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	0598      	lsls	r0, r3, #22
 800bfae:	d402      	bmi.n	800bfb6 <_puts_r+0x22>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb2:	f000 fa27 	bl	800c404 <__retarget_lock_acquire_recursive>
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	0719      	lsls	r1, r3, #28
 800bfba:	d513      	bpl.n	800bfe4 <_puts_r+0x50>
 800bfbc:	6923      	ldr	r3, [r4, #16]
 800bfbe:	b18b      	cbz	r3, 800bfe4 <_puts_r+0x50>
 800bfc0:	3e01      	subs	r6, #1
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	60a3      	str	r3, [r4, #8]
 800bfcc:	b9e9      	cbnz	r1, 800c00a <_puts_r+0x76>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	da2e      	bge.n	800c030 <_puts_r+0x9c>
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	210a      	movs	r1, #10
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f000 f902 	bl	800c1e0 <__swbuf_r>
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d007      	beq.n	800bff0 <_puts_r+0x5c>
 800bfe0:	250a      	movs	r5, #10
 800bfe2:	e007      	b.n	800bff4 <_puts_r+0x60>
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f000 f938 	bl	800c25c <__swsetup_r>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d0e7      	beq.n	800bfc0 <_puts_r+0x2c>
 800bff0:	f04f 35ff 	mov.w	r5, #4294967295
 800bff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bff6:	07da      	lsls	r2, r3, #31
 800bff8:	d405      	bmi.n	800c006 <_puts_r+0x72>
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	059b      	lsls	r3, r3, #22
 800bffe:	d402      	bmi.n	800c006 <_puts_r+0x72>
 800c000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c002:	f000 fa00 	bl	800c406 <__retarget_lock_release_recursive>
 800c006:	4628      	mov	r0, r5
 800c008:	bd70      	pop	{r4, r5, r6, pc}
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	da04      	bge.n	800c018 <_puts_r+0x84>
 800c00e:	69a2      	ldr	r2, [r4, #24]
 800c010:	429a      	cmp	r2, r3
 800c012:	dc06      	bgt.n	800c022 <_puts_r+0x8e>
 800c014:	290a      	cmp	r1, #10
 800c016:	d004      	beq.n	800c022 <_puts_r+0x8e>
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	6022      	str	r2, [r4, #0]
 800c01e:	7019      	strb	r1, [r3, #0]
 800c020:	e7cf      	b.n	800bfc2 <_puts_r+0x2e>
 800c022:	4622      	mov	r2, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 f8db 	bl	800c1e0 <__swbuf_r>
 800c02a:	3001      	adds	r0, #1
 800c02c:	d1c9      	bne.n	800bfc2 <_puts_r+0x2e>
 800c02e:	e7df      	b.n	800bff0 <_puts_r+0x5c>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	250a      	movs	r5, #10
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	6022      	str	r2, [r4, #0]
 800c038:	701d      	strb	r5, [r3, #0]
 800c03a:	e7db      	b.n	800bff4 <_puts_r+0x60>

0800c03c <puts>:
 800c03c:	4b02      	ldr	r3, [pc, #8]	; (800c048 <puts+0xc>)
 800c03e:	4601      	mov	r1, r0
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	f7ff bfa7 	b.w	800bf94 <_puts_r>
 800c046:	bf00      	nop
 800c048:	20000340 	.word	0x20000340

0800c04c <siprintf>:
 800c04c:	b40e      	push	{r1, r2, r3}
 800c04e:	b500      	push	{lr}
 800c050:	b09c      	sub	sp, #112	; 0x70
 800c052:	ab1d      	add	r3, sp, #116	; 0x74
 800c054:	9002      	str	r0, [sp, #8]
 800c056:	9006      	str	r0, [sp, #24]
 800c058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c05c:	4809      	ldr	r0, [pc, #36]	; (800c084 <siprintf+0x38>)
 800c05e:	9107      	str	r1, [sp, #28]
 800c060:	9104      	str	r1, [sp, #16]
 800c062:	4909      	ldr	r1, [pc, #36]	; (800c088 <siprintf+0x3c>)
 800c064:	f853 2b04 	ldr.w	r2, [r3], #4
 800c068:	9105      	str	r1, [sp, #20]
 800c06a:	6800      	ldr	r0, [r0, #0]
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	a902      	add	r1, sp, #8
 800c070:	f002 fd16 	bl	800eaa0 <_svfiprintf_r>
 800c074:	9b02      	ldr	r3, [sp, #8]
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
 800c07a:	b01c      	add	sp, #112	; 0x70
 800c07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c080:	b003      	add	sp, #12
 800c082:	4770      	bx	lr
 800c084:	20000340 	.word	0x20000340
 800c088:	ffff0208 	.word	0xffff0208

0800c08c <siscanf>:
 800c08c:	b40e      	push	{r1, r2, r3}
 800c08e:	b510      	push	{r4, lr}
 800c090:	b09f      	sub	sp, #124	; 0x7c
 800c092:	ac21      	add	r4, sp, #132	; 0x84
 800c094:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c098:	f854 2b04 	ldr.w	r2, [r4], #4
 800c09c:	9201      	str	r2, [sp, #4]
 800c09e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c0a2:	9004      	str	r0, [sp, #16]
 800c0a4:	9008      	str	r0, [sp, #32]
 800c0a6:	f7f4 f8e3 	bl	8000270 <strlen>
 800c0aa:	4b0c      	ldr	r3, [pc, #48]	; (800c0dc <siscanf+0x50>)
 800c0ac:	9005      	str	r0, [sp, #20]
 800c0ae:	9009      	str	r0, [sp, #36]	; 0x24
 800c0b0:	930d      	str	r3, [sp, #52]	; 0x34
 800c0b2:	480b      	ldr	r0, [pc, #44]	; (800c0e0 <siscanf+0x54>)
 800c0b4:	9a01      	ldr	r2, [sp, #4]
 800c0b6:	6800      	ldr	r0, [r0, #0]
 800c0b8:	9403      	str	r4, [sp, #12]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	9311      	str	r3, [sp, #68]	; 0x44
 800c0be:	9316      	str	r3, [sp, #88]	; 0x58
 800c0c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c0c8:	a904      	add	r1, sp, #16
 800c0ca:	4623      	mov	r3, r4
 800c0cc:	f002 fe40 	bl	800ed50 <__ssvfiscanf_r>
 800c0d0:	b01f      	add	sp, #124	; 0x7c
 800c0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0d6:	b003      	add	sp, #12
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	0800c107 	.word	0x0800c107
 800c0e0:	20000340 	.word	0x20000340

0800c0e4 <__sread>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	f000 f93c 	bl	800c368 <_read_r>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	bfab      	itete	ge
 800c0f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f8:	181b      	addge	r3, r3, r0
 800c0fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0fe:	bfac      	ite	ge
 800c100:	6563      	strge	r3, [r4, #84]	; 0x54
 800c102:	81a3      	strhlt	r3, [r4, #12]
 800c104:	bd10      	pop	{r4, pc}

0800c106 <__seofread>:
 800c106:	2000      	movs	r0, #0
 800c108:	4770      	bx	lr

0800c10a <__swrite>:
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	461f      	mov	r7, r3
 800c110:	898b      	ldrh	r3, [r1, #12]
 800c112:	05db      	lsls	r3, r3, #23
 800c114:	4605      	mov	r5, r0
 800c116:	460c      	mov	r4, r1
 800c118:	4616      	mov	r6, r2
 800c11a:	d505      	bpl.n	800c128 <__swrite+0x1e>
 800c11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c120:	2302      	movs	r3, #2
 800c122:	2200      	movs	r2, #0
 800c124:	f000 f90e 	bl	800c344 <_lseek_r>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c132:	81a3      	strh	r3, [r4, #12]
 800c134:	4632      	mov	r2, r6
 800c136:	463b      	mov	r3, r7
 800c138:	4628      	mov	r0, r5
 800c13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13e:	f000 b925 	b.w	800c38c <_write_r>

0800c142 <__sseek>:
 800c142:	b510      	push	{r4, lr}
 800c144:	460c      	mov	r4, r1
 800c146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14a:	f000 f8fb 	bl	800c344 <_lseek_r>
 800c14e:	1c43      	adds	r3, r0, #1
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	bf15      	itete	ne
 800c154:	6560      	strne	r0, [r4, #84]	; 0x54
 800c156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c15a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c15e:	81a3      	strheq	r3, [r4, #12]
 800c160:	bf18      	it	ne
 800c162:	81a3      	strhne	r3, [r4, #12]
 800c164:	bd10      	pop	{r4, pc}

0800c166 <__sclose>:
 800c166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16a:	f000 b8db 	b.w	800c324 <_close_r>

0800c16e <_vsniprintf_r>:
 800c16e:	b530      	push	{r4, r5, lr}
 800c170:	4614      	mov	r4, r2
 800c172:	2c00      	cmp	r4, #0
 800c174:	b09b      	sub	sp, #108	; 0x6c
 800c176:	4605      	mov	r5, r0
 800c178:	461a      	mov	r2, r3
 800c17a:	da05      	bge.n	800c188 <_vsniprintf_r+0x1a>
 800c17c:	238b      	movs	r3, #139	; 0x8b
 800c17e:	6003      	str	r3, [r0, #0]
 800c180:	f04f 30ff 	mov.w	r0, #4294967295
 800c184:	b01b      	add	sp, #108	; 0x6c
 800c186:	bd30      	pop	{r4, r5, pc}
 800c188:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c18c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c190:	bf14      	ite	ne
 800c192:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c196:	4623      	moveq	r3, r4
 800c198:	9302      	str	r3, [sp, #8]
 800c19a:	9305      	str	r3, [sp, #20]
 800c19c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1a0:	9100      	str	r1, [sp, #0]
 800c1a2:	9104      	str	r1, [sp, #16]
 800c1a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c1a8:	4669      	mov	r1, sp
 800c1aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c1ac:	f002 fc78 	bl	800eaa0 <_svfiprintf_r>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	bfbc      	itt	lt
 800c1b4:	238b      	movlt	r3, #139	; 0x8b
 800c1b6:	602b      	strlt	r3, [r5, #0]
 800c1b8:	2c00      	cmp	r4, #0
 800c1ba:	d0e3      	beq.n	800c184 <_vsniprintf_r+0x16>
 800c1bc:	9b00      	ldr	r3, [sp, #0]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
 800c1c2:	e7df      	b.n	800c184 <_vsniprintf_r+0x16>

0800c1c4 <vsniprintf>:
 800c1c4:	b507      	push	{r0, r1, r2, lr}
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	460a      	mov	r2, r1
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	4803      	ldr	r0, [pc, #12]	; (800c1dc <vsniprintf+0x18>)
 800c1d0:	6800      	ldr	r0, [r0, #0]
 800c1d2:	f7ff ffcc 	bl	800c16e <_vsniprintf_r>
 800c1d6:	b003      	add	sp, #12
 800c1d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1dc:	20000340 	.word	0x20000340

0800c1e0 <__swbuf_r>:
 800c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e2:	460e      	mov	r6, r1
 800c1e4:	4614      	mov	r4, r2
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	b118      	cbz	r0, 800c1f2 <__swbuf_r+0x12>
 800c1ea:	6a03      	ldr	r3, [r0, #32]
 800c1ec:	b90b      	cbnz	r3, 800c1f2 <__swbuf_r+0x12>
 800c1ee:	f7ff fe89 	bl	800bf04 <__sinit>
 800c1f2:	69a3      	ldr	r3, [r4, #24]
 800c1f4:	60a3      	str	r3, [r4, #8]
 800c1f6:	89a3      	ldrh	r3, [r4, #12]
 800c1f8:	071a      	lsls	r2, r3, #28
 800c1fa:	d525      	bpl.n	800c248 <__swbuf_r+0x68>
 800c1fc:	6923      	ldr	r3, [r4, #16]
 800c1fe:	b31b      	cbz	r3, 800c248 <__swbuf_r+0x68>
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	6922      	ldr	r2, [r4, #16]
 800c204:	1a98      	subs	r0, r3, r2
 800c206:	6963      	ldr	r3, [r4, #20]
 800c208:	b2f6      	uxtb	r6, r6
 800c20a:	4283      	cmp	r3, r0
 800c20c:	4637      	mov	r7, r6
 800c20e:	dc04      	bgt.n	800c21a <__swbuf_r+0x3a>
 800c210:	4621      	mov	r1, r4
 800c212:	4628      	mov	r0, r5
 800c214:	f003 fa2c 	bl	800f670 <_fflush_r>
 800c218:	b9e0      	cbnz	r0, 800c254 <__swbuf_r+0x74>
 800c21a:	68a3      	ldr	r3, [r4, #8]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	60a3      	str	r3, [r4, #8]
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	6022      	str	r2, [r4, #0]
 800c226:	701e      	strb	r6, [r3, #0]
 800c228:	6962      	ldr	r2, [r4, #20]
 800c22a:	1c43      	adds	r3, r0, #1
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d004      	beq.n	800c23a <__swbuf_r+0x5a>
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	07db      	lsls	r3, r3, #31
 800c234:	d506      	bpl.n	800c244 <__swbuf_r+0x64>
 800c236:	2e0a      	cmp	r6, #10
 800c238:	d104      	bne.n	800c244 <__swbuf_r+0x64>
 800c23a:	4621      	mov	r1, r4
 800c23c:	4628      	mov	r0, r5
 800c23e:	f003 fa17 	bl	800f670 <_fflush_r>
 800c242:	b938      	cbnz	r0, 800c254 <__swbuf_r+0x74>
 800c244:	4638      	mov	r0, r7
 800c246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c248:	4621      	mov	r1, r4
 800c24a:	4628      	mov	r0, r5
 800c24c:	f000 f806 	bl	800c25c <__swsetup_r>
 800c250:	2800      	cmp	r0, #0
 800c252:	d0d5      	beq.n	800c200 <__swbuf_r+0x20>
 800c254:	f04f 37ff 	mov.w	r7, #4294967295
 800c258:	e7f4      	b.n	800c244 <__swbuf_r+0x64>
	...

0800c25c <__swsetup_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4b2a      	ldr	r3, [pc, #168]	; (800c308 <__swsetup_r+0xac>)
 800c260:	4605      	mov	r5, r0
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	460c      	mov	r4, r1
 800c266:	b118      	cbz	r0, 800c270 <__swsetup_r+0x14>
 800c268:	6a03      	ldr	r3, [r0, #32]
 800c26a:	b90b      	cbnz	r3, 800c270 <__swsetup_r+0x14>
 800c26c:	f7ff fe4a 	bl	800bf04 <__sinit>
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c276:	0718      	lsls	r0, r3, #28
 800c278:	d422      	bmi.n	800c2c0 <__swsetup_r+0x64>
 800c27a:	06d9      	lsls	r1, r3, #27
 800c27c:	d407      	bmi.n	800c28e <__swsetup_r+0x32>
 800c27e:	2309      	movs	r3, #9
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c286:	81a3      	strh	r3, [r4, #12]
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	e034      	b.n	800c2f8 <__swsetup_r+0x9c>
 800c28e:	0758      	lsls	r0, r3, #29
 800c290:	d512      	bpl.n	800c2b8 <__swsetup_r+0x5c>
 800c292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c294:	b141      	cbz	r1, 800c2a8 <__swsetup_r+0x4c>
 800c296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c29a:	4299      	cmp	r1, r3
 800c29c:	d002      	beq.n	800c2a4 <__swsetup_r+0x48>
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f000 ff60 	bl	800d164 <_free_r>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	6363      	str	r3, [r4, #52]	; 0x34
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2ae:	81a3      	strh	r3, [r4, #12]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	6063      	str	r3, [r4, #4]
 800c2b4:	6923      	ldr	r3, [r4, #16]
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	f043 0308 	orr.w	r3, r3, #8
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	b94b      	cbnz	r3, 800c2d8 <__swsetup_r+0x7c>
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2ce:	d003      	beq.n	800c2d8 <__swsetup_r+0x7c>
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f003 fa2c 	bl	800f730 <__smakebuf_r>
 800c2d8:	89a0      	ldrh	r0, [r4, #12]
 800c2da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2de:	f010 0301 	ands.w	r3, r0, #1
 800c2e2:	d00a      	beq.n	800c2fa <__swsetup_r+0x9e>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	60a3      	str	r3, [r4, #8]
 800c2e8:	6963      	ldr	r3, [r4, #20]
 800c2ea:	425b      	negs	r3, r3
 800c2ec:	61a3      	str	r3, [r4, #24]
 800c2ee:	6923      	ldr	r3, [r4, #16]
 800c2f0:	b943      	cbnz	r3, 800c304 <__swsetup_r+0xa8>
 800c2f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2f6:	d1c4      	bne.n	800c282 <__swsetup_r+0x26>
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
 800c2fa:	0781      	lsls	r1, r0, #30
 800c2fc:	bf58      	it	pl
 800c2fe:	6963      	ldrpl	r3, [r4, #20]
 800c300:	60a3      	str	r3, [r4, #8]
 800c302:	e7f4      	b.n	800c2ee <__swsetup_r+0x92>
 800c304:	2000      	movs	r0, #0
 800c306:	e7f7      	b.n	800c2f8 <__swsetup_r+0x9c>
 800c308:	20000340 	.word	0x20000340

0800c30c <memset>:
 800c30c:	4402      	add	r2, r0
 800c30e:	4603      	mov	r3, r0
 800c310:	4293      	cmp	r3, r2
 800c312:	d100      	bne.n	800c316 <memset+0xa>
 800c314:	4770      	bx	lr
 800c316:	f803 1b01 	strb.w	r1, [r3], #1
 800c31a:	e7f9      	b.n	800c310 <memset+0x4>

0800c31c <_localeconv_r>:
 800c31c:	4800      	ldr	r0, [pc, #0]	; (800c320 <_localeconv_r+0x4>)
 800c31e:	4770      	bx	lr
 800c320:	20000434 	.word	0x20000434

0800c324 <_close_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4d06      	ldr	r5, [pc, #24]	; (800c340 <_close_r+0x1c>)
 800c328:	2300      	movs	r3, #0
 800c32a:	4604      	mov	r4, r0
 800c32c:	4608      	mov	r0, r1
 800c32e:	602b      	str	r3, [r5, #0]
 800c330:	f7f8 fcd9 	bl	8004ce6 <_close>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d102      	bne.n	800c33e <_close_r+0x1a>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	b103      	cbz	r3, 800c33e <_close_r+0x1a>
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	bd38      	pop	{r3, r4, r5, pc}
 800c340:	20001788 	.word	0x20001788

0800c344 <_lseek_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d07      	ldr	r5, [pc, #28]	; (800c364 <_lseek_r+0x20>)
 800c348:	4604      	mov	r4, r0
 800c34a:	4608      	mov	r0, r1
 800c34c:	4611      	mov	r1, r2
 800c34e:	2200      	movs	r2, #0
 800c350:	602a      	str	r2, [r5, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	f7f8 fcee 	bl	8004d34 <_lseek>
 800c358:	1c43      	adds	r3, r0, #1
 800c35a:	d102      	bne.n	800c362 <_lseek_r+0x1e>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	b103      	cbz	r3, 800c362 <_lseek_r+0x1e>
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	20001788 	.word	0x20001788

0800c368 <_read_r>:
 800c368:	b538      	push	{r3, r4, r5, lr}
 800c36a:	4d07      	ldr	r5, [pc, #28]	; (800c388 <_read_r+0x20>)
 800c36c:	4604      	mov	r4, r0
 800c36e:	4608      	mov	r0, r1
 800c370:	4611      	mov	r1, r2
 800c372:	2200      	movs	r2, #0
 800c374:	602a      	str	r2, [r5, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	f7f8 fc7c 	bl	8004c74 <_read>
 800c37c:	1c43      	adds	r3, r0, #1
 800c37e:	d102      	bne.n	800c386 <_read_r+0x1e>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	b103      	cbz	r3, 800c386 <_read_r+0x1e>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	20001788 	.word	0x20001788

0800c38c <_write_r>:
 800c38c:	b538      	push	{r3, r4, r5, lr}
 800c38e:	4d07      	ldr	r5, [pc, #28]	; (800c3ac <_write_r+0x20>)
 800c390:	4604      	mov	r4, r0
 800c392:	4608      	mov	r0, r1
 800c394:	4611      	mov	r1, r2
 800c396:	2200      	movs	r2, #0
 800c398:	602a      	str	r2, [r5, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	f7f8 fc87 	bl	8004cae <_write>
 800c3a0:	1c43      	adds	r3, r0, #1
 800c3a2:	d102      	bne.n	800c3aa <_write_r+0x1e>
 800c3a4:	682b      	ldr	r3, [r5, #0]
 800c3a6:	b103      	cbz	r3, 800c3aa <_write_r+0x1e>
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	bd38      	pop	{r3, r4, r5, pc}
 800c3ac:	20001788 	.word	0x20001788

0800c3b0 <__errno>:
 800c3b0:	4b01      	ldr	r3, [pc, #4]	; (800c3b8 <__errno+0x8>)
 800c3b2:	6818      	ldr	r0, [r3, #0]
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	20000340 	.word	0x20000340

0800c3bc <__libc_init_array>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	4d0d      	ldr	r5, [pc, #52]	; (800c3f4 <__libc_init_array+0x38>)
 800c3c0:	4c0d      	ldr	r4, [pc, #52]	; (800c3f8 <__libc_init_array+0x3c>)
 800c3c2:	1b64      	subs	r4, r4, r5
 800c3c4:	10a4      	asrs	r4, r4, #2
 800c3c6:	2600      	movs	r6, #0
 800c3c8:	42a6      	cmp	r6, r4
 800c3ca:	d109      	bne.n	800c3e0 <__libc_init_array+0x24>
 800c3cc:	4d0b      	ldr	r5, [pc, #44]	; (800c3fc <__libc_init_array+0x40>)
 800c3ce:	4c0c      	ldr	r4, [pc, #48]	; (800c400 <__libc_init_array+0x44>)
 800c3d0:	f004 f884 	bl	80104dc <_init>
 800c3d4:	1b64      	subs	r4, r4, r5
 800c3d6:	10a4      	asrs	r4, r4, #2
 800c3d8:	2600      	movs	r6, #0
 800c3da:	42a6      	cmp	r6, r4
 800c3dc:	d105      	bne.n	800c3ea <__libc_init_array+0x2e>
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e4:	4798      	blx	r3
 800c3e6:	3601      	adds	r6, #1
 800c3e8:	e7ee      	b.n	800c3c8 <__libc_init_array+0xc>
 800c3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ee:	4798      	blx	r3
 800c3f0:	3601      	adds	r6, #1
 800c3f2:	e7f2      	b.n	800c3da <__libc_init_array+0x1e>
 800c3f4:	080122e8 	.word	0x080122e8
 800c3f8:	080122e8 	.word	0x080122e8
 800c3fc:	080122e8 	.word	0x080122e8
 800c400:	080122ec 	.word	0x080122ec

0800c404 <__retarget_lock_acquire_recursive>:
 800c404:	4770      	bx	lr

0800c406 <__retarget_lock_release_recursive>:
 800c406:	4770      	bx	lr

0800c408 <memcpy>:
 800c408:	440a      	add	r2, r1
 800c40a:	4291      	cmp	r1, r2
 800c40c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c410:	d100      	bne.n	800c414 <memcpy+0xc>
 800c412:	4770      	bx	lr
 800c414:	b510      	push	{r4, lr}
 800c416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c41a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c41e:	4291      	cmp	r1, r2
 800c420:	d1f9      	bne.n	800c416 <memcpy+0xe>
 800c422:	bd10      	pop	{r4, pc}

0800c424 <nanf>:
 800c424:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c42c <nanf+0x8>
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	7fc00000 	.word	0x7fc00000

0800c430 <__assert_func>:
 800c430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c432:	4614      	mov	r4, r2
 800c434:	461a      	mov	r2, r3
 800c436:	4b09      	ldr	r3, [pc, #36]	; (800c45c <__assert_func+0x2c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4605      	mov	r5, r0
 800c43c:	68d8      	ldr	r0, [r3, #12]
 800c43e:	b14c      	cbz	r4, 800c454 <__assert_func+0x24>
 800c440:	4b07      	ldr	r3, [pc, #28]	; (800c460 <__assert_func+0x30>)
 800c442:	9100      	str	r1, [sp, #0]
 800c444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c448:	4906      	ldr	r1, [pc, #24]	; (800c464 <__assert_func+0x34>)
 800c44a:	462b      	mov	r3, r5
 800c44c:	f003 f938 	bl	800f6c0 <fiprintf>
 800c450:	f003 fa86 	bl	800f960 <abort>
 800c454:	4b04      	ldr	r3, [pc, #16]	; (800c468 <__assert_func+0x38>)
 800c456:	461c      	mov	r4, r3
 800c458:	e7f3      	b.n	800c442 <__assert_func+0x12>
 800c45a:	bf00      	nop
 800c45c:	20000340 	.word	0x20000340
 800c460:	08011ebf 	.word	0x08011ebf
 800c464:	08011ecc 	.word	0x08011ecc
 800c468:	08011efa 	.word	0x08011efa

0800c46c <quorem>:
 800c46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	6903      	ldr	r3, [r0, #16]
 800c472:	690c      	ldr	r4, [r1, #16]
 800c474:	42a3      	cmp	r3, r4
 800c476:	4607      	mov	r7, r0
 800c478:	db7e      	blt.n	800c578 <quorem+0x10c>
 800c47a:	3c01      	subs	r4, #1
 800c47c:	f101 0814 	add.w	r8, r1, #20
 800c480:	f100 0514 	add.w	r5, r0, #20
 800c484:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c488:	9301      	str	r3, [sp, #4]
 800c48a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c48e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c492:	3301      	adds	r3, #1
 800c494:	429a      	cmp	r2, r3
 800c496:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c49a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c49e:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4a2:	d331      	bcc.n	800c508 <quorem+0x9c>
 800c4a4:	f04f 0e00 	mov.w	lr, #0
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	46ac      	mov	ip, r5
 800c4ac:	46f2      	mov	sl, lr
 800c4ae:	f850 2b04 	ldr.w	r2, [r0], #4
 800c4b2:	b293      	uxth	r3, r2
 800c4b4:	fb06 e303 	mla	r3, r6, r3, lr
 800c4b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c4bc:	0c1a      	lsrs	r2, r3, #16
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	ebaa 0303 	sub.w	r3, sl, r3
 800c4c4:	f8dc a000 	ldr.w	sl, [ip]
 800c4c8:	fa13 f38a 	uxtah	r3, r3, sl
 800c4cc:	fb06 220e 	mla	r2, r6, lr, r2
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	9b00      	ldr	r3, [sp, #0]
 800c4d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c4d8:	b292      	uxth	r2, r2
 800c4da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c4de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4e2:	f8bd 3000 	ldrh.w	r3, [sp]
 800c4e6:	4581      	cmp	r9, r0
 800c4e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4ec:	f84c 3b04 	str.w	r3, [ip], #4
 800c4f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c4f4:	d2db      	bcs.n	800c4ae <quorem+0x42>
 800c4f6:	f855 300b 	ldr.w	r3, [r5, fp]
 800c4fa:	b92b      	cbnz	r3, 800c508 <quorem+0x9c>
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	3b04      	subs	r3, #4
 800c500:	429d      	cmp	r5, r3
 800c502:	461a      	mov	r2, r3
 800c504:	d32c      	bcc.n	800c560 <quorem+0xf4>
 800c506:	613c      	str	r4, [r7, #16]
 800c508:	4638      	mov	r0, r7
 800c50a:	f001 f9f1 	bl	800d8f0 <__mcmp>
 800c50e:	2800      	cmp	r0, #0
 800c510:	db22      	blt.n	800c558 <quorem+0xec>
 800c512:	3601      	adds	r6, #1
 800c514:	4629      	mov	r1, r5
 800c516:	2000      	movs	r0, #0
 800c518:	f858 2b04 	ldr.w	r2, [r8], #4
 800c51c:	f8d1 c000 	ldr.w	ip, [r1]
 800c520:	b293      	uxth	r3, r2
 800c522:	1ac3      	subs	r3, r0, r3
 800c524:	0c12      	lsrs	r2, r2, #16
 800c526:	fa13 f38c 	uxtah	r3, r3, ip
 800c52a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c52e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c532:	b29b      	uxth	r3, r3
 800c534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c538:	45c1      	cmp	r9, r8
 800c53a:	f841 3b04 	str.w	r3, [r1], #4
 800c53e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c542:	d2e9      	bcs.n	800c518 <quorem+0xac>
 800c544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c54c:	b922      	cbnz	r2, 800c558 <quorem+0xec>
 800c54e:	3b04      	subs	r3, #4
 800c550:	429d      	cmp	r5, r3
 800c552:	461a      	mov	r2, r3
 800c554:	d30a      	bcc.n	800c56c <quorem+0x100>
 800c556:	613c      	str	r4, [r7, #16]
 800c558:	4630      	mov	r0, r6
 800c55a:	b003      	add	sp, #12
 800c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	6812      	ldr	r2, [r2, #0]
 800c562:	3b04      	subs	r3, #4
 800c564:	2a00      	cmp	r2, #0
 800c566:	d1ce      	bne.n	800c506 <quorem+0x9a>
 800c568:	3c01      	subs	r4, #1
 800c56a:	e7c9      	b.n	800c500 <quorem+0x94>
 800c56c:	6812      	ldr	r2, [r2, #0]
 800c56e:	3b04      	subs	r3, #4
 800c570:	2a00      	cmp	r2, #0
 800c572:	d1f0      	bne.n	800c556 <quorem+0xea>
 800c574:	3c01      	subs	r4, #1
 800c576:	e7eb      	b.n	800c550 <quorem+0xe4>
 800c578:	2000      	movs	r0, #0
 800c57a:	e7ee      	b.n	800c55a <quorem+0xee>
 800c57c:	0000      	movs	r0, r0
	...

0800c580 <_dtoa_r>:
 800c580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c584:	ed2d 8b04 	vpush	{d8-d9}
 800c588:	69c5      	ldr	r5, [r0, #28]
 800c58a:	b093      	sub	sp, #76	; 0x4c
 800c58c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c590:	ec57 6b10 	vmov	r6, r7, d0
 800c594:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c598:	9107      	str	r1, [sp, #28]
 800c59a:	4604      	mov	r4, r0
 800c59c:	920a      	str	r2, [sp, #40]	; 0x28
 800c59e:	930d      	str	r3, [sp, #52]	; 0x34
 800c5a0:	b975      	cbnz	r5, 800c5c0 <_dtoa_r+0x40>
 800c5a2:	2010      	movs	r0, #16
 800c5a4:	f000 fe2a 	bl	800d1fc <malloc>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	61e0      	str	r0, [r4, #28]
 800c5ac:	b920      	cbnz	r0, 800c5b8 <_dtoa_r+0x38>
 800c5ae:	4bae      	ldr	r3, [pc, #696]	; (800c868 <_dtoa_r+0x2e8>)
 800c5b0:	21ef      	movs	r1, #239	; 0xef
 800c5b2:	48ae      	ldr	r0, [pc, #696]	; (800c86c <_dtoa_r+0x2ec>)
 800c5b4:	f7ff ff3c 	bl	800c430 <__assert_func>
 800c5b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5bc:	6005      	str	r5, [r0, #0]
 800c5be:	60c5      	str	r5, [r0, #12]
 800c5c0:	69e3      	ldr	r3, [r4, #28]
 800c5c2:	6819      	ldr	r1, [r3, #0]
 800c5c4:	b151      	cbz	r1, 800c5dc <_dtoa_r+0x5c>
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	604a      	str	r2, [r1, #4]
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	4093      	lsls	r3, r2
 800c5ce:	608b      	str	r3, [r1, #8]
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f000 ff07 	bl	800d3e4 <_Bfree>
 800c5d6:	69e3      	ldr	r3, [r4, #28]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	1e3b      	subs	r3, r7, #0
 800c5de:	bfbb      	ittet	lt
 800c5e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c5e4:	9303      	strlt	r3, [sp, #12]
 800c5e6:	2300      	movge	r3, #0
 800c5e8:	2201      	movlt	r2, #1
 800c5ea:	bfac      	ite	ge
 800c5ec:	f8c8 3000 	strge.w	r3, [r8]
 800c5f0:	f8c8 2000 	strlt.w	r2, [r8]
 800c5f4:	4b9e      	ldr	r3, [pc, #632]	; (800c870 <_dtoa_r+0x2f0>)
 800c5f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c5fa:	ea33 0308 	bics.w	r3, r3, r8
 800c5fe:	d11b      	bne.n	800c638 <_dtoa_r+0xb8>
 800c600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c602:	f242 730f 	movw	r3, #9999	; 0x270f
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c60c:	4333      	orrs	r3, r6
 800c60e:	f000 8593 	beq.w	800d138 <_dtoa_r+0xbb8>
 800c612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c614:	b963      	cbnz	r3, 800c630 <_dtoa_r+0xb0>
 800c616:	4b97      	ldr	r3, [pc, #604]	; (800c874 <_dtoa_r+0x2f4>)
 800c618:	e027      	b.n	800c66a <_dtoa_r+0xea>
 800c61a:	4b97      	ldr	r3, [pc, #604]	; (800c878 <_dtoa_r+0x2f8>)
 800c61c:	9300      	str	r3, [sp, #0]
 800c61e:	3308      	adds	r3, #8
 800c620:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c622:	6013      	str	r3, [r2, #0]
 800c624:	9800      	ldr	r0, [sp, #0]
 800c626:	b013      	add	sp, #76	; 0x4c
 800c628:	ecbd 8b04 	vpop	{d8-d9}
 800c62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c630:	4b90      	ldr	r3, [pc, #576]	; (800c874 <_dtoa_r+0x2f4>)
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	3303      	adds	r3, #3
 800c636:	e7f3      	b.n	800c620 <_dtoa_r+0xa0>
 800c638:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c63c:	2200      	movs	r2, #0
 800c63e:	ec51 0b17 	vmov	r0, r1, d7
 800c642:	eeb0 8a47 	vmov.f32	s16, s14
 800c646:	eef0 8a67 	vmov.f32	s17, s15
 800c64a:	2300      	movs	r3, #0
 800c64c:	f7f4 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c650:	4681      	mov	r9, r0
 800c652:	b160      	cbz	r0, 800c66e <_dtoa_r+0xee>
 800c654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c656:	2301      	movs	r3, #1
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 8568 	beq.w	800d132 <_dtoa_r+0xbb2>
 800c662:	4b86      	ldr	r3, [pc, #536]	; (800c87c <_dtoa_r+0x2fc>)
 800c664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	3b01      	subs	r3, #1
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	e7da      	b.n	800c624 <_dtoa_r+0xa4>
 800c66e:	aa10      	add	r2, sp, #64	; 0x40
 800c670:	a911      	add	r1, sp, #68	; 0x44
 800c672:	4620      	mov	r0, r4
 800c674:	eeb0 0a48 	vmov.f32	s0, s16
 800c678:	eef0 0a68 	vmov.f32	s1, s17
 800c67c:	f001 fa4e 	bl	800db1c <__d2b>
 800c680:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c684:	4682      	mov	sl, r0
 800c686:	2d00      	cmp	r5, #0
 800c688:	d07f      	beq.n	800c78a <_dtoa_r+0x20a>
 800c68a:	ee18 3a90 	vmov	r3, s17
 800c68e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c692:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c696:	ec51 0b18 	vmov	r0, r1, d8
 800c69a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c69e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c6a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	4b75      	ldr	r3, [pc, #468]	; (800c880 <_dtoa_r+0x300>)
 800c6ac:	f7f3 fdec 	bl	8000288 <__aeabi_dsub>
 800c6b0:	a367      	add	r3, pc, #412	; (adr r3, 800c850 <_dtoa_r+0x2d0>)
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	f7f3 ff9f 	bl	80005f8 <__aeabi_dmul>
 800c6ba:	a367      	add	r3, pc, #412	; (adr r3, 800c858 <_dtoa_r+0x2d8>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f7f3 fde4 	bl	800028c <__adddf3>
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	460f      	mov	r7, r1
 800c6ca:	f7f3 ff2b 	bl	8000524 <__aeabi_i2d>
 800c6ce:	a364      	add	r3, pc, #400	; (adr r3, 800c860 <_dtoa_r+0x2e0>)
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	f7f3 ff90 	bl	80005f8 <__aeabi_dmul>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	f7f3 fdd4 	bl	800028c <__adddf3>
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	f7f4 fa36 	bl	8000b58 <__aeabi_d2iz>
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	4683      	mov	fp, r0
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	f7f4 f9f1 	bl	8000adc <__aeabi_dcmplt>
 800c6fa:	b148      	cbz	r0, 800c710 <_dtoa_r+0x190>
 800c6fc:	4658      	mov	r0, fp
 800c6fe:	f7f3 ff11 	bl	8000524 <__aeabi_i2d>
 800c702:	4632      	mov	r2, r6
 800c704:	463b      	mov	r3, r7
 800c706:	f7f4 f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 800c70a:	b908      	cbnz	r0, 800c710 <_dtoa_r+0x190>
 800c70c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c710:	f1bb 0f16 	cmp.w	fp, #22
 800c714:	d857      	bhi.n	800c7c6 <_dtoa_r+0x246>
 800c716:	4b5b      	ldr	r3, [pc, #364]	; (800c884 <_dtoa_r+0x304>)
 800c718:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	ec51 0b18 	vmov	r0, r1, d8
 800c724:	f7f4 f9da 	bl	8000adc <__aeabi_dcmplt>
 800c728:	2800      	cmp	r0, #0
 800c72a:	d04e      	beq.n	800c7ca <_dtoa_r+0x24a>
 800c72c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c730:	2300      	movs	r3, #0
 800c732:	930c      	str	r3, [sp, #48]	; 0x30
 800c734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c736:	1b5b      	subs	r3, r3, r5
 800c738:	1e5a      	subs	r2, r3, #1
 800c73a:	bf45      	ittet	mi
 800c73c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c740:	9305      	strmi	r3, [sp, #20]
 800c742:	2300      	movpl	r3, #0
 800c744:	2300      	movmi	r3, #0
 800c746:	9206      	str	r2, [sp, #24]
 800c748:	bf54      	ite	pl
 800c74a:	9305      	strpl	r3, [sp, #20]
 800c74c:	9306      	strmi	r3, [sp, #24]
 800c74e:	f1bb 0f00 	cmp.w	fp, #0
 800c752:	db3c      	blt.n	800c7ce <_dtoa_r+0x24e>
 800c754:	9b06      	ldr	r3, [sp, #24]
 800c756:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c75a:	445b      	add	r3, fp
 800c75c:	9306      	str	r3, [sp, #24]
 800c75e:	2300      	movs	r3, #0
 800c760:	9308      	str	r3, [sp, #32]
 800c762:	9b07      	ldr	r3, [sp, #28]
 800c764:	2b09      	cmp	r3, #9
 800c766:	d868      	bhi.n	800c83a <_dtoa_r+0x2ba>
 800c768:	2b05      	cmp	r3, #5
 800c76a:	bfc4      	itt	gt
 800c76c:	3b04      	subgt	r3, #4
 800c76e:	9307      	strgt	r3, [sp, #28]
 800c770:	9b07      	ldr	r3, [sp, #28]
 800c772:	f1a3 0302 	sub.w	r3, r3, #2
 800c776:	bfcc      	ite	gt
 800c778:	2500      	movgt	r5, #0
 800c77a:	2501      	movle	r5, #1
 800c77c:	2b03      	cmp	r3, #3
 800c77e:	f200 8085 	bhi.w	800c88c <_dtoa_r+0x30c>
 800c782:	e8df f003 	tbb	[pc, r3]
 800c786:	3b2e      	.short	0x3b2e
 800c788:	5839      	.short	0x5839
 800c78a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c78e:	441d      	add	r5, r3
 800c790:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c794:	2b20      	cmp	r3, #32
 800c796:	bfc1      	itttt	gt
 800c798:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c79c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c7a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c7a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c7a8:	bfd6      	itet	le
 800c7aa:	f1c3 0320 	rsble	r3, r3, #32
 800c7ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800c7b2:	fa06 f003 	lslle.w	r0, r6, r3
 800c7b6:	f7f3 fea5 	bl	8000504 <__aeabi_ui2d>
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c7c0:	3d01      	subs	r5, #1
 800c7c2:	920e      	str	r2, [sp, #56]	; 0x38
 800c7c4:	e76f      	b.n	800c6a6 <_dtoa_r+0x126>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e7b3      	b.n	800c732 <_dtoa_r+0x1b2>
 800c7ca:	900c      	str	r0, [sp, #48]	; 0x30
 800c7cc:	e7b2      	b.n	800c734 <_dtoa_r+0x1b4>
 800c7ce:	9b05      	ldr	r3, [sp, #20]
 800c7d0:	eba3 030b 	sub.w	r3, r3, fp
 800c7d4:	9305      	str	r3, [sp, #20]
 800c7d6:	f1cb 0300 	rsb	r3, fp, #0
 800c7da:	9308      	str	r3, [sp, #32]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7e0:	e7bf      	b.n	800c762 <_dtoa_r+0x1e2>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dc52      	bgt.n	800c892 <_dtoa_r+0x312>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	9301      	str	r3, [sp, #4]
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c7f6:	e00b      	b.n	800c810 <_dtoa_r+0x290>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e7f3      	b.n	800c7e4 <_dtoa_r+0x264>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c802:	445b      	add	r3, fp
 800c804:	9301      	str	r3, [sp, #4]
 800c806:	3301      	adds	r3, #1
 800c808:	2b01      	cmp	r3, #1
 800c80a:	9304      	str	r3, [sp, #16]
 800c80c:	bfb8      	it	lt
 800c80e:	2301      	movlt	r3, #1
 800c810:	69e0      	ldr	r0, [r4, #28]
 800c812:	2100      	movs	r1, #0
 800c814:	2204      	movs	r2, #4
 800c816:	f102 0614 	add.w	r6, r2, #20
 800c81a:	429e      	cmp	r6, r3
 800c81c:	d93d      	bls.n	800c89a <_dtoa_r+0x31a>
 800c81e:	6041      	str	r1, [r0, #4]
 800c820:	4620      	mov	r0, r4
 800c822:	f000 fd9f 	bl	800d364 <_Balloc>
 800c826:	9000      	str	r0, [sp, #0]
 800c828:	2800      	cmp	r0, #0
 800c82a:	d139      	bne.n	800c8a0 <_dtoa_r+0x320>
 800c82c:	4b16      	ldr	r3, [pc, #88]	; (800c888 <_dtoa_r+0x308>)
 800c82e:	4602      	mov	r2, r0
 800c830:	f240 11af 	movw	r1, #431	; 0x1af
 800c834:	e6bd      	b.n	800c5b2 <_dtoa_r+0x32>
 800c836:	2301      	movs	r3, #1
 800c838:	e7e1      	b.n	800c7fe <_dtoa_r+0x27e>
 800c83a:	2501      	movs	r5, #1
 800c83c:	2300      	movs	r3, #0
 800c83e:	9307      	str	r3, [sp, #28]
 800c840:	9509      	str	r5, [sp, #36]	; 0x24
 800c842:	f04f 33ff 	mov.w	r3, #4294967295
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	9304      	str	r3, [sp, #16]
 800c84a:	2200      	movs	r2, #0
 800c84c:	2312      	movs	r3, #18
 800c84e:	e7d1      	b.n	800c7f4 <_dtoa_r+0x274>
 800c850:	636f4361 	.word	0x636f4361
 800c854:	3fd287a7 	.word	0x3fd287a7
 800c858:	8b60c8b3 	.word	0x8b60c8b3
 800c85c:	3fc68a28 	.word	0x3fc68a28
 800c860:	509f79fb 	.word	0x509f79fb
 800c864:	3fd34413 	.word	0x3fd34413
 800c868:	08011f08 	.word	0x08011f08
 800c86c:	08011f1f 	.word	0x08011f1f
 800c870:	7ff00000 	.word	0x7ff00000
 800c874:	08011f04 	.word	0x08011f04
 800c878:	08011efb 	.word	0x08011efb
 800c87c:	08012261 	.word	0x08012261
 800c880:	3ff80000 	.word	0x3ff80000
 800c884:	08012010 	.word	0x08012010
 800c888:	08011f77 	.word	0x08011f77
 800c88c:	2301      	movs	r3, #1
 800c88e:	9309      	str	r3, [sp, #36]	; 0x24
 800c890:	e7d7      	b.n	800c842 <_dtoa_r+0x2c2>
 800c892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	9304      	str	r3, [sp, #16]
 800c898:	e7ba      	b.n	800c810 <_dtoa_r+0x290>
 800c89a:	3101      	adds	r1, #1
 800c89c:	0052      	lsls	r2, r2, #1
 800c89e:	e7ba      	b.n	800c816 <_dtoa_r+0x296>
 800c8a0:	69e3      	ldr	r3, [r4, #28]
 800c8a2:	9a00      	ldr	r2, [sp, #0]
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	2b0e      	cmp	r3, #14
 800c8aa:	f200 80a8 	bhi.w	800c9fe <_dtoa_r+0x47e>
 800c8ae:	2d00      	cmp	r5, #0
 800c8b0:	f000 80a5 	beq.w	800c9fe <_dtoa_r+0x47e>
 800c8b4:	f1bb 0f00 	cmp.w	fp, #0
 800c8b8:	dd38      	ble.n	800c92c <_dtoa_r+0x3ac>
 800c8ba:	4bc0      	ldr	r3, [pc, #768]	; (800cbbc <_dtoa_r+0x63c>)
 800c8bc:	f00b 020f 	and.w	r2, fp, #15
 800c8c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c8c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c8cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c8d0:	d019      	beq.n	800c906 <_dtoa_r+0x386>
 800c8d2:	4bbb      	ldr	r3, [pc, #748]	; (800cbc0 <_dtoa_r+0x640>)
 800c8d4:	ec51 0b18 	vmov	r0, r1, d8
 800c8d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8dc:	f7f3 ffb6 	bl	800084c <__aeabi_ddiv>
 800c8e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8e4:	f008 080f 	and.w	r8, r8, #15
 800c8e8:	2503      	movs	r5, #3
 800c8ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cbc0 <_dtoa_r+0x640>
 800c8ee:	f1b8 0f00 	cmp.w	r8, #0
 800c8f2:	d10a      	bne.n	800c90a <_dtoa_r+0x38a>
 800c8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	463b      	mov	r3, r7
 800c8fc:	f7f3 ffa6 	bl	800084c <__aeabi_ddiv>
 800c900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c904:	e02b      	b.n	800c95e <_dtoa_r+0x3de>
 800c906:	2502      	movs	r5, #2
 800c908:	e7ef      	b.n	800c8ea <_dtoa_r+0x36a>
 800c90a:	f018 0f01 	tst.w	r8, #1
 800c90e:	d008      	beq.n	800c922 <_dtoa_r+0x3a2>
 800c910:	4630      	mov	r0, r6
 800c912:	4639      	mov	r1, r7
 800c914:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c918:	f7f3 fe6e 	bl	80005f8 <__aeabi_dmul>
 800c91c:	3501      	adds	r5, #1
 800c91e:	4606      	mov	r6, r0
 800c920:	460f      	mov	r7, r1
 800c922:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c926:	f109 0908 	add.w	r9, r9, #8
 800c92a:	e7e0      	b.n	800c8ee <_dtoa_r+0x36e>
 800c92c:	f000 809f 	beq.w	800ca6e <_dtoa_r+0x4ee>
 800c930:	f1cb 0600 	rsb	r6, fp, #0
 800c934:	4ba1      	ldr	r3, [pc, #644]	; (800cbbc <_dtoa_r+0x63c>)
 800c936:	4fa2      	ldr	r7, [pc, #648]	; (800cbc0 <_dtoa_r+0x640>)
 800c938:	f006 020f 	and.w	r2, r6, #15
 800c93c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	ec51 0b18 	vmov	r0, r1, d8
 800c948:	f7f3 fe56 	bl	80005f8 <__aeabi_dmul>
 800c94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c950:	1136      	asrs	r6, r6, #4
 800c952:	2300      	movs	r3, #0
 800c954:	2502      	movs	r5, #2
 800c956:	2e00      	cmp	r6, #0
 800c958:	d17e      	bne.n	800ca58 <_dtoa_r+0x4d8>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1d0      	bne.n	800c900 <_dtoa_r+0x380>
 800c95e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c960:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 8084 	beq.w	800ca72 <_dtoa_r+0x4f2>
 800c96a:	4b96      	ldr	r3, [pc, #600]	; (800cbc4 <_dtoa_r+0x644>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	4640      	mov	r0, r8
 800c970:	4649      	mov	r1, r9
 800c972:	f7f4 f8b3 	bl	8000adc <__aeabi_dcmplt>
 800c976:	2800      	cmp	r0, #0
 800c978:	d07b      	beq.n	800ca72 <_dtoa_r+0x4f2>
 800c97a:	9b04      	ldr	r3, [sp, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d078      	beq.n	800ca72 <_dtoa_r+0x4f2>
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	dd39      	ble.n	800c9fa <_dtoa_r+0x47a>
 800c986:	4b90      	ldr	r3, [pc, #576]	; (800cbc8 <_dtoa_r+0x648>)
 800c988:	2200      	movs	r2, #0
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f3 fe33 	bl	80005f8 <__aeabi_dmul>
 800c992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c996:	9e01      	ldr	r6, [sp, #4]
 800c998:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c99c:	3501      	adds	r5, #1
 800c99e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	f7f3 fdbe 	bl	8000524 <__aeabi_i2d>
 800c9a8:	4642      	mov	r2, r8
 800c9aa:	464b      	mov	r3, r9
 800c9ac:	f7f3 fe24 	bl	80005f8 <__aeabi_dmul>
 800c9b0:	4b86      	ldr	r3, [pc, #536]	; (800cbcc <_dtoa_r+0x64c>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f7f3 fc6a 	bl	800028c <__adddf3>
 800c9b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c9bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9c0:	9303      	str	r3, [sp, #12]
 800c9c2:	2e00      	cmp	r6, #0
 800c9c4:	d158      	bne.n	800ca78 <_dtoa_r+0x4f8>
 800c9c6:	4b82      	ldr	r3, [pc, #520]	; (800cbd0 <_dtoa_r+0x650>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f3 fc5b 	bl	8000288 <__aeabi_dsub>
 800c9d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9d6:	4680      	mov	r8, r0
 800c9d8:	4689      	mov	r9, r1
 800c9da:	f7f4 f89d 	bl	8000b18 <__aeabi_dcmpgt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	f040 8296 	bne.w	800cf10 <_dtoa_r+0x990>
 800c9e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9ee:	4649      	mov	r1, r9
 800c9f0:	f7f4 f874 	bl	8000adc <__aeabi_dcmplt>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	f040 8289 	bne.w	800cf0c <_dtoa_r+0x98c>
 800c9fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f2c0 814e 	blt.w	800cca2 <_dtoa_r+0x722>
 800ca06:	f1bb 0f0e 	cmp.w	fp, #14
 800ca0a:	f300 814a 	bgt.w	800cca2 <_dtoa_r+0x722>
 800ca0e:	4b6b      	ldr	r3, [pc, #428]	; (800cbbc <_dtoa_r+0x63c>)
 800ca10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f280 80dc 	bge.w	800cbd8 <_dtoa_r+0x658>
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f300 80d8 	bgt.w	800cbd8 <_dtoa_r+0x658>
 800ca28:	f040 826f 	bne.w	800cf0a <_dtoa_r+0x98a>
 800ca2c:	4b68      	ldr	r3, [pc, #416]	; (800cbd0 <_dtoa_r+0x650>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	4640      	mov	r0, r8
 800ca32:	4649      	mov	r1, r9
 800ca34:	f7f3 fde0 	bl	80005f8 <__aeabi_dmul>
 800ca38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca3c:	f7f4 f862 	bl	8000b04 <__aeabi_dcmpge>
 800ca40:	9e04      	ldr	r6, [sp, #16]
 800ca42:	4637      	mov	r7, r6
 800ca44:	2800      	cmp	r0, #0
 800ca46:	f040 8245 	bne.w	800ced4 <_dtoa_r+0x954>
 800ca4a:	9d00      	ldr	r5, [sp, #0]
 800ca4c:	2331      	movs	r3, #49	; 0x31
 800ca4e:	f805 3b01 	strb.w	r3, [r5], #1
 800ca52:	f10b 0b01 	add.w	fp, fp, #1
 800ca56:	e241      	b.n	800cedc <_dtoa_r+0x95c>
 800ca58:	07f2      	lsls	r2, r6, #31
 800ca5a:	d505      	bpl.n	800ca68 <_dtoa_r+0x4e8>
 800ca5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca60:	f7f3 fdca 	bl	80005f8 <__aeabi_dmul>
 800ca64:	3501      	adds	r5, #1
 800ca66:	2301      	movs	r3, #1
 800ca68:	1076      	asrs	r6, r6, #1
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	e773      	b.n	800c956 <_dtoa_r+0x3d6>
 800ca6e:	2502      	movs	r5, #2
 800ca70:	e775      	b.n	800c95e <_dtoa_r+0x3de>
 800ca72:	9e04      	ldr	r6, [sp, #16]
 800ca74:	465f      	mov	r7, fp
 800ca76:	e792      	b.n	800c99e <_dtoa_r+0x41e>
 800ca78:	9900      	ldr	r1, [sp, #0]
 800ca7a:	4b50      	ldr	r3, [pc, #320]	; (800cbbc <_dtoa_r+0x63c>)
 800ca7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca80:	4431      	add	r1, r6
 800ca82:	9102      	str	r1, [sp, #8]
 800ca84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca86:	eeb0 9a47 	vmov.f32	s18, s14
 800ca8a:	eef0 9a67 	vmov.f32	s19, s15
 800ca8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ca96:	2900      	cmp	r1, #0
 800ca98:	d044      	beq.n	800cb24 <_dtoa_r+0x5a4>
 800ca9a:	494e      	ldr	r1, [pc, #312]	; (800cbd4 <_dtoa_r+0x654>)
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	f7f3 fed5 	bl	800084c <__aeabi_ddiv>
 800caa2:	ec53 2b19 	vmov	r2, r3, d9
 800caa6:	f7f3 fbef 	bl	8000288 <__aeabi_dsub>
 800caaa:	9d00      	ldr	r5, [sp, #0]
 800caac:	ec41 0b19 	vmov	d9, r0, r1
 800cab0:	4649      	mov	r1, r9
 800cab2:	4640      	mov	r0, r8
 800cab4:	f7f4 f850 	bl	8000b58 <__aeabi_d2iz>
 800cab8:	4606      	mov	r6, r0
 800caba:	f7f3 fd33 	bl	8000524 <__aeabi_i2d>
 800cabe:	4602      	mov	r2, r0
 800cac0:	460b      	mov	r3, r1
 800cac2:	4640      	mov	r0, r8
 800cac4:	4649      	mov	r1, r9
 800cac6:	f7f3 fbdf 	bl	8000288 <__aeabi_dsub>
 800caca:	3630      	adds	r6, #48	; 0x30
 800cacc:	f805 6b01 	strb.w	r6, [r5], #1
 800cad0:	ec53 2b19 	vmov	r2, r3, d9
 800cad4:	4680      	mov	r8, r0
 800cad6:	4689      	mov	r9, r1
 800cad8:	f7f4 f800 	bl	8000adc <__aeabi_dcmplt>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d164      	bne.n	800cbaa <_dtoa_r+0x62a>
 800cae0:	4642      	mov	r2, r8
 800cae2:	464b      	mov	r3, r9
 800cae4:	4937      	ldr	r1, [pc, #220]	; (800cbc4 <_dtoa_r+0x644>)
 800cae6:	2000      	movs	r0, #0
 800cae8:	f7f3 fbce 	bl	8000288 <__aeabi_dsub>
 800caec:	ec53 2b19 	vmov	r2, r3, d9
 800caf0:	f7f3 fff4 	bl	8000adc <__aeabi_dcmplt>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f040 80b6 	bne.w	800cc66 <_dtoa_r+0x6e6>
 800cafa:	9b02      	ldr	r3, [sp, #8]
 800cafc:	429d      	cmp	r5, r3
 800cafe:	f43f af7c 	beq.w	800c9fa <_dtoa_r+0x47a>
 800cb02:	4b31      	ldr	r3, [pc, #196]	; (800cbc8 <_dtoa_r+0x648>)
 800cb04:	ec51 0b19 	vmov	r0, r1, d9
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f7f3 fd75 	bl	80005f8 <__aeabi_dmul>
 800cb0e:	4b2e      	ldr	r3, [pc, #184]	; (800cbc8 <_dtoa_r+0x648>)
 800cb10:	ec41 0b19 	vmov	d9, r0, r1
 800cb14:	2200      	movs	r2, #0
 800cb16:	4640      	mov	r0, r8
 800cb18:	4649      	mov	r1, r9
 800cb1a:	f7f3 fd6d 	bl	80005f8 <__aeabi_dmul>
 800cb1e:	4680      	mov	r8, r0
 800cb20:	4689      	mov	r9, r1
 800cb22:	e7c5      	b.n	800cab0 <_dtoa_r+0x530>
 800cb24:	ec51 0b17 	vmov	r0, r1, d7
 800cb28:	f7f3 fd66 	bl	80005f8 <__aeabi_dmul>
 800cb2c:	9b02      	ldr	r3, [sp, #8]
 800cb2e:	9d00      	ldr	r5, [sp, #0]
 800cb30:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb32:	ec41 0b19 	vmov	d9, r0, r1
 800cb36:	4649      	mov	r1, r9
 800cb38:	4640      	mov	r0, r8
 800cb3a:	f7f4 f80d 	bl	8000b58 <__aeabi_d2iz>
 800cb3e:	4606      	mov	r6, r0
 800cb40:	f7f3 fcf0 	bl	8000524 <__aeabi_i2d>
 800cb44:	3630      	adds	r6, #48	; 0x30
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4640      	mov	r0, r8
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	f7f3 fb9b 	bl	8000288 <__aeabi_dsub>
 800cb52:	f805 6b01 	strb.w	r6, [r5], #1
 800cb56:	9b02      	ldr	r3, [sp, #8]
 800cb58:	429d      	cmp	r5, r3
 800cb5a:	4680      	mov	r8, r0
 800cb5c:	4689      	mov	r9, r1
 800cb5e:	f04f 0200 	mov.w	r2, #0
 800cb62:	d124      	bne.n	800cbae <_dtoa_r+0x62e>
 800cb64:	4b1b      	ldr	r3, [pc, #108]	; (800cbd4 <_dtoa_r+0x654>)
 800cb66:	ec51 0b19 	vmov	r0, r1, d9
 800cb6a:	f7f3 fb8f 	bl	800028c <__adddf3>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4640      	mov	r0, r8
 800cb74:	4649      	mov	r1, r9
 800cb76:	f7f3 ffcf 	bl	8000b18 <__aeabi_dcmpgt>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d173      	bne.n	800cc66 <_dtoa_r+0x6e6>
 800cb7e:	ec53 2b19 	vmov	r2, r3, d9
 800cb82:	4914      	ldr	r1, [pc, #80]	; (800cbd4 <_dtoa_r+0x654>)
 800cb84:	2000      	movs	r0, #0
 800cb86:	f7f3 fb7f 	bl	8000288 <__aeabi_dsub>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4640      	mov	r0, r8
 800cb90:	4649      	mov	r1, r9
 800cb92:	f7f3 ffa3 	bl	8000adc <__aeabi_dcmplt>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	f43f af2f 	beq.w	800c9fa <_dtoa_r+0x47a>
 800cb9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cb9e:	1e6b      	subs	r3, r5, #1
 800cba0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cba6:	2b30      	cmp	r3, #48	; 0x30
 800cba8:	d0f8      	beq.n	800cb9c <_dtoa_r+0x61c>
 800cbaa:	46bb      	mov	fp, r7
 800cbac:	e04a      	b.n	800cc44 <_dtoa_r+0x6c4>
 800cbae:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <_dtoa_r+0x648>)
 800cbb0:	f7f3 fd22 	bl	80005f8 <__aeabi_dmul>
 800cbb4:	4680      	mov	r8, r0
 800cbb6:	4689      	mov	r9, r1
 800cbb8:	e7bd      	b.n	800cb36 <_dtoa_r+0x5b6>
 800cbba:	bf00      	nop
 800cbbc:	08012010 	.word	0x08012010
 800cbc0:	08011fe8 	.word	0x08011fe8
 800cbc4:	3ff00000 	.word	0x3ff00000
 800cbc8:	40240000 	.word	0x40240000
 800cbcc:	401c0000 	.word	0x401c0000
 800cbd0:	40140000 	.word	0x40140000
 800cbd4:	3fe00000 	.word	0x3fe00000
 800cbd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cbdc:	9d00      	ldr	r5, [sp, #0]
 800cbde:	4642      	mov	r2, r8
 800cbe0:	464b      	mov	r3, r9
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 fe31 	bl	800084c <__aeabi_ddiv>
 800cbea:	f7f3 ffb5 	bl	8000b58 <__aeabi_d2iz>
 800cbee:	9001      	str	r0, [sp, #4]
 800cbf0:	f7f3 fc98 	bl	8000524 <__aeabi_i2d>
 800cbf4:	4642      	mov	r2, r8
 800cbf6:	464b      	mov	r3, r9
 800cbf8:	f7f3 fcfe 	bl	80005f8 <__aeabi_dmul>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4630      	mov	r0, r6
 800cc02:	4639      	mov	r1, r7
 800cc04:	f7f3 fb40 	bl	8000288 <__aeabi_dsub>
 800cc08:	9e01      	ldr	r6, [sp, #4]
 800cc0a:	9f04      	ldr	r7, [sp, #16]
 800cc0c:	3630      	adds	r6, #48	; 0x30
 800cc0e:	f805 6b01 	strb.w	r6, [r5], #1
 800cc12:	9e00      	ldr	r6, [sp, #0]
 800cc14:	1bae      	subs	r6, r5, r6
 800cc16:	42b7      	cmp	r7, r6
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	d134      	bne.n	800cc88 <_dtoa_r+0x708>
 800cc1e:	f7f3 fb35 	bl	800028c <__adddf3>
 800cc22:	4642      	mov	r2, r8
 800cc24:	464b      	mov	r3, r9
 800cc26:	4606      	mov	r6, r0
 800cc28:	460f      	mov	r7, r1
 800cc2a:	f7f3 ff75 	bl	8000b18 <__aeabi_dcmpgt>
 800cc2e:	b9c8      	cbnz	r0, 800cc64 <_dtoa_r+0x6e4>
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	4630      	mov	r0, r6
 800cc36:	4639      	mov	r1, r7
 800cc38:	f7f3 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc3c:	b110      	cbz	r0, 800cc44 <_dtoa_r+0x6c4>
 800cc3e:	9b01      	ldr	r3, [sp, #4]
 800cc40:	07db      	lsls	r3, r3, #31
 800cc42:	d40f      	bmi.n	800cc64 <_dtoa_r+0x6e4>
 800cc44:	4651      	mov	r1, sl
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 fbcc 	bl	800d3e4 <_Bfree>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc50:	702b      	strb	r3, [r5, #0]
 800cc52:	f10b 0301 	add.w	r3, fp, #1
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f43f ace2 	beq.w	800c624 <_dtoa_r+0xa4>
 800cc60:	601d      	str	r5, [r3, #0]
 800cc62:	e4df      	b.n	800c624 <_dtoa_r+0xa4>
 800cc64:	465f      	mov	r7, fp
 800cc66:	462b      	mov	r3, r5
 800cc68:	461d      	mov	r5, r3
 800cc6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc6e:	2a39      	cmp	r2, #57	; 0x39
 800cc70:	d106      	bne.n	800cc80 <_dtoa_r+0x700>
 800cc72:	9a00      	ldr	r2, [sp, #0]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d1f7      	bne.n	800cc68 <_dtoa_r+0x6e8>
 800cc78:	9900      	ldr	r1, [sp, #0]
 800cc7a:	2230      	movs	r2, #48	; 0x30
 800cc7c:	3701      	adds	r7, #1
 800cc7e:	700a      	strb	r2, [r1, #0]
 800cc80:	781a      	ldrb	r2, [r3, #0]
 800cc82:	3201      	adds	r2, #1
 800cc84:	701a      	strb	r2, [r3, #0]
 800cc86:	e790      	b.n	800cbaa <_dtoa_r+0x62a>
 800cc88:	4ba3      	ldr	r3, [pc, #652]	; (800cf18 <_dtoa_r+0x998>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f7f3 fcb4 	bl	80005f8 <__aeabi_dmul>
 800cc90:	2200      	movs	r2, #0
 800cc92:	2300      	movs	r3, #0
 800cc94:	4606      	mov	r6, r0
 800cc96:	460f      	mov	r7, r1
 800cc98:	f7f3 ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d09e      	beq.n	800cbde <_dtoa_r+0x65e>
 800cca0:	e7d0      	b.n	800cc44 <_dtoa_r+0x6c4>
 800cca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cca4:	2a00      	cmp	r2, #0
 800cca6:	f000 80ca 	beq.w	800ce3e <_dtoa_r+0x8be>
 800ccaa:	9a07      	ldr	r2, [sp, #28]
 800ccac:	2a01      	cmp	r2, #1
 800ccae:	f300 80ad 	bgt.w	800ce0c <_dtoa_r+0x88c>
 800ccb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccb4:	2a00      	cmp	r2, #0
 800ccb6:	f000 80a5 	beq.w	800ce04 <_dtoa_r+0x884>
 800ccba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ccbe:	9e08      	ldr	r6, [sp, #32]
 800ccc0:	9d05      	ldr	r5, [sp, #20]
 800ccc2:	9a05      	ldr	r2, [sp, #20]
 800ccc4:	441a      	add	r2, r3
 800ccc6:	9205      	str	r2, [sp, #20]
 800ccc8:	9a06      	ldr	r2, [sp, #24]
 800ccca:	2101      	movs	r1, #1
 800cccc:	441a      	add	r2, r3
 800ccce:	4620      	mov	r0, r4
 800ccd0:	9206      	str	r2, [sp, #24]
 800ccd2:	f000 fc87 	bl	800d5e4 <__i2b>
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	b165      	cbz	r5, 800ccf4 <_dtoa_r+0x774>
 800ccda:	9b06      	ldr	r3, [sp, #24]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	dd09      	ble.n	800ccf4 <_dtoa_r+0x774>
 800cce0:	42ab      	cmp	r3, r5
 800cce2:	9a05      	ldr	r2, [sp, #20]
 800cce4:	bfa8      	it	ge
 800cce6:	462b      	movge	r3, r5
 800cce8:	1ad2      	subs	r2, r2, r3
 800ccea:	9205      	str	r2, [sp, #20]
 800ccec:	9a06      	ldr	r2, [sp, #24]
 800ccee:	1aed      	subs	r5, r5, r3
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	9306      	str	r3, [sp, #24]
 800ccf4:	9b08      	ldr	r3, [sp, #32]
 800ccf6:	b1f3      	cbz	r3, 800cd36 <_dtoa_r+0x7b6>
 800ccf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f000 80a3 	beq.w	800ce46 <_dtoa_r+0x8c6>
 800cd00:	2e00      	cmp	r6, #0
 800cd02:	dd10      	ble.n	800cd26 <_dtoa_r+0x7a6>
 800cd04:	4639      	mov	r1, r7
 800cd06:	4632      	mov	r2, r6
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 fd2b 	bl	800d764 <__pow5mult>
 800cd0e:	4652      	mov	r2, sl
 800cd10:	4601      	mov	r1, r0
 800cd12:	4607      	mov	r7, r0
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 fc7b 	bl	800d610 <__multiply>
 800cd1a:	4651      	mov	r1, sl
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 fb60 	bl	800d3e4 <_Bfree>
 800cd24:	46c2      	mov	sl, r8
 800cd26:	9b08      	ldr	r3, [sp, #32]
 800cd28:	1b9a      	subs	r2, r3, r6
 800cd2a:	d004      	beq.n	800cd36 <_dtoa_r+0x7b6>
 800cd2c:	4651      	mov	r1, sl
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f000 fd18 	bl	800d764 <__pow5mult>
 800cd34:	4682      	mov	sl, r0
 800cd36:	2101      	movs	r1, #1
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f000 fc53 	bl	800d5e4 <__i2b>
 800cd3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	4606      	mov	r6, r0
 800cd44:	f340 8081 	ble.w	800ce4a <_dtoa_r+0x8ca>
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f000 fd09 	bl	800d764 <__pow5mult>
 800cd52:	9b07      	ldr	r3, [sp, #28]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	4606      	mov	r6, r0
 800cd58:	dd7a      	ble.n	800ce50 <_dtoa_r+0x8d0>
 800cd5a:	f04f 0800 	mov.w	r8, #0
 800cd5e:	6933      	ldr	r3, [r6, #16]
 800cd60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd64:	6918      	ldr	r0, [r3, #16]
 800cd66:	f000 fbef 	bl	800d548 <__hi0bits>
 800cd6a:	f1c0 0020 	rsb	r0, r0, #32
 800cd6e:	9b06      	ldr	r3, [sp, #24]
 800cd70:	4418      	add	r0, r3
 800cd72:	f010 001f 	ands.w	r0, r0, #31
 800cd76:	f000 8094 	beq.w	800cea2 <_dtoa_r+0x922>
 800cd7a:	f1c0 0320 	rsb	r3, r0, #32
 800cd7e:	2b04      	cmp	r3, #4
 800cd80:	f340 8085 	ble.w	800ce8e <_dtoa_r+0x90e>
 800cd84:	9b05      	ldr	r3, [sp, #20]
 800cd86:	f1c0 001c 	rsb	r0, r0, #28
 800cd8a:	4403      	add	r3, r0
 800cd8c:	9305      	str	r3, [sp, #20]
 800cd8e:	9b06      	ldr	r3, [sp, #24]
 800cd90:	4403      	add	r3, r0
 800cd92:	4405      	add	r5, r0
 800cd94:	9306      	str	r3, [sp, #24]
 800cd96:	9b05      	ldr	r3, [sp, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	dd05      	ble.n	800cda8 <_dtoa_r+0x828>
 800cd9c:	4651      	mov	r1, sl
 800cd9e:	461a      	mov	r2, r3
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fd39 	bl	800d818 <__lshift>
 800cda6:	4682      	mov	sl, r0
 800cda8:	9b06      	ldr	r3, [sp, #24]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	dd05      	ble.n	800cdba <_dtoa_r+0x83a>
 800cdae:	4631      	mov	r1, r6
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 fd30 	bl	800d818 <__lshift>
 800cdb8:	4606      	mov	r6, r0
 800cdba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d072      	beq.n	800cea6 <_dtoa_r+0x926>
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4650      	mov	r0, sl
 800cdc4:	f000 fd94 	bl	800d8f0 <__mcmp>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	da6c      	bge.n	800cea6 <_dtoa_r+0x926>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4651      	mov	r1, sl
 800cdd0:	220a      	movs	r2, #10
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f000 fb28 	bl	800d428 <__multadd>
 800cdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdde:	4682      	mov	sl, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 81b0 	beq.w	800d146 <_dtoa_r+0xbc6>
 800cde6:	2300      	movs	r3, #0
 800cde8:	4639      	mov	r1, r7
 800cdea:	220a      	movs	r2, #10
 800cdec:	4620      	mov	r0, r4
 800cdee:	f000 fb1b 	bl	800d428 <__multadd>
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	4607      	mov	r7, r0
 800cdf8:	f300 8096 	bgt.w	800cf28 <_dtoa_r+0x9a8>
 800cdfc:	9b07      	ldr	r3, [sp, #28]
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	dc59      	bgt.n	800ceb6 <_dtoa_r+0x936>
 800ce02:	e091      	b.n	800cf28 <_dtoa_r+0x9a8>
 800ce04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce0a:	e758      	b.n	800ccbe <_dtoa_r+0x73e>
 800ce0c:	9b04      	ldr	r3, [sp, #16]
 800ce0e:	1e5e      	subs	r6, r3, #1
 800ce10:	9b08      	ldr	r3, [sp, #32]
 800ce12:	42b3      	cmp	r3, r6
 800ce14:	bfbf      	itttt	lt
 800ce16:	9b08      	ldrlt	r3, [sp, #32]
 800ce18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ce1a:	9608      	strlt	r6, [sp, #32]
 800ce1c:	1af3      	sublt	r3, r6, r3
 800ce1e:	bfb4      	ite	lt
 800ce20:	18d2      	addlt	r2, r2, r3
 800ce22:	1b9e      	subge	r6, r3, r6
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	bfbc      	itt	lt
 800ce28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ce2a:	2600      	movlt	r6, #0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	bfb7      	itett	lt
 800ce30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ce34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ce38:	1a9d      	sublt	r5, r3, r2
 800ce3a:	2300      	movlt	r3, #0
 800ce3c:	e741      	b.n	800ccc2 <_dtoa_r+0x742>
 800ce3e:	9e08      	ldr	r6, [sp, #32]
 800ce40:	9d05      	ldr	r5, [sp, #20]
 800ce42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce44:	e748      	b.n	800ccd8 <_dtoa_r+0x758>
 800ce46:	9a08      	ldr	r2, [sp, #32]
 800ce48:	e770      	b.n	800cd2c <_dtoa_r+0x7ac>
 800ce4a:	9b07      	ldr	r3, [sp, #28]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	dc19      	bgt.n	800ce84 <_dtoa_r+0x904>
 800ce50:	9b02      	ldr	r3, [sp, #8]
 800ce52:	b9bb      	cbnz	r3, 800ce84 <_dtoa_r+0x904>
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce5a:	b99b      	cbnz	r3, 800ce84 <_dtoa_r+0x904>
 800ce5c:	9b03      	ldr	r3, [sp, #12]
 800ce5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce62:	0d1b      	lsrs	r3, r3, #20
 800ce64:	051b      	lsls	r3, r3, #20
 800ce66:	b183      	cbz	r3, 800ce8a <_dtoa_r+0x90a>
 800ce68:	9b05      	ldr	r3, [sp, #20]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	9305      	str	r3, [sp, #20]
 800ce6e:	9b06      	ldr	r3, [sp, #24]
 800ce70:	3301      	adds	r3, #1
 800ce72:	9306      	str	r3, [sp, #24]
 800ce74:	f04f 0801 	mov.w	r8, #1
 800ce78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f47f af6f 	bne.w	800cd5e <_dtoa_r+0x7de>
 800ce80:	2001      	movs	r0, #1
 800ce82:	e774      	b.n	800cd6e <_dtoa_r+0x7ee>
 800ce84:	f04f 0800 	mov.w	r8, #0
 800ce88:	e7f6      	b.n	800ce78 <_dtoa_r+0x8f8>
 800ce8a:	4698      	mov	r8, r3
 800ce8c:	e7f4      	b.n	800ce78 <_dtoa_r+0x8f8>
 800ce8e:	d082      	beq.n	800cd96 <_dtoa_r+0x816>
 800ce90:	9a05      	ldr	r2, [sp, #20]
 800ce92:	331c      	adds	r3, #28
 800ce94:	441a      	add	r2, r3
 800ce96:	9205      	str	r2, [sp, #20]
 800ce98:	9a06      	ldr	r2, [sp, #24]
 800ce9a:	441a      	add	r2, r3
 800ce9c:	441d      	add	r5, r3
 800ce9e:	9206      	str	r2, [sp, #24]
 800cea0:	e779      	b.n	800cd96 <_dtoa_r+0x816>
 800cea2:	4603      	mov	r3, r0
 800cea4:	e7f4      	b.n	800ce90 <_dtoa_r+0x910>
 800cea6:	9b04      	ldr	r3, [sp, #16]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	dc37      	bgt.n	800cf1c <_dtoa_r+0x99c>
 800ceac:	9b07      	ldr	r3, [sp, #28]
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	dd34      	ble.n	800cf1c <_dtoa_r+0x99c>
 800ceb2:	9b04      	ldr	r3, [sp, #16]
 800ceb4:	9301      	str	r3, [sp, #4]
 800ceb6:	9b01      	ldr	r3, [sp, #4]
 800ceb8:	b963      	cbnz	r3, 800ced4 <_dtoa_r+0x954>
 800ceba:	4631      	mov	r1, r6
 800cebc:	2205      	movs	r2, #5
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 fab2 	bl	800d428 <__multadd>
 800cec4:	4601      	mov	r1, r0
 800cec6:	4606      	mov	r6, r0
 800cec8:	4650      	mov	r0, sl
 800ceca:	f000 fd11 	bl	800d8f0 <__mcmp>
 800cece:	2800      	cmp	r0, #0
 800ced0:	f73f adbb 	bgt.w	800ca4a <_dtoa_r+0x4ca>
 800ced4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced6:	9d00      	ldr	r5, [sp, #0]
 800ced8:	ea6f 0b03 	mvn.w	fp, r3
 800cedc:	f04f 0800 	mov.w	r8, #0
 800cee0:	4631      	mov	r1, r6
 800cee2:	4620      	mov	r0, r4
 800cee4:	f000 fa7e 	bl	800d3e4 <_Bfree>
 800cee8:	2f00      	cmp	r7, #0
 800ceea:	f43f aeab 	beq.w	800cc44 <_dtoa_r+0x6c4>
 800ceee:	f1b8 0f00 	cmp.w	r8, #0
 800cef2:	d005      	beq.n	800cf00 <_dtoa_r+0x980>
 800cef4:	45b8      	cmp	r8, r7
 800cef6:	d003      	beq.n	800cf00 <_dtoa_r+0x980>
 800cef8:	4641      	mov	r1, r8
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 fa72 	bl	800d3e4 <_Bfree>
 800cf00:	4639      	mov	r1, r7
 800cf02:	4620      	mov	r0, r4
 800cf04:	f000 fa6e 	bl	800d3e4 <_Bfree>
 800cf08:	e69c      	b.n	800cc44 <_dtoa_r+0x6c4>
 800cf0a:	2600      	movs	r6, #0
 800cf0c:	4637      	mov	r7, r6
 800cf0e:	e7e1      	b.n	800ced4 <_dtoa_r+0x954>
 800cf10:	46bb      	mov	fp, r7
 800cf12:	4637      	mov	r7, r6
 800cf14:	e599      	b.n	800ca4a <_dtoa_r+0x4ca>
 800cf16:	bf00      	nop
 800cf18:	40240000 	.word	0x40240000
 800cf1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f000 80c8 	beq.w	800d0b4 <_dtoa_r+0xb34>
 800cf24:	9b04      	ldr	r3, [sp, #16]
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	2d00      	cmp	r5, #0
 800cf2a:	dd05      	ble.n	800cf38 <_dtoa_r+0x9b8>
 800cf2c:	4639      	mov	r1, r7
 800cf2e:	462a      	mov	r2, r5
 800cf30:	4620      	mov	r0, r4
 800cf32:	f000 fc71 	bl	800d818 <__lshift>
 800cf36:	4607      	mov	r7, r0
 800cf38:	f1b8 0f00 	cmp.w	r8, #0
 800cf3c:	d05b      	beq.n	800cff6 <_dtoa_r+0xa76>
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 fa0f 	bl	800d364 <_Balloc>
 800cf46:	4605      	mov	r5, r0
 800cf48:	b928      	cbnz	r0, 800cf56 <_dtoa_r+0x9d6>
 800cf4a:	4b83      	ldr	r3, [pc, #524]	; (800d158 <_dtoa_r+0xbd8>)
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cf52:	f7ff bb2e 	b.w	800c5b2 <_dtoa_r+0x32>
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	3202      	adds	r2, #2
 800cf5a:	0092      	lsls	r2, r2, #2
 800cf5c:	f107 010c 	add.w	r1, r7, #12
 800cf60:	300c      	adds	r0, #12
 800cf62:	f7ff fa51 	bl	800c408 <memcpy>
 800cf66:	2201      	movs	r2, #1
 800cf68:	4629      	mov	r1, r5
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f000 fc54 	bl	800d818 <__lshift>
 800cf70:	9b00      	ldr	r3, [sp, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	9308      	str	r3, [sp, #32]
 800cf7e:	9b02      	ldr	r3, [sp, #8]
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	46b8      	mov	r8, r7
 800cf86:	9306      	str	r3, [sp, #24]
 800cf88:	4607      	mov	r7, r0
 800cf8a:	9b04      	ldr	r3, [sp, #16]
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	4650      	mov	r0, sl
 800cf92:	9301      	str	r3, [sp, #4]
 800cf94:	f7ff fa6a 	bl	800c46c <quorem>
 800cf98:	4641      	mov	r1, r8
 800cf9a:	9002      	str	r0, [sp, #8]
 800cf9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cfa0:	4650      	mov	r0, sl
 800cfa2:	f000 fca5 	bl	800d8f0 <__mcmp>
 800cfa6:	463a      	mov	r2, r7
 800cfa8:	9005      	str	r0, [sp, #20]
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4620      	mov	r0, r4
 800cfae:	f000 fcbb 	bl	800d928 <__mdiff>
 800cfb2:	68c2      	ldr	r2, [r0, #12]
 800cfb4:	4605      	mov	r5, r0
 800cfb6:	bb02      	cbnz	r2, 800cffa <_dtoa_r+0xa7a>
 800cfb8:	4601      	mov	r1, r0
 800cfba:	4650      	mov	r0, sl
 800cfbc:	f000 fc98 	bl	800d8f0 <__mcmp>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	9209      	str	r2, [sp, #36]	; 0x24
 800cfc8:	f000 fa0c 	bl	800d3e4 <_Bfree>
 800cfcc:	9b07      	ldr	r3, [sp, #28]
 800cfce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfd0:	9d04      	ldr	r5, [sp, #16]
 800cfd2:	ea43 0102 	orr.w	r1, r3, r2
 800cfd6:	9b06      	ldr	r3, [sp, #24]
 800cfd8:	4319      	orrs	r1, r3
 800cfda:	d110      	bne.n	800cffe <_dtoa_r+0xa7e>
 800cfdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cfe0:	d029      	beq.n	800d036 <_dtoa_r+0xab6>
 800cfe2:	9b05      	ldr	r3, [sp, #20]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd02      	ble.n	800cfee <_dtoa_r+0xa6e>
 800cfe8:	9b02      	ldr	r3, [sp, #8]
 800cfea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cfee:	9b01      	ldr	r3, [sp, #4]
 800cff0:	f883 9000 	strb.w	r9, [r3]
 800cff4:	e774      	b.n	800cee0 <_dtoa_r+0x960>
 800cff6:	4638      	mov	r0, r7
 800cff8:	e7ba      	b.n	800cf70 <_dtoa_r+0x9f0>
 800cffa:	2201      	movs	r2, #1
 800cffc:	e7e1      	b.n	800cfc2 <_dtoa_r+0xa42>
 800cffe:	9b05      	ldr	r3, [sp, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	db04      	blt.n	800d00e <_dtoa_r+0xa8e>
 800d004:	9907      	ldr	r1, [sp, #28]
 800d006:	430b      	orrs	r3, r1
 800d008:	9906      	ldr	r1, [sp, #24]
 800d00a:	430b      	orrs	r3, r1
 800d00c:	d120      	bne.n	800d050 <_dtoa_r+0xad0>
 800d00e:	2a00      	cmp	r2, #0
 800d010:	dded      	ble.n	800cfee <_dtoa_r+0xa6e>
 800d012:	4651      	mov	r1, sl
 800d014:	2201      	movs	r2, #1
 800d016:	4620      	mov	r0, r4
 800d018:	f000 fbfe 	bl	800d818 <__lshift>
 800d01c:	4631      	mov	r1, r6
 800d01e:	4682      	mov	sl, r0
 800d020:	f000 fc66 	bl	800d8f0 <__mcmp>
 800d024:	2800      	cmp	r0, #0
 800d026:	dc03      	bgt.n	800d030 <_dtoa_r+0xab0>
 800d028:	d1e1      	bne.n	800cfee <_dtoa_r+0xa6e>
 800d02a:	f019 0f01 	tst.w	r9, #1
 800d02e:	d0de      	beq.n	800cfee <_dtoa_r+0xa6e>
 800d030:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d034:	d1d8      	bne.n	800cfe8 <_dtoa_r+0xa68>
 800d036:	9a01      	ldr	r2, [sp, #4]
 800d038:	2339      	movs	r3, #57	; 0x39
 800d03a:	7013      	strb	r3, [r2, #0]
 800d03c:	462b      	mov	r3, r5
 800d03e:	461d      	mov	r5, r3
 800d040:	3b01      	subs	r3, #1
 800d042:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d046:	2a39      	cmp	r2, #57	; 0x39
 800d048:	d06c      	beq.n	800d124 <_dtoa_r+0xba4>
 800d04a:	3201      	adds	r2, #1
 800d04c:	701a      	strb	r2, [r3, #0]
 800d04e:	e747      	b.n	800cee0 <_dtoa_r+0x960>
 800d050:	2a00      	cmp	r2, #0
 800d052:	dd07      	ble.n	800d064 <_dtoa_r+0xae4>
 800d054:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d058:	d0ed      	beq.n	800d036 <_dtoa_r+0xab6>
 800d05a:	9a01      	ldr	r2, [sp, #4]
 800d05c:	f109 0301 	add.w	r3, r9, #1
 800d060:	7013      	strb	r3, [r2, #0]
 800d062:	e73d      	b.n	800cee0 <_dtoa_r+0x960>
 800d064:	9b04      	ldr	r3, [sp, #16]
 800d066:	9a08      	ldr	r2, [sp, #32]
 800d068:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d043      	beq.n	800d0f8 <_dtoa_r+0xb78>
 800d070:	4651      	mov	r1, sl
 800d072:	2300      	movs	r3, #0
 800d074:	220a      	movs	r2, #10
 800d076:	4620      	mov	r0, r4
 800d078:	f000 f9d6 	bl	800d428 <__multadd>
 800d07c:	45b8      	cmp	r8, r7
 800d07e:	4682      	mov	sl, r0
 800d080:	f04f 0300 	mov.w	r3, #0
 800d084:	f04f 020a 	mov.w	r2, #10
 800d088:	4641      	mov	r1, r8
 800d08a:	4620      	mov	r0, r4
 800d08c:	d107      	bne.n	800d09e <_dtoa_r+0xb1e>
 800d08e:	f000 f9cb 	bl	800d428 <__multadd>
 800d092:	4680      	mov	r8, r0
 800d094:	4607      	mov	r7, r0
 800d096:	9b04      	ldr	r3, [sp, #16]
 800d098:	3301      	adds	r3, #1
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	e775      	b.n	800cf8a <_dtoa_r+0xa0a>
 800d09e:	f000 f9c3 	bl	800d428 <__multadd>
 800d0a2:	4639      	mov	r1, r7
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	220a      	movs	r2, #10
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f000 f9bc 	bl	800d428 <__multadd>
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	e7f0      	b.n	800d096 <_dtoa_r+0xb16>
 800d0b4:	9b04      	ldr	r3, [sp, #16]
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	9d00      	ldr	r5, [sp, #0]
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	4650      	mov	r0, sl
 800d0be:	f7ff f9d5 	bl	800c46c <quorem>
 800d0c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d0c6:	9b00      	ldr	r3, [sp, #0]
 800d0c8:	f805 9b01 	strb.w	r9, [r5], #1
 800d0cc:	1aea      	subs	r2, r5, r3
 800d0ce:	9b01      	ldr	r3, [sp, #4]
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	dd07      	ble.n	800d0e4 <_dtoa_r+0xb64>
 800d0d4:	4651      	mov	r1, sl
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	220a      	movs	r2, #10
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f000 f9a4 	bl	800d428 <__multadd>
 800d0e0:	4682      	mov	sl, r0
 800d0e2:	e7ea      	b.n	800d0ba <_dtoa_r+0xb3a>
 800d0e4:	9b01      	ldr	r3, [sp, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	bfc8      	it	gt
 800d0ea:	461d      	movgt	r5, r3
 800d0ec:	9b00      	ldr	r3, [sp, #0]
 800d0ee:	bfd8      	it	le
 800d0f0:	2501      	movle	r5, #1
 800d0f2:	441d      	add	r5, r3
 800d0f4:	f04f 0800 	mov.w	r8, #0
 800d0f8:	4651      	mov	r1, sl
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	f000 fb8b 	bl	800d818 <__lshift>
 800d102:	4631      	mov	r1, r6
 800d104:	4682      	mov	sl, r0
 800d106:	f000 fbf3 	bl	800d8f0 <__mcmp>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	dc96      	bgt.n	800d03c <_dtoa_r+0xabc>
 800d10e:	d102      	bne.n	800d116 <_dtoa_r+0xb96>
 800d110:	f019 0f01 	tst.w	r9, #1
 800d114:	d192      	bne.n	800d03c <_dtoa_r+0xabc>
 800d116:	462b      	mov	r3, r5
 800d118:	461d      	mov	r5, r3
 800d11a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d11e:	2a30      	cmp	r2, #48	; 0x30
 800d120:	d0fa      	beq.n	800d118 <_dtoa_r+0xb98>
 800d122:	e6dd      	b.n	800cee0 <_dtoa_r+0x960>
 800d124:	9a00      	ldr	r2, [sp, #0]
 800d126:	429a      	cmp	r2, r3
 800d128:	d189      	bne.n	800d03e <_dtoa_r+0xabe>
 800d12a:	f10b 0b01 	add.w	fp, fp, #1
 800d12e:	2331      	movs	r3, #49	; 0x31
 800d130:	e796      	b.n	800d060 <_dtoa_r+0xae0>
 800d132:	4b0a      	ldr	r3, [pc, #40]	; (800d15c <_dtoa_r+0xbdc>)
 800d134:	f7ff ba99 	b.w	800c66a <_dtoa_r+0xea>
 800d138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f47f aa6d 	bne.w	800c61a <_dtoa_r+0x9a>
 800d140:	4b07      	ldr	r3, [pc, #28]	; (800d160 <_dtoa_r+0xbe0>)
 800d142:	f7ff ba92 	b.w	800c66a <_dtoa_r+0xea>
 800d146:	9b01      	ldr	r3, [sp, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	dcb5      	bgt.n	800d0b8 <_dtoa_r+0xb38>
 800d14c:	9b07      	ldr	r3, [sp, #28]
 800d14e:	2b02      	cmp	r3, #2
 800d150:	f73f aeb1 	bgt.w	800ceb6 <_dtoa_r+0x936>
 800d154:	e7b0      	b.n	800d0b8 <_dtoa_r+0xb38>
 800d156:	bf00      	nop
 800d158:	08011f77 	.word	0x08011f77
 800d15c:	08012260 	.word	0x08012260
 800d160:	08011efb 	.word	0x08011efb

0800d164 <_free_r>:
 800d164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d166:	2900      	cmp	r1, #0
 800d168:	d044      	beq.n	800d1f4 <_free_r+0x90>
 800d16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d16e:	9001      	str	r0, [sp, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	f1a1 0404 	sub.w	r4, r1, #4
 800d176:	bfb8      	it	lt
 800d178:	18e4      	addlt	r4, r4, r3
 800d17a:	f000 f8e7 	bl	800d34c <__malloc_lock>
 800d17e:	4a1e      	ldr	r2, [pc, #120]	; (800d1f8 <_free_r+0x94>)
 800d180:	9801      	ldr	r0, [sp, #4]
 800d182:	6813      	ldr	r3, [r2, #0]
 800d184:	b933      	cbnz	r3, 800d194 <_free_r+0x30>
 800d186:	6063      	str	r3, [r4, #4]
 800d188:	6014      	str	r4, [r2, #0]
 800d18a:	b003      	add	sp, #12
 800d18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d190:	f000 b8e2 	b.w	800d358 <__malloc_unlock>
 800d194:	42a3      	cmp	r3, r4
 800d196:	d908      	bls.n	800d1aa <_free_r+0x46>
 800d198:	6825      	ldr	r5, [r4, #0]
 800d19a:	1961      	adds	r1, r4, r5
 800d19c:	428b      	cmp	r3, r1
 800d19e:	bf01      	itttt	eq
 800d1a0:	6819      	ldreq	r1, [r3, #0]
 800d1a2:	685b      	ldreq	r3, [r3, #4]
 800d1a4:	1949      	addeq	r1, r1, r5
 800d1a6:	6021      	streq	r1, [r4, #0]
 800d1a8:	e7ed      	b.n	800d186 <_free_r+0x22>
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	b10b      	cbz	r3, 800d1b4 <_free_r+0x50>
 800d1b0:	42a3      	cmp	r3, r4
 800d1b2:	d9fa      	bls.n	800d1aa <_free_r+0x46>
 800d1b4:	6811      	ldr	r1, [r2, #0]
 800d1b6:	1855      	adds	r5, r2, r1
 800d1b8:	42a5      	cmp	r5, r4
 800d1ba:	d10b      	bne.n	800d1d4 <_free_r+0x70>
 800d1bc:	6824      	ldr	r4, [r4, #0]
 800d1be:	4421      	add	r1, r4
 800d1c0:	1854      	adds	r4, r2, r1
 800d1c2:	42a3      	cmp	r3, r4
 800d1c4:	6011      	str	r1, [r2, #0]
 800d1c6:	d1e0      	bne.n	800d18a <_free_r+0x26>
 800d1c8:	681c      	ldr	r4, [r3, #0]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	6053      	str	r3, [r2, #4]
 800d1ce:	440c      	add	r4, r1
 800d1d0:	6014      	str	r4, [r2, #0]
 800d1d2:	e7da      	b.n	800d18a <_free_r+0x26>
 800d1d4:	d902      	bls.n	800d1dc <_free_r+0x78>
 800d1d6:	230c      	movs	r3, #12
 800d1d8:	6003      	str	r3, [r0, #0]
 800d1da:	e7d6      	b.n	800d18a <_free_r+0x26>
 800d1dc:	6825      	ldr	r5, [r4, #0]
 800d1de:	1961      	adds	r1, r4, r5
 800d1e0:	428b      	cmp	r3, r1
 800d1e2:	bf04      	itt	eq
 800d1e4:	6819      	ldreq	r1, [r3, #0]
 800d1e6:	685b      	ldreq	r3, [r3, #4]
 800d1e8:	6063      	str	r3, [r4, #4]
 800d1ea:	bf04      	itt	eq
 800d1ec:	1949      	addeq	r1, r1, r5
 800d1ee:	6021      	streq	r1, [r4, #0]
 800d1f0:	6054      	str	r4, [r2, #4]
 800d1f2:	e7ca      	b.n	800d18a <_free_r+0x26>
 800d1f4:	b003      	add	sp, #12
 800d1f6:	bd30      	pop	{r4, r5, pc}
 800d1f8:	20001790 	.word	0x20001790

0800d1fc <malloc>:
 800d1fc:	4b02      	ldr	r3, [pc, #8]	; (800d208 <malloc+0xc>)
 800d1fe:	4601      	mov	r1, r0
 800d200:	6818      	ldr	r0, [r3, #0]
 800d202:	f000 b823 	b.w	800d24c <_malloc_r>
 800d206:	bf00      	nop
 800d208:	20000340 	.word	0x20000340

0800d20c <sbrk_aligned>:
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	4e0e      	ldr	r6, [pc, #56]	; (800d248 <sbrk_aligned+0x3c>)
 800d210:	460c      	mov	r4, r1
 800d212:	6831      	ldr	r1, [r6, #0]
 800d214:	4605      	mov	r5, r0
 800d216:	b911      	cbnz	r1, 800d21e <sbrk_aligned+0x12>
 800d218:	f002 fb88 	bl	800f92c <_sbrk_r>
 800d21c:	6030      	str	r0, [r6, #0]
 800d21e:	4621      	mov	r1, r4
 800d220:	4628      	mov	r0, r5
 800d222:	f002 fb83 	bl	800f92c <_sbrk_r>
 800d226:	1c43      	adds	r3, r0, #1
 800d228:	d00a      	beq.n	800d240 <sbrk_aligned+0x34>
 800d22a:	1cc4      	adds	r4, r0, #3
 800d22c:	f024 0403 	bic.w	r4, r4, #3
 800d230:	42a0      	cmp	r0, r4
 800d232:	d007      	beq.n	800d244 <sbrk_aligned+0x38>
 800d234:	1a21      	subs	r1, r4, r0
 800d236:	4628      	mov	r0, r5
 800d238:	f002 fb78 	bl	800f92c <_sbrk_r>
 800d23c:	3001      	adds	r0, #1
 800d23e:	d101      	bne.n	800d244 <sbrk_aligned+0x38>
 800d240:	f04f 34ff 	mov.w	r4, #4294967295
 800d244:	4620      	mov	r0, r4
 800d246:	bd70      	pop	{r4, r5, r6, pc}
 800d248:	20001794 	.word	0x20001794

0800d24c <_malloc_r>:
 800d24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d250:	1ccd      	adds	r5, r1, #3
 800d252:	f025 0503 	bic.w	r5, r5, #3
 800d256:	3508      	adds	r5, #8
 800d258:	2d0c      	cmp	r5, #12
 800d25a:	bf38      	it	cc
 800d25c:	250c      	movcc	r5, #12
 800d25e:	2d00      	cmp	r5, #0
 800d260:	4607      	mov	r7, r0
 800d262:	db01      	blt.n	800d268 <_malloc_r+0x1c>
 800d264:	42a9      	cmp	r1, r5
 800d266:	d905      	bls.n	800d274 <_malloc_r+0x28>
 800d268:	230c      	movs	r3, #12
 800d26a:	603b      	str	r3, [r7, #0]
 800d26c:	2600      	movs	r6, #0
 800d26e:	4630      	mov	r0, r6
 800d270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d348 <_malloc_r+0xfc>
 800d278:	f000 f868 	bl	800d34c <__malloc_lock>
 800d27c:	f8d8 3000 	ldr.w	r3, [r8]
 800d280:	461c      	mov	r4, r3
 800d282:	bb5c      	cbnz	r4, 800d2dc <_malloc_r+0x90>
 800d284:	4629      	mov	r1, r5
 800d286:	4638      	mov	r0, r7
 800d288:	f7ff ffc0 	bl	800d20c <sbrk_aligned>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	4604      	mov	r4, r0
 800d290:	d155      	bne.n	800d33e <_malloc_r+0xf2>
 800d292:	f8d8 4000 	ldr.w	r4, [r8]
 800d296:	4626      	mov	r6, r4
 800d298:	2e00      	cmp	r6, #0
 800d29a:	d145      	bne.n	800d328 <_malloc_r+0xdc>
 800d29c:	2c00      	cmp	r4, #0
 800d29e:	d048      	beq.n	800d332 <_malloc_r+0xe6>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	eb04 0903 	add.w	r9, r4, r3
 800d2aa:	f002 fb3f 	bl	800f92c <_sbrk_r>
 800d2ae:	4581      	cmp	r9, r0
 800d2b0:	d13f      	bne.n	800d332 <_malloc_r+0xe6>
 800d2b2:	6821      	ldr	r1, [r4, #0]
 800d2b4:	1a6d      	subs	r5, r5, r1
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f7ff ffa7 	bl	800d20c <sbrk_aligned>
 800d2be:	3001      	adds	r0, #1
 800d2c0:	d037      	beq.n	800d332 <_malloc_r+0xe6>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	442b      	add	r3, r5
 800d2c6:	6023      	str	r3, [r4, #0]
 800d2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d038      	beq.n	800d342 <_malloc_r+0xf6>
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	42a2      	cmp	r2, r4
 800d2d4:	d12b      	bne.n	800d32e <_malloc_r+0xe2>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	605a      	str	r2, [r3, #4]
 800d2da:	e00f      	b.n	800d2fc <_malloc_r+0xb0>
 800d2dc:	6822      	ldr	r2, [r4, #0]
 800d2de:	1b52      	subs	r2, r2, r5
 800d2e0:	d41f      	bmi.n	800d322 <_malloc_r+0xd6>
 800d2e2:	2a0b      	cmp	r2, #11
 800d2e4:	d917      	bls.n	800d316 <_malloc_r+0xca>
 800d2e6:	1961      	adds	r1, r4, r5
 800d2e8:	42a3      	cmp	r3, r4
 800d2ea:	6025      	str	r5, [r4, #0]
 800d2ec:	bf18      	it	ne
 800d2ee:	6059      	strne	r1, [r3, #4]
 800d2f0:	6863      	ldr	r3, [r4, #4]
 800d2f2:	bf08      	it	eq
 800d2f4:	f8c8 1000 	streq.w	r1, [r8]
 800d2f8:	5162      	str	r2, [r4, r5]
 800d2fa:	604b      	str	r3, [r1, #4]
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f104 060b 	add.w	r6, r4, #11
 800d302:	f000 f829 	bl	800d358 <__malloc_unlock>
 800d306:	f026 0607 	bic.w	r6, r6, #7
 800d30a:	1d23      	adds	r3, r4, #4
 800d30c:	1af2      	subs	r2, r6, r3
 800d30e:	d0ae      	beq.n	800d26e <_malloc_r+0x22>
 800d310:	1b9b      	subs	r3, r3, r6
 800d312:	50a3      	str	r3, [r4, r2]
 800d314:	e7ab      	b.n	800d26e <_malloc_r+0x22>
 800d316:	42a3      	cmp	r3, r4
 800d318:	6862      	ldr	r2, [r4, #4]
 800d31a:	d1dd      	bne.n	800d2d8 <_malloc_r+0x8c>
 800d31c:	f8c8 2000 	str.w	r2, [r8]
 800d320:	e7ec      	b.n	800d2fc <_malloc_r+0xb0>
 800d322:	4623      	mov	r3, r4
 800d324:	6864      	ldr	r4, [r4, #4]
 800d326:	e7ac      	b.n	800d282 <_malloc_r+0x36>
 800d328:	4634      	mov	r4, r6
 800d32a:	6876      	ldr	r6, [r6, #4]
 800d32c:	e7b4      	b.n	800d298 <_malloc_r+0x4c>
 800d32e:	4613      	mov	r3, r2
 800d330:	e7cc      	b.n	800d2cc <_malloc_r+0x80>
 800d332:	230c      	movs	r3, #12
 800d334:	603b      	str	r3, [r7, #0]
 800d336:	4638      	mov	r0, r7
 800d338:	f000 f80e 	bl	800d358 <__malloc_unlock>
 800d33c:	e797      	b.n	800d26e <_malloc_r+0x22>
 800d33e:	6025      	str	r5, [r4, #0]
 800d340:	e7dc      	b.n	800d2fc <_malloc_r+0xb0>
 800d342:	605b      	str	r3, [r3, #4]
 800d344:	deff      	udf	#255	; 0xff
 800d346:	bf00      	nop
 800d348:	20001790 	.word	0x20001790

0800d34c <__malloc_lock>:
 800d34c:	4801      	ldr	r0, [pc, #4]	; (800d354 <__malloc_lock+0x8>)
 800d34e:	f7ff b859 	b.w	800c404 <__retarget_lock_acquire_recursive>
 800d352:	bf00      	nop
 800d354:	2000178c 	.word	0x2000178c

0800d358 <__malloc_unlock>:
 800d358:	4801      	ldr	r0, [pc, #4]	; (800d360 <__malloc_unlock+0x8>)
 800d35a:	f7ff b854 	b.w	800c406 <__retarget_lock_release_recursive>
 800d35e:	bf00      	nop
 800d360:	2000178c 	.word	0x2000178c

0800d364 <_Balloc>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	69c6      	ldr	r6, [r0, #28]
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	b976      	cbnz	r6, 800d38c <_Balloc+0x28>
 800d36e:	2010      	movs	r0, #16
 800d370:	f7ff ff44 	bl	800d1fc <malloc>
 800d374:	4602      	mov	r2, r0
 800d376:	61e0      	str	r0, [r4, #28]
 800d378:	b920      	cbnz	r0, 800d384 <_Balloc+0x20>
 800d37a:	4b18      	ldr	r3, [pc, #96]	; (800d3dc <_Balloc+0x78>)
 800d37c:	4818      	ldr	r0, [pc, #96]	; (800d3e0 <_Balloc+0x7c>)
 800d37e:	216b      	movs	r1, #107	; 0x6b
 800d380:	f7ff f856 	bl	800c430 <__assert_func>
 800d384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d388:	6006      	str	r6, [r0, #0]
 800d38a:	60c6      	str	r6, [r0, #12]
 800d38c:	69e6      	ldr	r6, [r4, #28]
 800d38e:	68f3      	ldr	r3, [r6, #12]
 800d390:	b183      	cbz	r3, 800d3b4 <_Balloc+0x50>
 800d392:	69e3      	ldr	r3, [r4, #28]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d39a:	b9b8      	cbnz	r0, 800d3cc <_Balloc+0x68>
 800d39c:	2101      	movs	r1, #1
 800d39e:	fa01 f605 	lsl.w	r6, r1, r5
 800d3a2:	1d72      	adds	r2, r6, #5
 800d3a4:	0092      	lsls	r2, r2, #2
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f002 fae1 	bl	800f96e <_calloc_r>
 800d3ac:	b160      	cbz	r0, 800d3c8 <_Balloc+0x64>
 800d3ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3b2:	e00e      	b.n	800d3d2 <_Balloc+0x6e>
 800d3b4:	2221      	movs	r2, #33	; 0x21
 800d3b6:	2104      	movs	r1, #4
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f002 fad8 	bl	800f96e <_calloc_r>
 800d3be:	69e3      	ldr	r3, [r4, #28]
 800d3c0:	60f0      	str	r0, [r6, #12]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1e4      	bne.n	800d392 <_Balloc+0x2e>
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	6802      	ldr	r2, [r0, #0]
 800d3ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3d8:	e7f7      	b.n	800d3ca <_Balloc+0x66>
 800d3da:	bf00      	nop
 800d3dc:	08011f08 	.word	0x08011f08
 800d3e0:	08011f88 	.word	0x08011f88

0800d3e4 <_Bfree>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	69c6      	ldr	r6, [r0, #28]
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	b976      	cbnz	r6, 800d40c <_Bfree+0x28>
 800d3ee:	2010      	movs	r0, #16
 800d3f0:	f7ff ff04 	bl	800d1fc <malloc>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	61e8      	str	r0, [r5, #28]
 800d3f8:	b920      	cbnz	r0, 800d404 <_Bfree+0x20>
 800d3fa:	4b09      	ldr	r3, [pc, #36]	; (800d420 <_Bfree+0x3c>)
 800d3fc:	4809      	ldr	r0, [pc, #36]	; (800d424 <_Bfree+0x40>)
 800d3fe:	218f      	movs	r1, #143	; 0x8f
 800d400:	f7ff f816 	bl	800c430 <__assert_func>
 800d404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d408:	6006      	str	r6, [r0, #0]
 800d40a:	60c6      	str	r6, [r0, #12]
 800d40c:	b13c      	cbz	r4, 800d41e <_Bfree+0x3a>
 800d40e:	69eb      	ldr	r3, [r5, #28]
 800d410:	6862      	ldr	r2, [r4, #4]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d418:	6021      	str	r1, [r4, #0]
 800d41a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d41e:	bd70      	pop	{r4, r5, r6, pc}
 800d420:	08011f08 	.word	0x08011f08
 800d424:	08011f88 	.word	0x08011f88

0800d428 <__multadd>:
 800d428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d42c:	690d      	ldr	r5, [r1, #16]
 800d42e:	4607      	mov	r7, r0
 800d430:	460c      	mov	r4, r1
 800d432:	461e      	mov	r6, r3
 800d434:	f101 0c14 	add.w	ip, r1, #20
 800d438:	2000      	movs	r0, #0
 800d43a:	f8dc 3000 	ldr.w	r3, [ip]
 800d43e:	b299      	uxth	r1, r3
 800d440:	fb02 6101 	mla	r1, r2, r1, r6
 800d444:	0c1e      	lsrs	r6, r3, #16
 800d446:	0c0b      	lsrs	r3, r1, #16
 800d448:	fb02 3306 	mla	r3, r2, r6, r3
 800d44c:	b289      	uxth	r1, r1
 800d44e:	3001      	adds	r0, #1
 800d450:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d454:	4285      	cmp	r5, r0
 800d456:	f84c 1b04 	str.w	r1, [ip], #4
 800d45a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d45e:	dcec      	bgt.n	800d43a <__multadd+0x12>
 800d460:	b30e      	cbz	r6, 800d4a6 <__multadd+0x7e>
 800d462:	68a3      	ldr	r3, [r4, #8]
 800d464:	42ab      	cmp	r3, r5
 800d466:	dc19      	bgt.n	800d49c <__multadd+0x74>
 800d468:	6861      	ldr	r1, [r4, #4]
 800d46a:	4638      	mov	r0, r7
 800d46c:	3101      	adds	r1, #1
 800d46e:	f7ff ff79 	bl	800d364 <_Balloc>
 800d472:	4680      	mov	r8, r0
 800d474:	b928      	cbnz	r0, 800d482 <__multadd+0x5a>
 800d476:	4602      	mov	r2, r0
 800d478:	4b0c      	ldr	r3, [pc, #48]	; (800d4ac <__multadd+0x84>)
 800d47a:	480d      	ldr	r0, [pc, #52]	; (800d4b0 <__multadd+0x88>)
 800d47c:	21ba      	movs	r1, #186	; 0xba
 800d47e:	f7fe ffd7 	bl	800c430 <__assert_func>
 800d482:	6922      	ldr	r2, [r4, #16]
 800d484:	3202      	adds	r2, #2
 800d486:	f104 010c 	add.w	r1, r4, #12
 800d48a:	0092      	lsls	r2, r2, #2
 800d48c:	300c      	adds	r0, #12
 800d48e:	f7fe ffbb 	bl	800c408 <memcpy>
 800d492:	4621      	mov	r1, r4
 800d494:	4638      	mov	r0, r7
 800d496:	f7ff ffa5 	bl	800d3e4 <_Bfree>
 800d49a:	4644      	mov	r4, r8
 800d49c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4a0:	3501      	adds	r5, #1
 800d4a2:	615e      	str	r6, [r3, #20]
 800d4a4:	6125      	str	r5, [r4, #16]
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ac:	08011f77 	.word	0x08011f77
 800d4b0:	08011f88 	.word	0x08011f88

0800d4b4 <__s2b>:
 800d4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	4615      	mov	r5, r2
 800d4bc:	461f      	mov	r7, r3
 800d4be:	2209      	movs	r2, #9
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	db09      	blt.n	800d4e4 <__s2b+0x30>
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7ff ff47 	bl	800d364 <_Balloc>
 800d4d6:	b940      	cbnz	r0, 800d4ea <__s2b+0x36>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	4b19      	ldr	r3, [pc, #100]	; (800d540 <__s2b+0x8c>)
 800d4dc:	4819      	ldr	r0, [pc, #100]	; (800d544 <__s2b+0x90>)
 800d4de:	21d3      	movs	r1, #211	; 0xd3
 800d4e0:	f7fe ffa6 	bl	800c430 <__assert_func>
 800d4e4:	0052      	lsls	r2, r2, #1
 800d4e6:	3101      	adds	r1, #1
 800d4e8:	e7f0      	b.n	800d4cc <__s2b+0x18>
 800d4ea:	9b08      	ldr	r3, [sp, #32]
 800d4ec:	6143      	str	r3, [r0, #20]
 800d4ee:	2d09      	cmp	r5, #9
 800d4f0:	f04f 0301 	mov.w	r3, #1
 800d4f4:	6103      	str	r3, [r0, #16]
 800d4f6:	dd16      	ble.n	800d526 <__s2b+0x72>
 800d4f8:	f104 0909 	add.w	r9, r4, #9
 800d4fc:	46c8      	mov	r8, r9
 800d4fe:	442c      	add	r4, r5
 800d500:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d504:	4601      	mov	r1, r0
 800d506:	3b30      	subs	r3, #48	; 0x30
 800d508:	220a      	movs	r2, #10
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7ff ff8c 	bl	800d428 <__multadd>
 800d510:	45a0      	cmp	r8, r4
 800d512:	d1f5      	bne.n	800d500 <__s2b+0x4c>
 800d514:	f1a5 0408 	sub.w	r4, r5, #8
 800d518:	444c      	add	r4, r9
 800d51a:	1b2d      	subs	r5, r5, r4
 800d51c:	1963      	adds	r3, r4, r5
 800d51e:	42bb      	cmp	r3, r7
 800d520:	db04      	blt.n	800d52c <__s2b+0x78>
 800d522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d526:	340a      	adds	r4, #10
 800d528:	2509      	movs	r5, #9
 800d52a:	e7f6      	b.n	800d51a <__s2b+0x66>
 800d52c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d530:	4601      	mov	r1, r0
 800d532:	3b30      	subs	r3, #48	; 0x30
 800d534:	220a      	movs	r2, #10
 800d536:	4630      	mov	r0, r6
 800d538:	f7ff ff76 	bl	800d428 <__multadd>
 800d53c:	e7ee      	b.n	800d51c <__s2b+0x68>
 800d53e:	bf00      	nop
 800d540:	08011f77 	.word	0x08011f77
 800d544:	08011f88 	.word	0x08011f88

0800d548 <__hi0bits>:
 800d548:	0c03      	lsrs	r3, r0, #16
 800d54a:	041b      	lsls	r3, r3, #16
 800d54c:	b9d3      	cbnz	r3, 800d584 <__hi0bits+0x3c>
 800d54e:	0400      	lsls	r0, r0, #16
 800d550:	2310      	movs	r3, #16
 800d552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d556:	bf04      	itt	eq
 800d558:	0200      	lsleq	r0, r0, #8
 800d55a:	3308      	addeq	r3, #8
 800d55c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d560:	bf04      	itt	eq
 800d562:	0100      	lsleq	r0, r0, #4
 800d564:	3304      	addeq	r3, #4
 800d566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d56a:	bf04      	itt	eq
 800d56c:	0080      	lsleq	r0, r0, #2
 800d56e:	3302      	addeq	r3, #2
 800d570:	2800      	cmp	r0, #0
 800d572:	db05      	blt.n	800d580 <__hi0bits+0x38>
 800d574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d578:	f103 0301 	add.w	r3, r3, #1
 800d57c:	bf08      	it	eq
 800d57e:	2320      	moveq	r3, #32
 800d580:	4618      	mov	r0, r3
 800d582:	4770      	bx	lr
 800d584:	2300      	movs	r3, #0
 800d586:	e7e4      	b.n	800d552 <__hi0bits+0xa>

0800d588 <__lo0bits>:
 800d588:	6803      	ldr	r3, [r0, #0]
 800d58a:	f013 0207 	ands.w	r2, r3, #7
 800d58e:	d00c      	beq.n	800d5aa <__lo0bits+0x22>
 800d590:	07d9      	lsls	r1, r3, #31
 800d592:	d422      	bmi.n	800d5da <__lo0bits+0x52>
 800d594:	079a      	lsls	r2, r3, #30
 800d596:	bf49      	itett	mi
 800d598:	085b      	lsrmi	r3, r3, #1
 800d59a:	089b      	lsrpl	r3, r3, #2
 800d59c:	6003      	strmi	r3, [r0, #0]
 800d59e:	2201      	movmi	r2, #1
 800d5a0:	bf5c      	itt	pl
 800d5a2:	6003      	strpl	r3, [r0, #0]
 800d5a4:	2202      	movpl	r2, #2
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	4770      	bx	lr
 800d5aa:	b299      	uxth	r1, r3
 800d5ac:	b909      	cbnz	r1, 800d5b2 <__lo0bits+0x2a>
 800d5ae:	0c1b      	lsrs	r3, r3, #16
 800d5b0:	2210      	movs	r2, #16
 800d5b2:	b2d9      	uxtb	r1, r3
 800d5b4:	b909      	cbnz	r1, 800d5ba <__lo0bits+0x32>
 800d5b6:	3208      	adds	r2, #8
 800d5b8:	0a1b      	lsrs	r3, r3, #8
 800d5ba:	0719      	lsls	r1, r3, #28
 800d5bc:	bf04      	itt	eq
 800d5be:	091b      	lsreq	r3, r3, #4
 800d5c0:	3204      	addeq	r2, #4
 800d5c2:	0799      	lsls	r1, r3, #30
 800d5c4:	bf04      	itt	eq
 800d5c6:	089b      	lsreq	r3, r3, #2
 800d5c8:	3202      	addeq	r2, #2
 800d5ca:	07d9      	lsls	r1, r3, #31
 800d5cc:	d403      	bmi.n	800d5d6 <__lo0bits+0x4e>
 800d5ce:	085b      	lsrs	r3, r3, #1
 800d5d0:	f102 0201 	add.w	r2, r2, #1
 800d5d4:	d003      	beq.n	800d5de <__lo0bits+0x56>
 800d5d6:	6003      	str	r3, [r0, #0]
 800d5d8:	e7e5      	b.n	800d5a6 <__lo0bits+0x1e>
 800d5da:	2200      	movs	r2, #0
 800d5dc:	e7e3      	b.n	800d5a6 <__lo0bits+0x1e>
 800d5de:	2220      	movs	r2, #32
 800d5e0:	e7e1      	b.n	800d5a6 <__lo0bits+0x1e>
	...

0800d5e4 <__i2b>:
 800d5e4:	b510      	push	{r4, lr}
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	f7ff febb 	bl	800d364 <_Balloc>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	b928      	cbnz	r0, 800d5fe <__i2b+0x1a>
 800d5f2:	4b05      	ldr	r3, [pc, #20]	; (800d608 <__i2b+0x24>)
 800d5f4:	4805      	ldr	r0, [pc, #20]	; (800d60c <__i2b+0x28>)
 800d5f6:	f240 1145 	movw	r1, #325	; 0x145
 800d5fa:	f7fe ff19 	bl	800c430 <__assert_func>
 800d5fe:	2301      	movs	r3, #1
 800d600:	6144      	str	r4, [r0, #20]
 800d602:	6103      	str	r3, [r0, #16]
 800d604:	bd10      	pop	{r4, pc}
 800d606:	bf00      	nop
 800d608:	08011f77 	.word	0x08011f77
 800d60c:	08011f88 	.word	0x08011f88

0800d610 <__multiply>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	4691      	mov	r9, r2
 800d616:	690a      	ldr	r2, [r1, #16]
 800d618:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	bfb8      	it	lt
 800d620:	460b      	movlt	r3, r1
 800d622:	460c      	mov	r4, r1
 800d624:	bfbc      	itt	lt
 800d626:	464c      	movlt	r4, r9
 800d628:	4699      	movlt	r9, r3
 800d62a:	6927      	ldr	r7, [r4, #16]
 800d62c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d630:	68a3      	ldr	r3, [r4, #8]
 800d632:	6861      	ldr	r1, [r4, #4]
 800d634:	eb07 060a 	add.w	r6, r7, sl
 800d638:	42b3      	cmp	r3, r6
 800d63a:	b085      	sub	sp, #20
 800d63c:	bfb8      	it	lt
 800d63e:	3101      	addlt	r1, #1
 800d640:	f7ff fe90 	bl	800d364 <_Balloc>
 800d644:	b930      	cbnz	r0, 800d654 <__multiply+0x44>
 800d646:	4602      	mov	r2, r0
 800d648:	4b44      	ldr	r3, [pc, #272]	; (800d75c <__multiply+0x14c>)
 800d64a:	4845      	ldr	r0, [pc, #276]	; (800d760 <__multiply+0x150>)
 800d64c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d650:	f7fe feee 	bl	800c430 <__assert_func>
 800d654:	f100 0514 	add.w	r5, r0, #20
 800d658:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d65c:	462b      	mov	r3, r5
 800d65e:	2200      	movs	r2, #0
 800d660:	4543      	cmp	r3, r8
 800d662:	d321      	bcc.n	800d6a8 <__multiply+0x98>
 800d664:	f104 0314 	add.w	r3, r4, #20
 800d668:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d66c:	f109 0314 	add.w	r3, r9, #20
 800d670:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d674:	9202      	str	r2, [sp, #8]
 800d676:	1b3a      	subs	r2, r7, r4
 800d678:	3a15      	subs	r2, #21
 800d67a:	f022 0203 	bic.w	r2, r2, #3
 800d67e:	3204      	adds	r2, #4
 800d680:	f104 0115 	add.w	r1, r4, #21
 800d684:	428f      	cmp	r7, r1
 800d686:	bf38      	it	cc
 800d688:	2204      	movcc	r2, #4
 800d68a:	9201      	str	r2, [sp, #4]
 800d68c:	9a02      	ldr	r2, [sp, #8]
 800d68e:	9303      	str	r3, [sp, #12]
 800d690:	429a      	cmp	r2, r3
 800d692:	d80c      	bhi.n	800d6ae <__multiply+0x9e>
 800d694:	2e00      	cmp	r6, #0
 800d696:	dd03      	ble.n	800d6a0 <__multiply+0x90>
 800d698:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d05b      	beq.n	800d758 <__multiply+0x148>
 800d6a0:	6106      	str	r6, [r0, #16]
 800d6a2:	b005      	add	sp, #20
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a8:	f843 2b04 	str.w	r2, [r3], #4
 800d6ac:	e7d8      	b.n	800d660 <__multiply+0x50>
 800d6ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6b2:	f1ba 0f00 	cmp.w	sl, #0
 800d6b6:	d024      	beq.n	800d702 <__multiply+0xf2>
 800d6b8:	f104 0e14 	add.w	lr, r4, #20
 800d6bc:	46a9      	mov	r9, r5
 800d6be:	f04f 0c00 	mov.w	ip, #0
 800d6c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6c6:	f8d9 1000 	ldr.w	r1, [r9]
 800d6ca:	fa1f fb82 	uxth.w	fp, r2
 800d6ce:	b289      	uxth	r1, r1
 800d6d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d6dc:	4461      	add	r1, ip
 800d6de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d6e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6ea:	b289      	uxth	r1, r1
 800d6ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6f0:	4577      	cmp	r7, lr
 800d6f2:	f849 1b04 	str.w	r1, [r9], #4
 800d6f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6fa:	d8e2      	bhi.n	800d6c2 <__multiply+0xb2>
 800d6fc:	9a01      	ldr	r2, [sp, #4]
 800d6fe:	f845 c002 	str.w	ip, [r5, r2]
 800d702:	9a03      	ldr	r2, [sp, #12]
 800d704:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d708:	3304      	adds	r3, #4
 800d70a:	f1b9 0f00 	cmp.w	r9, #0
 800d70e:	d021      	beq.n	800d754 <__multiply+0x144>
 800d710:	6829      	ldr	r1, [r5, #0]
 800d712:	f104 0c14 	add.w	ip, r4, #20
 800d716:	46ae      	mov	lr, r5
 800d718:	f04f 0a00 	mov.w	sl, #0
 800d71c:	f8bc b000 	ldrh.w	fp, [ip]
 800d720:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d724:	fb09 220b 	mla	r2, r9, fp, r2
 800d728:	4452      	add	r2, sl
 800d72a:	b289      	uxth	r1, r1
 800d72c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d730:	f84e 1b04 	str.w	r1, [lr], #4
 800d734:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d738:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d73c:	f8be 1000 	ldrh.w	r1, [lr]
 800d740:	fb09 110a 	mla	r1, r9, sl, r1
 800d744:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d748:	4567      	cmp	r7, ip
 800d74a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d74e:	d8e5      	bhi.n	800d71c <__multiply+0x10c>
 800d750:	9a01      	ldr	r2, [sp, #4]
 800d752:	50a9      	str	r1, [r5, r2]
 800d754:	3504      	adds	r5, #4
 800d756:	e799      	b.n	800d68c <__multiply+0x7c>
 800d758:	3e01      	subs	r6, #1
 800d75a:	e79b      	b.n	800d694 <__multiply+0x84>
 800d75c:	08011f77 	.word	0x08011f77
 800d760:	08011f88 	.word	0x08011f88

0800d764 <__pow5mult>:
 800d764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d768:	4615      	mov	r5, r2
 800d76a:	f012 0203 	ands.w	r2, r2, #3
 800d76e:	4606      	mov	r6, r0
 800d770:	460f      	mov	r7, r1
 800d772:	d007      	beq.n	800d784 <__pow5mult+0x20>
 800d774:	4c25      	ldr	r4, [pc, #148]	; (800d80c <__pow5mult+0xa8>)
 800d776:	3a01      	subs	r2, #1
 800d778:	2300      	movs	r3, #0
 800d77a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d77e:	f7ff fe53 	bl	800d428 <__multadd>
 800d782:	4607      	mov	r7, r0
 800d784:	10ad      	asrs	r5, r5, #2
 800d786:	d03d      	beq.n	800d804 <__pow5mult+0xa0>
 800d788:	69f4      	ldr	r4, [r6, #28]
 800d78a:	b97c      	cbnz	r4, 800d7ac <__pow5mult+0x48>
 800d78c:	2010      	movs	r0, #16
 800d78e:	f7ff fd35 	bl	800d1fc <malloc>
 800d792:	4602      	mov	r2, r0
 800d794:	61f0      	str	r0, [r6, #28]
 800d796:	b928      	cbnz	r0, 800d7a4 <__pow5mult+0x40>
 800d798:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <__pow5mult+0xac>)
 800d79a:	481e      	ldr	r0, [pc, #120]	; (800d814 <__pow5mult+0xb0>)
 800d79c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d7a0:	f7fe fe46 	bl	800c430 <__assert_func>
 800d7a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7a8:	6004      	str	r4, [r0, #0]
 800d7aa:	60c4      	str	r4, [r0, #12]
 800d7ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d7b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7b4:	b94c      	cbnz	r4, 800d7ca <__pow5mult+0x66>
 800d7b6:	f240 2171 	movw	r1, #625	; 0x271
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ff12 	bl	800d5e4 <__i2b>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	6003      	str	r3, [r0, #0]
 800d7ca:	f04f 0900 	mov.w	r9, #0
 800d7ce:	07eb      	lsls	r3, r5, #31
 800d7d0:	d50a      	bpl.n	800d7e8 <__pow5mult+0x84>
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7ff ff1a 	bl	800d610 <__multiply>
 800d7dc:	4639      	mov	r1, r7
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f7ff fdff 	bl	800d3e4 <_Bfree>
 800d7e6:	4647      	mov	r7, r8
 800d7e8:	106d      	asrs	r5, r5, #1
 800d7ea:	d00b      	beq.n	800d804 <__pow5mult+0xa0>
 800d7ec:	6820      	ldr	r0, [r4, #0]
 800d7ee:	b938      	cbnz	r0, 800d800 <__pow5mult+0x9c>
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	f7ff ff0b 	bl	800d610 <__multiply>
 800d7fa:	6020      	str	r0, [r4, #0]
 800d7fc:	f8c0 9000 	str.w	r9, [r0]
 800d800:	4604      	mov	r4, r0
 800d802:	e7e4      	b.n	800d7ce <__pow5mult+0x6a>
 800d804:	4638      	mov	r0, r7
 800d806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d80a:	bf00      	nop
 800d80c:	080120d8 	.word	0x080120d8
 800d810:	08011f08 	.word	0x08011f08
 800d814:	08011f88 	.word	0x08011f88

0800d818 <__lshift>:
 800d818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d81c:	460c      	mov	r4, r1
 800d81e:	6849      	ldr	r1, [r1, #4]
 800d820:	6923      	ldr	r3, [r4, #16]
 800d822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d826:	68a3      	ldr	r3, [r4, #8]
 800d828:	4607      	mov	r7, r0
 800d82a:	4691      	mov	r9, r2
 800d82c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d830:	f108 0601 	add.w	r6, r8, #1
 800d834:	42b3      	cmp	r3, r6
 800d836:	db0b      	blt.n	800d850 <__lshift+0x38>
 800d838:	4638      	mov	r0, r7
 800d83a:	f7ff fd93 	bl	800d364 <_Balloc>
 800d83e:	4605      	mov	r5, r0
 800d840:	b948      	cbnz	r0, 800d856 <__lshift+0x3e>
 800d842:	4602      	mov	r2, r0
 800d844:	4b28      	ldr	r3, [pc, #160]	; (800d8e8 <__lshift+0xd0>)
 800d846:	4829      	ldr	r0, [pc, #164]	; (800d8ec <__lshift+0xd4>)
 800d848:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d84c:	f7fe fdf0 	bl	800c430 <__assert_func>
 800d850:	3101      	adds	r1, #1
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	e7ee      	b.n	800d834 <__lshift+0x1c>
 800d856:	2300      	movs	r3, #0
 800d858:	f100 0114 	add.w	r1, r0, #20
 800d85c:	f100 0210 	add.w	r2, r0, #16
 800d860:	4618      	mov	r0, r3
 800d862:	4553      	cmp	r3, sl
 800d864:	db33      	blt.n	800d8ce <__lshift+0xb6>
 800d866:	6920      	ldr	r0, [r4, #16]
 800d868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d86c:	f104 0314 	add.w	r3, r4, #20
 800d870:	f019 091f 	ands.w	r9, r9, #31
 800d874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d87c:	d02b      	beq.n	800d8d6 <__lshift+0xbe>
 800d87e:	f1c9 0e20 	rsb	lr, r9, #32
 800d882:	468a      	mov	sl, r1
 800d884:	2200      	movs	r2, #0
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	fa00 f009 	lsl.w	r0, r0, r9
 800d88c:	4310      	orrs	r0, r2
 800d88e:	f84a 0b04 	str.w	r0, [sl], #4
 800d892:	f853 2b04 	ldr.w	r2, [r3], #4
 800d896:	459c      	cmp	ip, r3
 800d898:	fa22 f20e 	lsr.w	r2, r2, lr
 800d89c:	d8f3      	bhi.n	800d886 <__lshift+0x6e>
 800d89e:	ebac 0304 	sub.w	r3, ip, r4
 800d8a2:	3b15      	subs	r3, #21
 800d8a4:	f023 0303 	bic.w	r3, r3, #3
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	f104 0015 	add.w	r0, r4, #21
 800d8ae:	4584      	cmp	ip, r0
 800d8b0:	bf38      	it	cc
 800d8b2:	2304      	movcc	r3, #4
 800d8b4:	50ca      	str	r2, [r1, r3]
 800d8b6:	b10a      	cbz	r2, 800d8bc <__lshift+0xa4>
 800d8b8:	f108 0602 	add.w	r6, r8, #2
 800d8bc:	3e01      	subs	r6, #1
 800d8be:	4638      	mov	r0, r7
 800d8c0:	612e      	str	r6, [r5, #16]
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	f7ff fd8e 	bl	800d3e4 <_Bfree>
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	e7c5      	b.n	800d862 <__lshift+0x4a>
 800d8d6:	3904      	subs	r1, #4
 800d8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8e0:	459c      	cmp	ip, r3
 800d8e2:	d8f9      	bhi.n	800d8d8 <__lshift+0xc0>
 800d8e4:	e7ea      	b.n	800d8bc <__lshift+0xa4>
 800d8e6:	bf00      	nop
 800d8e8:	08011f77 	.word	0x08011f77
 800d8ec:	08011f88 	.word	0x08011f88

0800d8f0 <__mcmp>:
 800d8f0:	b530      	push	{r4, r5, lr}
 800d8f2:	6902      	ldr	r2, [r0, #16]
 800d8f4:	690c      	ldr	r4, [r1, #16]
 800d8f6:	1b12      	subs	r2, r2, r4
 800d8f8:	d10e      	bne.n	800d918 <__mcmp+0x28>
 800d8fa:	f100 0314 	add.w	r3, r0, #20
 800d8fe:	3114      	adds	r1, #20
 800d900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d90c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d910:	42a5      	cmp	r5, r4
 800d912:	d003      	beq.n	800d91c <__mcmp+0x2c>
 800d914:	d305      	bcc.n	800d922 <__mcmp+0x32>
 800d916:	2201      	movs	r2, #1
 800d918:	4610      	mov	r0, r2
 800d91a:	bd30      	pop	{r4, r5, pc}
 800d91c:	4283      	cmp	r3, r0
 800d91e:	d3f3      	bcc.n	800d908 <__mcmp+0x18>
 800d920:	e7fa      	b.n	800d918 <__mcmp+0x28>
 800d922:	f04f 32ff 	mov.w	r2, #4294967295
 800d926:	e7f7      	b.n	800d918 <__mcmp+0x28>

0800d928 <__mdiff>:
 800d928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	460c      	mov	r4, r1
 800d92e:	4606      	mov	r6, r0
 800d930:	4611      	mov	r1, r2
 800d932:	4620      	mov	r0, r4
 800d934:	4690      	mov	r8, r2
 800d936:	f7ff ffdb 	bl	800d8f0 <__mcmp>
 800d93a:	1e05      	subs	r5, r0, #0
 800d93c:	d110      	bne.n	800d960 <__mdiff+0x38>
 800d93e:	4629      	mov	r1, r5
 800d940:	4630      	mov	r0, r6
 800d942:	f7ff fd0f 	bl	800d364 <_Balloc>
 800d946:	b930      	cbnz	r0, 800d956 <__mdiff+0x2e>
 800d948:	4b3a      	ldr	r3, [pc, #232]	; (800da34 <__mdiff+0x10c>)
 800d94a:	4602      	mov	r2, r0
 800d94c:	f240 2137 	movw	r1, #567	; 0x237
 800d950:	4839      	ldr	r0, [pc, #228]	; (800da38 <__mdiff+0x110>)
 800d952:	f7fe fd6d 	bl	800c430 <__assert_func>
 800d956:	2301      	movs	r3, #1
 800d958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d95c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d960:	bfa4      	itt	ge
 800d962:	4643      	movge	r3, r8
 800d964:	46a0      	movge	r8, r4
 800d966:	4630      	mov	r0, r6
 800d968:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d96c:	bfa6      	itte	ge
 800d96e:	461c      	movge	r4, r3
 800d970:	2500      	movge	r5, #0
 800d972:	2501      	movlt	r5, #1
 800d974:	f7ff fcf6 	bl	800d364 <_Balloc>
 800d978:	b920      	cbnz	r0, 800d984 <__mdiff+0x5c>
 800d97a:	4b2e      	ldr	r3, [pc, #184]	; (800da34 <__mdiff+0x10c>)
 800d97c:	4602      	mov	r2, r0
 800d97e:	f240 2145 	movw	r1, #581	; 0x245
 800d982:	e7e5      	b.n	800d950 <__mdiff+0x28>
 800d984:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d988:	6926      	ldr	r6, [r4, #16]
 800d98a:	60c5      	str	r5, [r0, #12]
 800d98c:	f104 0914 	add.w	r9, r4, #20
 800d990:	f108 0514 	add.w	r5, r8, #20
 800d994:	f100 0e14 	add.w	lr, r0, #20
 800d998:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d99c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9a0:	f108 0210 	add.w	r2, r8, #16
 800d9a4:	46f2      	mov	sl, lr
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9b0:	fa11 f88b 	uxtah	r8, r1, fp
 800d9b4:	b299      	uxth	r1, r3
 800d9b6:	0c1b      	lsrs	r3, r3, #16
 800d9b8:	eba8 0801 	sub.w	r8, r8, r1
 800d9bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9c4:	fa1f f888 	uxth.w	r8, r8
 800d9c8:	1419      	asrs	r1, r3, #16
 800d9ca:	454e      	cmp	r6, r9
 800d9cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9d0:	f84a 3b04 	str.w	r3, [sl], #4
 800d9d4:	d8e8      	bhi.n	800d9a8 <__mdiff+0x80>
 800d9d6:	1b33      	subs	r3, r6, r4
 800d9d8:	3b15      	subs	r3, #21
 800d9da:	f023 0303 	bic.w	r3, r3, #3
 800d9de:	3304      	adds	r3, #4
 800d9e0:	3415      	adds	r4, #21
 800d9e2:	42a6      	cmp	r6, r4
 800d9e4:	bf38      	it	cc
 800d9e6:	2304      	movcc	r3, #4
 800d9e8:	441d      	add	r5, r3
 800d9ea:	4473      	add	r3, lr
 800d9ec:	469e      	mov	lr, r3
 800d9ee:	462e      	mov	r6, r5
 800d9f0:	4566      	cmp	r6, ip
 800d9f2:	d30e      	bcc.n	800da12 <__mdiff+0xea>
 800d9f4:	f10c 0203 	add.w	r2, ip, #3
 800d9f8:	1b52      	subs	r2, r2, r5
 800d9fa:	f022 0203 	bic.w	r2, r2, #3
 800d9fe:	3d03      	subs	r5, #3
 800da00:	45ac      	cmp	ip, r5
 800da02:	bf38      	it	cc
 800da04:	2200      	movcc	r2, #0
 800da06:	4413      	add	r3, r2
 800da08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da0c:	b17a      	cbz	r2, 800da2e <__mdiff+0x106>
 800da0e:	6107      	str	r7, [r0, #16]
 800da10:	e7a4      	b.n	800d95c <__mdiff+0x34>
 800da12:	f856 8b04 	ldr.w	r8, [r6], #4
 800da16:	fa11 f288 	uxtah	r2, r1, r8
 800da1a:	1414      	asrs	r4, r2, #16
 800da1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da20:	b292      	uxth	r2, r2
 800da22:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da26:	f84e 2b04 	str.w	r2, [lr], #4
 800da2a:	1421      	asrs	r1, r4, #16
 800da2c:	e7e0      	b.n	800d9f0 <__mdiff+0xc8>
 800da2e:	3f01      	subs	r7, #1
 800da30:	e7ea      	b.n	800da08 <__mdiff+0xe0>
 800da32:	bf00      	nop
 800da34:	08011f77 	.word	0x08011f77
 800da38:	08011f88 	.word	0x08011f88

0800da3c <__ulp>:
 800da3c:	b082      	sub	sp, #8
 800da3e:	ed8d 0b00 	vstr	d0, [sp]
 800da42:	9a01      	ldr	r2, [sp, #4]
 800da44:	4b0f      	ldr	r3, [pc, #60]	; (800da84 <__ulp+0x48>)
 800da46:	4013      	ands	r3, r2
 800da48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dc08      	bgt.n	800da62 <__ulp+0x26>
 800da50:	425b      	negs	r3, r3
 800da52:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800da56:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da5a:	da04      	bge.n	800da66 <__ulp+0x2a>
 800da5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da60:	4113      	asrs	r3, r2
 800da62:	2200      	movs	r2, #0
 800da64:	e008      	b.n	800da78 <__ulp+0x3c>
 800da66:	f1a2 0314 	sub.w	r3, r2, #20
 800da6a:	2b1e      	cmp	r3, #30
 800da6c:	bfda      	itte	le
 800da6e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800da72:	40da      	lsrle	r2, r3
 800da74:	2201      	movgt	r2, #1
 800da76:	2300      	movs	r3, #0
 800da78:	4619      	mov	r1, r3
 800da7a:	4610      	mov	r0, r2
 800da7c:	ec41 0b10 	vmov	d0, r0, r1
 800da80:	b002      	add	sp, #8
 800da82:	4770      	bx	lr
 800da84:	7ff00000 	.word	0x7ff00000

0800da88 <__b2d>:
 800da88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da8c:	6906      	ldr	r6, [r0, #16]
 800da8e:	f100 0814 	add.w	r8, r0, #20
 800da92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800da96:	1f37      	subs	r7, r6, #4
 800da98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800da9c:	4610      	mov	r0, r2
 800da9e:	f7ff fd53 	bl	800d548 <__hi0bits>
 800daa2:	f1c0 0320 	rsb	r3, r0, #32
 800daa6:	280a      	cmp	r0, #10
 800daa8:	600b      	str	r3, [r1, #0]
 800daaa:	491b      	ldr	r1, [pc, #108]	; (800db18 <__b2d+0x90>)
 800daac:	dc15      	bgt.n	800dada <__b2d+0x52>
 800daae:	f1c0 0c0b 	rsb	ip, r0, #11
 800dab2:	fa22 f30c 	lsr.w	r3, r2, ip
 800dab6:	45b8      	cmp	r8, r7
 800dab8:	ea43 0501 	orr.w	r5, r3, r1
 800dabc:	bf34      	ite	cc
 800dabe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dac2:	2300      	movcs	r3, #0
 800dac4:	3015      	adds	r0, #21
 800dac6:	fa02 f000 	lsl.w	r0, r2, r0
 800daca:	fa23 f30c 	lsr.w	r3, r3, ip
 800dace:	4303      	orrs	r3, r0
 800dad0:	461c      	mov	r4, r3
 800dad2:	ec45 4b10 	vmov	d0, r4, r5
 800dad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dada:	45b8      	cmp	r8, r7
 800dadc:	bf3a      	itte	cc
 800dade:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dae2:	f1a6 0708 	subcc.w	r7, r6, #8
 800dae6:	2300      	movcs	r3, #0
 800dae8:	380b      	subs	r0, #11
 800daea:	d012      	beq.n	800db12 <__b2d+0x8a>
 800daec:	f1c0 0120 	rsb	r1, r0, #32
 800daf0:	fa23 f401 	lsr.w	r4, r3, r1
 800daf4:	4082      	lsls	r2, r0
 800daf6:	4322      	orrs	r2, r4
 800daf8:	4547      	cmp	r7, r8
 800dafa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800dafe:	bf8c      	ite	hi
 800db00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800db04:	2200      	movls	r2, #0
 800db06:	4083      	lsls	r3, r0
 800db08:	40ca      	lsrs	r2, r1
 800db0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800db0e:	4313      	orrs	r3, r2
 800db10:	e7de      	b.n	800dad0 <__b2d+0x48>
 800db12:	ea42 0501 	orr.w	r5, r2, r1
 800db16:	e7db      	b.n	800dad0 <__b2d+0x48>
 800db18:	3ff00000 	.word	0x3ff00000

0800db1c <__d2b>:
 800db1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db20:	460f      	mov	r7, r1
 800db22:	2101      	movs	r1, #1
 800db24:	ec59 8b10 	vmov	r8, r9, d0
 800db28:	4616      	mov	r6, r2
 800db2a:	f7ff fc1b 	bl	800d364 <_Balloc>
 800db2e:	4604      	mov	r4, r0
 800db30:	b930      	cbnz	r0, 800db40 <__d2b+0x24>
 800db32:	4602      	mov	r2, r0
 800db34:	4b24      	ldr	r3, [pc, #144]	; (800dbc8 <__d2b+0xac>)
 800db36:	4825      	ldr	r0, [pc, #148]	; (800dbcc <__d2b+0xb0>)
 800db38:	f240 310f 	movw	r1, #783	; 0x30f
 800db3c:	f7fe fc78 	bl	800c430 <__assert_func>
 800db40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db48:	bb2d      	cbnz	r5, 800db96 <__d2b+0x7a>
 800db4a:	9301      	str	r3, [sp, #4]
 800db4c:	f1b8 0300 	subs.w	r3, r8, #0
 800db50:	d026      	beq.n	800dba0 <__d2b+0x84>
 800db52:	4668      	mov	r0, sp
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	f7ff fd17 	bl	800d588 <__lo0bits>
 800db5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db5e:	b1e8      	cbz	r0, 800db9c <__d2b+0x80>
 800db60:	f1c0 0320 	rsb	r3, r0, #32
 800db64:	fa02 f303 	lsl.w	r3, r2, r3
 800db68:	430b      	orrs	r3, r1
 800db6a:	40c2      	lsrs	r2, r0
 800db6c:	6163      	str	r3, [r4, #20]
 800db6e:	9201      	str	r2, [sp, #4]
 800db70:	9b01      	ldr	r3, [sp, #4]
 800db72:	61a3      	str	r3, [r4, #24]
 800db74:	2b00      	cmp	r3, #0
 800db76:	bf14      	ite	ne
 800db78:	2202      	movne	r2, #2
 800db7a:	2201      	moveq	r2, #1
 800db7c:	6122      	str	r2, [r4, #16]
 800db7e:	b1bd      	cbz	r5, 800dbb0 <__d2b+0x94>
 800db80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db84:	4405      	add	r5, r0
 800db86:	603d      	str	r5, [r7, #0]
 800db88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db8c:	6030      	str	r0, [r6, #0]
 800db8e:	4620      	mov	r0, r4
 800db90:	b003      	add	sp, #12
 800db92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db9a:	e7d6      	b.n	800db4a <__d2b+0x2e>
 800db9c:	6161      	str	r1, [r4, #20]
 800db9e:	e7e7      	b.n	800db70 <__d2b+0x54>
 800dba0:	a801      	add	r0, sp, #4
 800dba2:	f7ff fcf1 	bl	800d588 <__lo0bits>
 800dba6:	9b01      	ldr	r3, [sp, #4]
 800dba8:	6163      	str	r3, [r4, #20]
 800dbaa:	3020      	adds	r0, #32
 800dbac:	2201      	movs	r2, #1
 800dbae:	e7e5      	b.n	800db7c <__d2b+0x60>
 800dbb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbb8:	6038      	str	r0, [r7, #0]
 800dbba:	6918      	ldr	r0, [r3, #16]
 800dbbc:	f7ff fcc4 	bl	800d548 <__hi0bits>
 800dbc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbc4:	e7e2      	b.n	800db8c <__d2b+0x70>
 800dbc6:	bf00      	nop
 800dbc8:	08011f77 	.word	0x08011f77
 800dbcc:	08011f88 	.word	0x08011f88

0800dbd0 <__ratio>:
 800dbd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd4:	4688      	mov	r8, r1
 800dbd6:	4669      	mov	r1, sp
 800dbd8:	4681      	mov	r9, r0
 800dbda:	f7ff ff55 	bl	800da88 <__b2d>
 800dbde:	a901      	add	r1, sp, #4
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	ec55 4b10 	vmov	r4, r5, d0
 800dbe6:	f7ff ff4f 	bl	800da88 <__b2d>
 800dbea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dbf2:	eba3 0c02 	sub.w	ip, r3, r2
 800dbf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbfa:	1a9b      	subs	r3, r3, r2
 800dbfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dc00:	ec51 0b10 	vmov	r0, r1, d0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	bfd6      	itet	le
 800dc08:	460a      	movle	r2, r1
 800dc0a:	462a      	movgt	r2, r5
 800dc0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc10:	468b      	mov	fp, r1
 800dc12:	462f      	mov	r7, r5
 800dc14:	bfd4      	ite	le
 800dc16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dc1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc1e:	4620      	mov	r0, r4
 800dc20:	ee10 2a10 	vmov	r2, s0
 800dc24:	465b      	mov	r3, fp
 800dc26:	4639      	mov	r1, r7
 800dc28:	f7f2 fe10 	bl	800084c <__aeabi_ddiv>
 800dc2c:	ec41 0b10 	vmov	d0, r0, r1
 800dc30:	b003      	add	sp, #12
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc36 <__copybits>:
 800dc36:	3901      	subs	r1, #1
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	1149      	asrs	r1, r1, #5
 800dc3c:	6914      	ldr	r4, [r2, #16]
 800dc3e:	3101      	adds	r1, #1
 800dc40:	f102 0314 	add.w	r3, r2, #20
 800dc44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc4c:	1f05      	subs	r5, r0, #4
 800dc4e:	42a3      	cmp	r3, r4
 800dc50:	d30c      	bcc.n	800dc6c <__copybits+0x36>
 800dc52:	1aa3      	subs	r3, r4, r2
 800dc54:	3b11      	subs	r3, #17
 800dc56:	f023 0303 	bic.w	r3, r3, #3
 800dc5a:	3211      	adds	r2, #17
 800dc5c:	42a2      	cmp	r2, r4
 800dc5e:	bf88      	it	hi
 800dc60:	2300      	movhi	r3, #0
 800dc62:	4418      	add	r0, r3
 800dc64:	2300      	movs	r3, #0
 800dc66:	4288      	cmp	r0, r1
 800dc68:	d305      	bcc.n	800dc76 <__copybits+0x40>
 800dc6a:	bd70      	pop	{r4, r5, r6, pc}
 800dc6c:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc70:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc74:	e7eb      	b.n	800dc4e <__copybits+0x18>
 800dc76:	f840 3b04 	str.w	r3, [r0], #4
 800dc7a:	e7f4      	b.n	800dc66 <__copybits+0x30>

0800dc7c <__any_on>:
 800dc7c:	f100 0214 	add.w	r2, r0, #20
 800dc80:	6900      	ldr	r0, [r0, #16]
 800dc82:	114b      	asrs	r3, r1, #5
 800dc84:	4298      	cmp	r0, r3
 800dc86:	b510      	push	{r4, lr}
 800dc88:	db11      	blt.n	800dcae <__any_on+0x32>
 800dc8a:	dd0a      	ble.n	800dca2 <__any_on+0x26>
 800dc8c:	f011 011f 	ands.w	r1, r1, #31
 800dc90:	d007      	beq.n	800dca2 <__any_on+0x26>
 800dc92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc96:	fa24 f001 	lsr.w	r0, r4, r1
 800dc9a:	fa00 f101 	lsl.w	r1, r0, r1
 800dc9e:	428c      	cmp	r4, r1
 800dca0:	d10b      	bne.n	800dcba <__any_on+0x3e>
 800dca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d803      	bhi.n	800dcb2 <__any_on+0x36>
 800dcaa:	2000      	movs	r0, #0
 800dcac:	bd10      	pop	{r4, pc}
 800dcae:	4603      	mov	r3, r0
 800dcb0:	e7f7      	b.n	800dca2 <__any_on+0x26>
 800dcb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcb6:	2900      	cmp	r1, #0
 800dcb8:	d0f5      	beq.n	800dca6 <__any_on+0x2a>
 800dcba:	2001      	movs	r0, #1
 800dcbc:	e7f6      	b.n	800dcac <__any_on+0x30>

0800dcbe <sulp>:
 800dcbe:	b570      	push	{r4, r5, r6, lr}
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	460d      	mov	r5, r1
 800dcc4:	ec45 4b10 	vmov	d0, r4, r5
 800dcc8:	4616      	mov	r6, r2
 800dcca:	f7ff feb7 	bl	800da3c <__ulp>
 800dcce:	ec51 0b10 	vmov	r0, r1, d0
 800dcd2:	b17e      	cbz	r6, 800dcf4 <sulp+0x36>
 800dcd4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dcd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	dd09      	ble.n	800dcf4 <sulp+0x36>
 800dce0:	051b      	lsls	r3, r3, #20
 800dce2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dce6:	2400      	movs	r4, #0
 800dce8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dcec:	4622      	mov	r2, r4
 800dcee:	462b      	mov	r3, r5
 800dcf0:	f7f2 fc82 	bl	80005f8 <__aeabi_dmul>
 800dcf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dcf8 <_strtod_l>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	ed2d 8b02 	vpush	{d8}
 800dd00:	b09b      	sub	sp, #108	; 0x6c
 800dd02:	4604      	mov	r4, r0
 800dd04:	9213      	str	r2, [sp, #76]	; 0x4c
 800dd06:	2200      	movs	r2, #0
 800dd08:	9216      	str	r2, [sp, #88]	; 0x58
 800dd0a:	460d      	mov	r5, r1
 800dd0c:	f04f 0800 	mov.w	r8, #0
 800dd10:	f04f 0900 	mov.w	r9, #0
 800dd14:	460a      	mov	r2, r1
 800dd16:	9215      	str	r2, [sp, #84]	; 0x54
 800dd18:	7811      	ldrb	r1, [r2, #0]
 800dd1a:	292b      	cmp	r1, #43	; 0x2b
 800dd1c:	d04c      	beq.n	800ddb8 <_strtod_l+0xc0>
 800dd1e:	d83a      	bhi.n	800dd96 <_strtod_l+0x9e>
 800dd20:	290d      	cmp	r1, #13
 800dd22:	d834      	bhi.n	800dd8e <_strtod_l+0x96>
 800dd24:	2908      	cmp	r1, #8
 800dd26:	d834      	bhi.n	800dd92 <_strtod_l+0x9a>
 800dd28:	2900      	cmp	r1, #0
 800dd2a:	d03d      	beq.n	800dda8 <_strtod_l+0xb0>
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	920a      	str	r2, [sp, #40]	; 0x28
 800dd30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800dd32:	7832      	ldrb	r2, [r6, #0]
 800dd34:	2a30      	cmp	r2, #48	; 0x30
 800dd36:	f040 80b4 	bne.w	800dea2 <_strtod_l+0x1aa>
 800dd3a:	7872      	ldrb	r2, [r6, #1]
 800dd3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800dd40:	2a58      	cmp	r2, #88	; 0x58
 800dd42:	d170      	bne.n	800de26 <_strtod_l+0x12e>
 800dd44:	9302      	str	r3, [sp, #8]
 800dd46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd48:	9301      	str	r3, [sp, #4]
 800dd4a:	ab16      	add	r3, sp, #88	; 0x58
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	4a8e      	ldr	r2, [pc, #568]	; (800df88 <_strtod_l+0x290>)
 800dd50:	ab17      	add	r3, sp, #92	; 0x5c
 800dd52:	a915      	add	r1, sp, #84	; 0x54
 800dd54:	4620      	mov	r0, r4
 800dd56:	f001 fe87 	bl	800fa68 <__gethex>
 800dd5a:	f010 070f 	ands.w	r7, r0, #15
 800dd5e:	4605      	mov	r5, r0
 800dd60:	d005      	beq.n	800dd6e <_strtod_l+0x76>
 800dd62:	2f06      	cmp	r7, #6
 800dd64:	d12a      	bne.n	800ddbc <_strtod_l+0xc4>
 800dd66:	3601      	adds	r6, #1
 800dd68:	2300      	movs	r3, #0
 800dd6a:	9615      	str	r6, [sp, #84]	; 0x54
 800dd6c:	930a      	str	r3, [sp, #40]	; 0x28
 800dd6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f040 857f 	bne.w	800e874 <_strtod_l+0xb7c>
 800dd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd78:	b1db      	cbz	r3, 800ddb2 <_strtod_l+0xba>
 800dd7a:	4642      	mov	r2, r8
 800dd7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd80:	ec43 2b10 	vmov	d0, r2, r3
 800dd84:	b01b      	add	sp, #108	; 0x6c
 800dd86:	ecbd 8b02 	vpop	{d8}
 800dd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd8e:	2920      	cmp	r1, #32
 800dd90:	d1cc      	bne.n	800dd2c <_strtod_l+0x34>
 800dd92:	3201      	adds	r2, #1
 800dd94:	e7bf      	b.n	800dd16 <_strtod_l+0x1e>
 800dd96:	292d      	cmp	r1, #45	; 0x2d
 800dd98:	d1c8      	bne.n	800dd2c <_strtod_l+0x34>
 800dd9a:	2101      	movs	r1, #1
 800dd9c:	910a      	str	r1, [sp, #40]	; 0x28
 800dd9e:	1c51      	adds	r1, r2, #1
 800dda0:	9115      	str	r1, [sp, #84]	; 0x54
 800dda2:	7852      	ldrb	r2, [r2, #1]
 800dda4:	2a00      	cmp	r2, #0
 800dda6:	d1c3      	bne.n	800dd30 <_strtod_l+0x38>
 800dda8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddaa:	9515      	str	r5, [sp, #84]	; 0x54
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f040 855f 	bne.w	800e870 <_strtod_l+0xb78>
 800ddb2:	4642      	mov	r2, r8
 800ddb4:	464b      	mov	r3, r9
 800ddb6:	e7e3      	b.n	800dd80 <_strtod_l+0x88>
 800ddb8:	2100      	movs	r1, #0
 800ddba:	e7ef      	b.n	800dd9c <_strtod_l+0xa4>
 800ddbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ddbe:	b13a      	cbz	r2, 800ddd0 <_strtod_l+0xd8>
 800ddc0:	2135      	movs	r1, #53	; 0x35
 800ddc2:	a818      	add	r0, sp, #96	; 0x60
 800ddc4:	f7ff ff37 	bl	800dc36 <__copybits>
 800ddc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f7ff fb0a 	bl	800d3e4 <_Bfree>
 800ddd0:	3f01      	subs	r7, #1
 800ddd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ddd4:	2f04      	cmp	r7, #4
 800ddd6:	d806      	bhi.n	800dde6 <_strtod_l+0xee>
 800ddd8:	e8df f007 	tbb	[pc, r7]
 800dddc:	201d0314 	.word	0x201d0314
 800dde0:	14          	.byte	0x14
 800dde1:	00          	.byte	0x00
 800dde2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800dde6:	05e9      	lsls	r1, r5, #23
 800dde8:	bf48      	it	mi
 800ddea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ddee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ddf2:	0d1b      	lsrs	r3, r3, #20
 800ddf4:	051b      	lsls	r3, r3, #20
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1b9      	bne.n	800dd6e <_strtod_l+0x76>
 800ddfa:	f7fe fad9 	bl	800c3b0 <__errno>
 800ddfe:	2322      	movs	r3, #34	; 0x22
 800de00:	6003      	str	r3, [r0, #0]
 800de02:	e7b4      	b.n	800dd6e <_strtod_l+0x76>
 800de04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800de08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800de0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800de10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800de14:	e7e7      	b.n	800dde6 <_strtod_l+0xee>
 800de16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800df90 <_strtod_l+0x298>
 800de1a:	e7e4      	b.n	800dde6 <_strtod_l+0xee>
 800de1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800de20:	f04f 38ff 	mov.w	r8, #4294967295
 800de24:	e7df      	b.n	800dde6 <_strtod_l+0xee>
 800de26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de28:	1c5a      	adds	r2, r3, #1
 800de2a:	9215      	str	r2, [sp, #84]	; 0x54
 800de2c:	785b      	ldrb	r3, [r3, #1]
 800de2e:	2b30      	cmp	r3, #48	; 0x30
 800de30:	d0f9      	beq.n	800de26 <_strtod_l+0x12e>
 800de32:	2b00      	cmp	r3, #0
 800de34:	d09b      	beq.n	800dd6e <_strtod_l+0x76>
 800de36:	2301      	movs	r3, #1
 800de38:	f04f 0a00 	mov.w	sl, #0
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de40:	930b      	str	r3, [sp, #44]	; 0x2c
 800de42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800de46:	46d3      	mov	fp, sl
 800de48:	220a      	movs	r2, #10
 800de4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800de4c:	7806      	ldrb	r6, [r0, #0]
 800de4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800de52:	b2d9      	uxtb	r1, r3
 800de54:	2909      	cmp	r1, #9
 800de56:	d926      	bls.n	800dea6 <_strtod_l+0x1ae>
 800de58:	494c      	ldr	r1, [pc, #304]	; (800df8c <_strtod_l+0x294>)
 800de5a:	2201      	movs	r2, #1
 800de5c:	f001 fd31 	bl	800f8c2 <strncmp>
 800de60:	2800      	cmp	r0, #0
 800de62:	d030      	beq.n	800dec6 <_strtod_l+0x1ce>
 800de64:	2000      	movs	r0, #0
 800de66:	4632      	mov	r2, r6
 800de68:	9005      	str	r0, [sp, #20]
 800de6a:	465e      	mov	r6, fp
 800de6c:	4603      	mov	r3, r0
 800de6e:	2a65      	cmp	r2, #101	; 0x65
 800de70:	d001      	beq.n	800de76 <_strtod_l+0x17e>
 800de72:	2a45      	cmp	r2, #69	; 0x45
 800de74:	d113      	bne.n	800de9e <_strtod_l+0x1a6>
 800de76:	b91e      	cbnz	r6, 800de80 <_strtod_l+0x188>
 800de78:	9a04      	ldr	r2, [sp, #16]
 800de7a:	4302      	orrs	r2, r0
 800de7c:	d094      	beq.n	800dda8 <_strtod_l+0xb0>
 800de7e:	2600      	movs	r6, #0
 800de80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800de82:	1c6a      	adds	r2, r5, #1
 800de84:	9215      	str	r2, [sp, #84]	; 0x54
 800de86:	786a      	ldrb	r2, [r5, #1]
 800de88:	2a2b      	cmp	r2, #43	; 0x2b
 800de8a:	d074      	beq.n	800df76 <_strtod_l+0x27e>
 800de8c:	2a2d      	cmp	r2, #45	; 0x2d
 800de8e:	d078      	beq.n	800df82 <_strtod_l+0x28a>
 800de90:	f04f 0c00 	mov.w	ip, #0
 800de94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800de98:	2909      	cmp	r1, #9
 800de9a:	d97f      	bls.n	800df9c <_strtod_l+0x2a4>
 800de9c:	9515      	str	r5, [sp, #84]	; 0x54
 800de9e:	2700      	movs	r7, #0
 800dea0:	e09e      	b.n	800dfe0 <_strtod_l+0x2e8>
 800dea2:	2300      	movs	r3, #0
 800dea4:	e7c8      	b.n	800de38 <_strtod_l+0x140>
 800dea6:	f1bb 0f08 	cmp.w	fp, #8
 800deaa:	bfd8      	it	le
 800deac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800deae:	f100 0001 	add.w	r0, r0, #1
 800deb2:	bfda      	itte	le
 800deb4:	fb02 3301 	mlale	r3, r2, r1, r3
 800deb8:	9309      	strle	r3, [sp, #36]	; 0x24
 800deba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800debe:	f10b 0b01 	add.w	fp, fp, #1
 800dec2:	9015      	str	r0, [sp, #84]	; 0x54
 800dec4:	e7c1      	b.n	800de4a <_strtod_l+0x152>
 800dec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	9215      	str	r2, [sp, #84]	; 0x54
 800decc:	785a      	ldrb	r2, [r3, #1]
 800dece:	f1bb 0f00 	cmp.w	fp, #0
 800ded2:	d037      	beq.n	800df44 <_strtod_l+0x24c>
 800ded4:	9005      	str	r0, [sp, #20]
 800ded6:	465e      	mov	r6, fp
 800ded8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dedc:	2b09      	cmp	r3, #9
 800dede:	d912      	bls.n	800df06 <_strtod_l+0x20e>
 800dee0:	2301      	movs	r3, #1
 800dee2:	e7c4      	b.n	800de6e <_strtod_l+0x176>
 800dee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dee6:	1c5a      	adds	r2, r3, #1
 800dee8:	9215      	str	r2, [sp, #84]	; 0x54
 800deea:	785a      	ldrb	r2, [r3, #1]
 800deec:	3001      	adds	r0, #1
 800deee:	2a30      	cmp	r2, #48	; 0x30
 800def0:	d0f8      	beq.n	800dee4 <_strtod_l+0x1ec>
 800def2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800def6:	2b08      	cmp	r3, #8
 800def8:	f200 84c1 	bhi.w	800e87e <_strtod_l+0xb86>
 800defc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800defe:	9005      	str	r0, [sp, #20]
 800df00:	2000      	movs	r0, #0
 800df02:	930b      	str	r3, [sp, #44]	; 0x2c
 800df04:	4606      	mov	r6, r0
 800df06:	3a30      	subs	r2, #48	; 0x30
 800df08:	f100 0301 	add.w	r3, r0, #1
 800df0c:	d014      	beq.n	800df38 <_strtod_l+0x240>
 800df0e:	9905      	ldr	r1, [sp, #20]
 800df10:	4419      	add	r1, r3
 800df12:	9105      	str	r1, [sp, #20]
 800df14:	4633      	mov	r3, r6
 800df16:	eb00 0c06 	add.w	ip, r0, r6
 800df1a:	210a      	movs	r1, #10
 800df1c:	4563      	cmp	r3, ip
 800df1e:	d113      	bne.n	800df48 <_strtod_l+0x250>
 800df20:	1833      	adds	r3, r6, r0
 800df22:	2b08      	cmp	r3, #8
 800df24:	f106 0601 	add.w	r6, r6, #1
 800df28:	4406      	add	r6, r0
 800df2a:	dc1a      	bgt.n	800df62 <_strtod_l+0x26a>
 800df2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df2e:	230a      	movs	r3, #10
 800df30:	fb03 2301 	mla	r3, r3, r1, r2
 800df34:	9309      	str	r3, [sp, #36]	; 0x24
 800df36:	2300      	movs	r3, #0
 800df38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800df3a:	1c51      	adds	r1, r2, #1
 800df3c:	9115      	str	r1, [sp, #84]	; 0x54
 800df3e:	7852      	ldrb	r2, [r2, #1]
 800df40:	4618      	mov	r0, r3
 800df42:	e7c9      	b.n	800ded8 <_strtod_l+0x1e0>
 800df44:	4658      	mov	r0, fp
 800df46:	e7d2      	b.n	800deee <_strtod_l+0x1f6>
 800df48:	2b08      	cmp	r3, #8
 800df4a:	f103 0301 	add.w	r3, r3, #1
 800df4e:	dc03      	bgt.n	800df58 <_strtod_l+0x260>
 800df50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df52:	434f      	muls	r7, r1
 800df54:	9709      	str	r7, [sp, #36]	; 0x24
 800df56:	e7e1      	b.n	800df1c <_strtod_l+0x224>
 800df58:	2b10      	cmp	r3, #16
 800df5a:	bfd8      	it	le
 800df5c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800df60:	e7dc      	b.n	800df1c <_strtod_l+0x224>
 800df62:	2e10      	cmp	r6, #16
 800df64:	bfdc      	itt	le
 800df66:	230a      	movle	r3, #10
 800df68:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800df6c:	e7e3      	b.n	800df36 <_strtod_l+0x23e>
 800df6e:	2300      	movs	r3, #0
 800df70:	9305      	str	r3, [sp, #20]
 800df72:	2301      	movs	r3, #1
 800df74:	e780      	b.n	800de78 <_strtod_l+0x180>
 800df76:	f04f 0c00 	mov.w	ip, #0
 800df7a:	1caa      	adds	r2, r5, #2
 800df7c:	9215      	str	r2, [sp, #84]	; 0x54
 800df7e:	78aa      	ldrb	r2, [r5, #2]
 800df80:	e788      	b.n	800de94 <_strtod_l+0x19c>
 800df82:	f04f 0c01 	mov.w	ip, #1
 800df86:	e7f8      	b.n	800df7a <_strtod_l+0x282>
 800df88:	080120e8 	.word	0x080120e8
 800df8c:	080120e4 	.word	0x080120e4
 800df90:	7ff00000 	.word	0x7ff00000
 800df94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800df96:	1c51      	adds	r1, r2, #1
 800df98:	9115      	str	r1, [sp, #84]	; 0x54
 800df9a:	7852      	ldrb	r2, [r2, #1]
 800df9c:	2a30      	cmp	r2, #48	; 0x30
 800df9e:	d0f9      	beq.n	800df94 <_strtod_l+0x29c>
 800dfa0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dfa4:	2908      	cmp	r1, #8
 800dfa6:	f63f af7a 	bhi.w	800de9e <_strtod_l+0x1a6>
 800dfaa:	3a30      	subs	r2, #48	; 0x30
 800dfac:	9208      	str	r2, [sp, #32]
 800dfae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dfb0:	920c      	str	r2, [sp, #48]	; 0x30
 800dfb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dfb4:	1c57      	adds	r7, r2, #1
 800dfb6:	9715      	str	r7, [sp, #84]	; 0x54
 800dfb8:	7852      	ldrb	r2, [r2, #1]
 800dfba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dfbe:	f1be 0f09 	cmp.w	lr, #9
 800dfc2:	d938      	bls.n	800e036 <_strtod_l+0x33e>
 800dfc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfc6:	1a7f      	subs	r7, r7, r1
 800dfc8:	2f08      	cmp	r7, #8
 800dfca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dfce:	dc03      	bgt.n	800dfd8 <_strtod_l+0x2e0>
 800dfd0:	9908      	ldr	r1, [sp, #32]
 800dfd2:	428f      	cmp	r7, r1
 800dfd4:	bfa8      	it	ge
 800dfd6:	460f      	movge	r7, r1
 800dfd8:	f1bc 0f00 	cmp.w	ip, #0
 800dfdc:	d000      	beq.n	800dfe0 <_strtod_l+0x2e8>
 800dfde:	427f      	negs	r7, r7
 800dfe0:	2e00      	cmp	r6, #0
 800dfe2:	d14f      	bne.n	800e084 <_strtod_l+0x38c>
 800dfe4:	9904      	ldr	r1, [sp, #16]
 800dfe6:	4301      	orrs	r1, r0
 800dfe8:	f47f aec1 	bne.w	800dd6e <_strtod_l+0x76>
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f47f aedb 	bne.w	800dda8 <_strtod_l+0xb0>
 800dff2:	2a69      	cmp	r2, #105	; 0x69
 800dff4:	d029      	beq.n	800e04a <_strtod_l+0x352>
 800dff6:	dc26      	bgt.n	800e046 <_strtod_l+0x34e>
 800dff8:	2a49      	cmp	r2, #73	; 0x49
 800dffa:	d026      	beq.n	800e04a <_strtod_l+0x352>
 800dffc:	2a4e      	cmp	r2, #78	; 0x4e
 800dffe:	f47f aed3 	bne.w	800dda8 <_strtod_l+0xb0>
 800e002:	499b      	ldr	r1, [pc, #620]	; (800e270 <_strtod_l+0x578>)
 800e004:	a815      	add	r0, sp, #84	; 0x54
 800e006:	f001 ff6f 	bl	800fee8 <__match>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	f43f aecc 	beq.w	800dda8 <_strtod_l+0xb0>
 800e010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	2b28      	cmp	r3, #40	; 0x28
 800e016:	d12f      	bne.n	800e078 <_strtod_l+0x380>
 800e018:	4996      	ldr	r1, [pc, #600]	; (800e274 <_strtod_l+0x57c>)
 800e01a:	aa18      	add	r2, sp, #96	; 0x60
 800e01c:	a815      	add	r0, sp, #84	; 0x54
 800e01e:	f001 ff77 	bl	800ff10 <__hexnan>
 800e022:	2805      	cmp	r0, #5
 800e024:	d128      	bne.n	800e078 <_strtod_l+0x380>
 800e026:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e028:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e02c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e030:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e034:	e69b      	b.n	800dd6e <_strtod_l+0x76>
 800e036:	9f08      	ldr	r7, [sp, #32]
 800e038:	210a      	movs	r1, #10
 800e03a:	fb01 2107 	mla	r1, r1, r7, r2
 800e03e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e042:	9208      	str	r2, [sp, #32]
 800e044:	e7b5      	b.n	800dfb2 <_strtod_l+0x2ba>
 800e046:	2a6e      	cmp	r2, #110	; 0x6e
 800e048:	e7d9      	b.n	800dffe <_strtod_l+0x306>
 800e04a:	498b      	ldr	r1, [pc, #556]	; (800e278 <_strtod_l+0x580>)
 800e04c:	a815      	add	r0, sp, #84	; 0x54
 800e04e:	f001 ff4b 	bl	800fee8 <__match>
 800e052:	2800      	cmp	r0, #0
 800e054:	f43f aea8 	beq.w	800dda8 <_strtod_l+0xb0>
 800e058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e05a:	4988      	ldr	r1, [pc, #544]	; (800e27c <_strtod_l+0x584>)
 800e05c:	3b01      	subs	r3, #1
 800e05e:	a815      	add	r0, sp, #84	; 0x54
 800e060:	9315      	str	r3, [sp, #84]	; 0x54
 800e062:	f001 ff41 	bl	800fee8 <__match>
 800e066:	b910      	cbnz	r0, 800e06e <_strtod_l+0x376>
 800e068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e06a:	3301      	adds	r3, #1
 800e06c:	9315      	str	r3, [sp, #84]	; 0x54
 800e06e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e28c <_strtod_l+0x594>
 800e072:	f04f 0800 	mov.w	r8, #0
 800e076:	e67a      	b.n	800dd6e <_strtod_l+0x76>
 800e078:	4881      	ldr	r0, [pc, #516]	; (800e280 <_strtod_l+0x588>)
 800e07a:	f001 fc69 	bl	800f950 <nan>
 800e07e:	ec59 8b10 	vmov	r8, r9, d0
 800e082:	e674      	b.n	800dd6e <_strtod_l+0x76>
 800e084:	9b05      	ldr	r3, [sp, #20]
 800e086:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e088:	1afb      	subs	r3, r7, r3
 800e08a:	f1bb 0f00 	cmp.w	fp, #0
 800e08e:	bf08      	it	eq
 800e090:	46b3      	moveq	fp, r6
 800e092:	2e10      	cmp	r6, #16
 800e094:	9308      	str	r3, [sp, #32]
 800e096:	4635      	mov	r5, r6
 800e098:	bfa8      	it	ge
 800e09a:	2510      	movge	r5, #16
 800e09c:	f7f2 fa32 	bl	8000504 <__aeabi_ui2d>
 800e0a0:	2e09      	cmp	r6, #9
 800e0a2:	4680      	mov	r8, r0
 800e0a4:	4689      	mov	r9, r1
 800e0a6:	dd13      	ble.n	800e0d0 <_strtod_l+0x3d8>
 800e0a8:	4b76      	ldr	r3, [pc, #472]	; (800e284 <_strtod_l+0x58c>)
 800e0aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e0ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e0b2:	f7f2 faa1 	bl	80005f8 <__aeabi_dmul>
 800e0b6:	4680      	mov	r8, r0
 800e0b8:	4650      	mov	r0, sl
 800e0ba:	4689      	mov	r9, r1
 800e0bc:	f7f2 fa22 	bl	8000504 <__aeabi_ui2d>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	4640      	mov	r0, r8
 800e0c6:	4649      	mov	r1, r9
 800e0c8:	f7f2 f8e0 	bl	800028c <__adddf3>
 800e0cc:	4680      	mov	r8, r0
 800e0ce:	4689      	mov	r9, r1
 800e0d0:	2e0f      	cmp	r6, #15
 800e0d2:	dc38      	bgt.n	800e146 <_strtod_l+0x44e>
 800e0d4:	9b08      	ldr	r3, [sp, #32]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f43f ae49 	beq.w	800dd6e <_strtod_l+0x76>
 800e0dc:	dd24      	ble.n	800e128 <_strtod_l+0x430>
 800e0de:	2b16      	cmp	r3, #22
 800e0e0:	dc0b      	bgt.n	800e0fa <_strtod_l+0x402>
 800e0e2:	4968      	ldr	r1, [pc, #416]	; (800e284 <_strtod_l+0x58c>)
 800e0e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0ec:	4642      	mov	r2, r8
 800e0ee:	464b      	mov	r3, r9
 800e0f0:	f7f2 fa82 	bl	80005f8 <__aeabi_dmul>
 800e0f4:	4680      	mov	r8, r0
 800e0f6:	4689      	mov	r9, r1
 800e0f8:	e639      	b.n	800dd6e <_strtod_l+0x76>
 800e0fa:	9a08      	ldr	r2, [sp, #32]
 800e0fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e100:	4293      	cmp	r3, r2
 800e102:	db20      	blt.n	800e146 <_strtod_l+0x44e>
 800e104:	4c5f      	ldr	r4, [pc, #380]	; (800e284 <_strtod_l+0x58c>)
 800e106:	f1c6 060f 	rsb	r6, r6, #15
 800e10a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e10e:	4642      	mov	r2, r8
 800e110:	464b      	mov	r3, r9
 800e112:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e116:	f7f2 fa6f 	bl	80005f8 <__aeabi_dmul>
 800e11a:	9b08      	ldr	r3, [sp, #32]
 800e11c:	1b9e      	subs	r6, r3, r6
 800e11e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e122:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e126:	e7e3      	b.n	800e0f0 <_strtod_l+0x3f8>
 800e128:	9b08      	ldr	r3, [sp, #32]
 800e12a:	3316      	adds	r3, #22
 800e12c:	db0b      	blt.n	800e146 <_strtod_l+0x44e>
 800e12e:	9b05      	ldr	r3, [sp, #20]
 800e130:	1bdf      	subs	r7, r3, r7
 800e132:	4b54      	ldr	r3, [pc, #336]	; (800e284 <_strtod_l+0x58c>)
 800e134:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e13c:	4640      	mov	r0, r8
 800e13e:	4649      	mov	r1, r9
 800e140:	f7f2 fb84 	bl	800084c <__aeabi_ddiv>
 800e144:	e7d6      	b.n	800e0f4 <_strtod_l+0x3fc>
 800e146:	9b08      	ldr	r3, [sp, #32]
 800e148:	1b75      	subs	r5, r6, r5
 800e14a:	441d      	add	r5, r3
 800e14c:	2d00      	cmp	r5, #0
 800e14e:	dd70      	ble.n	800e232 <_strtod_l+0x53a>
 800e150:	f015 030f 	ands.w	r3, r5, #15
 800e154:	d00a      	beq.n	800e16c <_strtod_l+0x474>
 800e156:	494b      	ldr	r1, [pc, #300]	; (800e284 <_strtod_l+0x58c>)
 800e158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e15c:	4642      	mov	r2, r8
 800e15e:	464b      	mov	r3, r9
 800e160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e164:	f7f2 fa48 	bl	80005f8 <__aeabi_dmul>
 800e168:	4680      	mov	r8, r0
 800e16a:	4689      	mov	r9, r1
 800e16c:	f035 050f 	bics.w	r5, r5, #15
 800e170:	d04d      	beq.n	800e20e <_strtod_l+0x516>
 800e172:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e176:	dd22      	ble.n	800e1be <_strtod_l+0x4c6>
 800e178:	2500      	movs	r5, #0
 800e17a:	46ab      	mov	fp, r5
 800e17c:	9509      	str	r5, [sp, #36]	; 0x24
 800e17e:	9505      	str	r5, [sp, #20]
 800e180:	2322      	movs	r3, #34	; 0x22
 800e182:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e28c <_strtod_l+0x594>
 800e186:	6023      	str	r3, [r4, #0]
 800e188:	f04f 0800 	mov.w	r8, #0
 800e18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f43f aded 	beq.w	800dd6e <_strtod_l+0x76>
 800e194:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e196:	4620      	mov	r0, r4
 800e198:	f7ff f924 	bl	800d3e4 <_Bfree>
 800e19c:	9905      	ldr	r1, [sp, #20]
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7ff f920 	bl	800d3e4 <_Bfree>
 800e1a4:	4659      	mov	r1, fp
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f7ff f91c 	bl	800d3e4 <_Bfree>
 800e1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f7ff f918 	bl	800d3e4 <_Bfree>
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f7ff f914 	bl	800d3e4 <_Bfree>
 800e1bc:	e5d7      	b.n	800dd6e <_strtod_l+0x76>
 800e1be:	4b32      	ldr	r3, [pc, #200]	; (800e288 <_strtod_l+0x590>)
 800e1c0:	9304      	str	r3, [sp, #16]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	112d      	asrs	r5, r5, #4
 800e1c6:	4640      	mov	r0, r8
 800e1c8:	4649      	mov	r1, r9
 800e1ca:	469a      	mov	sl, r3
 800e1cc:	2d01      	cmp	r5, #1
 800e1ce:	dc21      	bgt.n	800e214 <_strtod_l+0x51c>
 800e1d0:	b10b      	cbz	r3, 800e1d6 <_strtod_l+0x4de>
 800e1d2:	4680      	mov	r8, r0
 800e1d4:	4689      	mov	r9, r1
 800e1d6:	492c      	ldr	r1, [pc, #176]	; (800e288 <_strtod_l+0x590>)
 800e1d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e1dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e1e0:	4642      	mov	r2, r8
 800e1e2:	464b      	mov	r3, r9
 800e1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1e8:	f7f2 fa06 	bl	80005f8 <__aeabi_dmul>
 800e1ec:	4b27      	ldr	r3, [pc, #156]	; (800e28c <_strtod_l+0x594>)
 800e1ee:	460a      	mov	r2, r1
 800e1f0:	400b      	ands	r3, r1
 800e1f2:	4927      	ldr	r1, [pc, #156]	; (800e290 <_strtod_l+0x598>)
 800e1f4:	428b      	cmp	r3, r1
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	d8be      	bhi.n	800e178 <_strtod_l+0x480>
 800e1fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e1fe:	428b      	cmp	r3, r1
 800e200:	bf86      	itte	hi
 800e202:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e294 <_strtod_l+0x59c>
 800e206:	f04f 38ff 	movhi.w	r8, #4294967295
 800e20a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e20e:	2300      	movs	r3, #0
 800e210:	9304      	str	r3, [sp, #16]
 800e212:	e07b      	b.n	800e30c <_strtod_l+0x614>
 800e214:	07ea      	lsls	r2, r5, #31
 800e216:	d505      	bpl.n	800e224 <_strtod_l+0x52c>
 800e218:	9b04      	ldr	r3, [sp, #16]
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	f7f2 f9eb 	bl	80005f8 <__aeabi_dmul>
 800e222:	2301      	movs	r3, #1
 800e224:	9a04      	ldr	r2, [sp, #16]
 800e226:	3208      	adds	r2, #8
 800e228:	f10a 0a01 	add.w	sl, sl, #1
 800e22c:	106d      	asrs	r5, r5, #1
 800e22e:	9204      	str	r2, [sp, #16]
 800e230:	e7cc      	b.n	800e1cc <_strtod_l+0x4d4>
 800e232:	d0ec      	beq.n	800e20e <_strtod_l+0x516>
 800e234:	426d      	negs	r5, r5
 800e236:	f015 020f 	ands.w	r2, r5, #15
 800e23a:	d00a      	beq.n	800e252 <_strtod_l+0x55a>
 800e23c:	4b11      	ldr	r3, [pc, #68]	; (800e284 <_strtod_l+0x58c>)
 800e23e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e242:	4640      	mov	r0, r8
 800e244:	4649      	mov	r1, r9
 800e246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24a:	f7f2 faff 	bl	800084c <__aeabi_ddiv>
 800e24e:	4680      	mov	r8, r0
 800e250:	4689      	mov	r9, r1
 800e252:	112d      	asrs	r5, r5, #4
 800e254:	d0db      	beq.n	800e20e <_strtod_l+0x516>
 800e256:	2d1f      	cmp	r5, #31
 800e258:	dd1e      	ble.n	800e298 <_strtod_l+0x5a0>
 800e25a:	2500      	movs	r5, #0
 800e25c:	46ab      	mov	fp, r5
 800e25e:	9509      	str	r5, [sp, #36]	; 0x24
 800e260:	9505      	str	r5, [sp, #20]
 800e262:	2322      	movs	r3, #34	; 0x22
 800e264:	f04f 0800 	mov.w	r8, #0
 800e268:	f04f 0900 	mov.w	r9, #0
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	e78d      	b.n	800e18c <_strtod_l+0x494>
 800e270:	08011e95 	.word	0x08011e95
 800e274:	080120fc 	.word	0x080120fc
 800e278:	08011e8d 	.word	0x08011e8d
 800e27c:	08011efe 	.word	0x08011efe
 800e280:	08011efa 	.word	0x08011efa
 800e284:	08012010 	.word	0x08012010
 800e288:	08011fe8 	.word	0x08011fe8
 800e28c:	7ff00000 	.word	0x7ff00000
 800e290:	7ca00000 	.word	0x7ca00000
 800e294:	7fefffff 	.word	0x7fefffff
 800e298:	f015 0310 	ands.w	r3, r5, #16
 800e29c:	bf18      	it	ne
 800e29e:	236a      	movne	r3, #106	; 0x6a
 800e2a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e644 <_strtod_l+0x94c>
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	4640      	mov	r0, r8
 800e2a8:	4649      	mov	r1, r9
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	07ea      	lsls	r2, r5, #31
 800e2ae:	d504      	bpl.n	800e2ba <_strtod_l+0x5c2>
 800e2b0:	e9da 2300 	ldrd	r2, r3, [sl]
 800e2b4:	f7f2 f9a0 	bl	80005f8 <__aeabi_dmul>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	106d      	asrs	r5, r5, #1
 800e2bc:	f10a 0a08 	add.w	sl, sl, #8
 800e2c0:	d1f4      	bne.n	800e2ac <_strtod_l+0x5b4>
 800e2c2:	b10b      	cbz	r3, 800e2c8 <_strtod_l+0x5d0>
 800e2c4:	4680      	mov	r8, r0
 800e2c6:	4689      	mov	r9, r1
 800e2c8:	9b04      	ldr	r3, [sp, #16]
 800e2ca:	b1bb      	cbz	r3, 800e2fc <_strtod_l+0x604>
 800e2cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e2d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	4649      	mov	r1, r9
 800e2d8:	dd10      	ble.n	800e2fc <_strtod_l+0x604>
 800e2da:	2b1f      	cmp	r3, #31
 800e2dc:	f340 811e 	ble.w	800e51c <_strtod_l+0x824>
 800e2e0:	2b34      	cmp	r3, #52	; 0x34
 800e2e2:	bfde      	ittt	le
 800e2e4:	f04f 33ff 	movle.w	r3, #4294967295
 800e2e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e2ec:	4093      	lslle	r3, r2
 800e2ee:	f04f 0800 	mov.w	r8, #0
 800e2f2:	bfcc      	ite	gt
 800e2f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e2f8:	ea03 0901 	andle.w	r9, r3, r1
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	2300      	movs	r3, #0
 800e300:	4640      	mov	r0, r8
 800e302:	4649      	mov	r1, r9
 800e304:	f7f2 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e308:	2800      	cmp	r0, #0
 800e30a:	d1a6      	bne.n	800e25a <_strtod_l+0x562>
 800e30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e312:	4633      	mov	r3, r6
 800e314:	465a      	mov	r2, fp
 800e316:	4620      	mov	r0, r4
 800e318:	f7ff f8cc 	bl	800d4b4 <__s2b>
 800e31c:	9009      	str	r0, [sp, #36]	; 0x24
 800e31e:	2800      	cmp	r0, #0
 800e320:	f43f af2a 	beq.w	800e178 <_strtod_l+0x480>
 800e324:	9a08      	ldr	r2, [sp, #32]
 800e326:	9b05      	ldr	r3, [sp, #20]
 800e328:	2a00      	cmp	r2, #0
 800e32a:	eba3 0307 	sub.w	r3, r3, r7
 800e32e:	bfa8      	it	ge
 800e330:	2300      	movge	r3, #0
 800e332:	930c      	str	r3, [sp, #48]	; 0x30
 800e334:	2500      	movs	r5, #0
 800e336:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e33a:	9312      	str	r3, [sp, #72]	; 0x48
 800e33c:	46ab      	mov	fp, r5
 800e33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e340:	4620      	mov	r0, r4
 800e342:	6859      	ldr	r1, [r3, #4]
 800e344:	f7ff f80e 	bl	800d364 <_Balloc>
 800e348:	9005      	str	r0, [sp, #20]
 800e34a:	2800      	cmp	r0, #0
 800e34c:	f43f af18 	beq.w	800e180 <_strtod_l+0x488>
 800e350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e352:	691a      	ldr	r2, [r3, #16]
 800e354:	3202      	adds	r2, #2
 800e356:	f103 010c 	add.w	r1, r3, #12
 800e35a:	0092      	lsls	r2, r2, #2
 800e35c:	300c      	adds	r0, #12
 800e35e:	f7fe f853 	bl	800c408 <memcpy>
 800e362:	ec49 8b10 	vmov	d0, r8, r9
 800e366:	aa18      	add	r2, sp, #96	; 0x60
 800e368:	a917      	add	r1, sp, #92	; 0x5c
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7ff fbd6 	bl	800db1c <__d2b>
 800e370:	ec49 8b18 	vmov	d8, r8, r9
 800e374:	9016      	str	r0, [sp, #88]	; 0x58
 800e376:	2800      	cmp	r0, #0
 800e378:	f43f af02 	beq.w	800e180 <_strtod_l+0x488>
 800e37c:	2101      	movs	r1, #1
 800e37e:	4620      	mov	r0, r4
 800e380:	f7ff f930 	bl	800d5e4 <__i2b>
 800e384:	4683      	mov	fp, r0
 800e386:	2800      	cmp	r0, #0
 800e388:	f43f aefa 	beq.w	800e180 <_strtod_l+0x488>
 800e38c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e38e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e390:	2e00      	cmp	r6, #0
 800e392:	bfab      	itete	ge
 800e394:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e396:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e398:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e39a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e39e:	bfac      	ite	ge
 800e3a0:	eb06 0a03 	addge.w	sl, r6, r3
 800e3a4:	1b9f      	sublt	r7, r3, r6
 800e3a6:	9b04      	ldr	r3, [sp, #16]
 800e3a8:	1af6      	subs	r6, r6, r3
 800e3aa:	4416      	add	r6, r2
 800e3ac:	4ba0      	ldr	r3, [pc, #640]	; (800e630 <_strtod_l+0x938>)
 800e3ae:	3e01      	subs	r6, #1
 800e3b0:	429e      	cmp	r6, r3
 800e3b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e3b6:	f280 80c4 	bge.w	800e542 <_strtod_l+0x84a>
 800e3ba:	1b9b      	subs	r3, r3, r6
 800e3bc:	2b1f      	cmp	r3, #31
 800e3be:	eba2 0203 	sub.w	r2, r2, r3
 800e3c2:	f04f 0101 	mov.w	r1, #1
 800e3c6:	f300 80b0 	bgt.w	800e52a <_strtod_l+0x832>
 800e3ca:	fa01 f303 	lsl.w	r3, r1, r3
 800e3ce:	930e      	str	r3, [sp, #56]	; 0x38
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	930d      	str	r3, [sp, #52]	; 0x34
 800e3d4:	eb0a 0602 	add.w	r6, sl, r2
 800e3d8:	9b04      	ldr	r3, [sp, #16]
 800e3da:	45b2      	cmp	sl, r6
 800e3dc:	4417      	add	r7, r2
 800e3de:	441f      	add	r7, r3
 800e3e0:	4653      	mov	r3, sl
 800e3e2:	bfa8      	it	ge
 800e3e4:	4633      	movge	r3, r6
 800e3e6:	42bb      	cmp	r3, r7
 800e3e8:	bfa8      	it	ge
 800e3ea:	463b      	movge	r3, r7
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	bfc2      	ittt	gt
 800e3f0:	1af6      	subgt	r6, r6, r3
 800e3f2:	1aff      	subgt	r7, r7, r3
 800e3f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	dd17      	ble.n	800e42e <_strtod_l+0x736>
 800e3fe:	4659      	mov	r1, fp
 800e400:	461a      	mov	r2, r3
 800e402:	4620      	mov	r0, r4
 800e404:	f7ff f9ae 	bl	800d764 <__pow5mult>
 800e408:	4683      	mov	fp, r0
 800e40a:	2800      	cmp	r0, #0
 800e40c:	f43f aeb8 	beq.w	800e180 <_strtod_l+0x488>
 800e410:	4601      	mov	r1, r0
 800e412:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e414:	4620      	mov	r0, r4
 800e416:	f7ff f8fb 	bl	800d610 <__multiply>
 800e41a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e41c:	2800      	cmp	r0, #0
 800e41e:	f43f aeaf 	beq.w	800e180 <_strtod_l+0x488>
 800e422:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e424:	4620      	mov	r0, r4
 800e426:	f7fe ffdd 	bl	800d3e4 <_Bfree>
 800e42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e42c:	9316      	str	r3, [sp, #88]	; 0x58
 800e42e:	2e00      	cmp	r6, #0
 800e430:	f300 808c 	bgt.w	800e54c <_strtod_l+0x854>
 800e434:	9b08      	ldr	r3, [sp, #32]
 800e436:	2b00      	cmp	r3, #0
 800e438:	dd08      	ble.n	800e44c <_strtod_l+0x754>
 800e43a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e43c:	9905      	ldr	r1, [sp, #20]
 800e43e:	4620      	mov	r0, r4
 800e440:	f7ff f990 	bl	800d764 <__pow5mult>
 800e444:	9005      	str	r0, [sp, #20]
 800e446:	2800      	cmp	r0, #0
 800e448:	f43f ae9a 	beq.w	800e180 <_strtod_l+0x488>
 800e44c:	2f00      	cmp	r7, #0
 800e44e:	dd08      	ble.n	800e462 <_strtod_l+0x76a>
 800e450:	9905      	ldr	r1, [sp, #20]
 800e452:	463a      	mov	r2, r7
 800e454:	4620      	mov	r0, r4
 800e456:	f7ff f9df 	bl	800d818 <__lshift>
 800e45a:	9005      	str	r0, [sp, #20]
 800e45c:	2800      	cmp	r0, #0
 800e45e:	f43f ae8f 	beq.w	800e180 <_strtod_l+0x488>
 800e462:	f1ba 0f00 	cmp.w	sl, #0
 800e466:	dd08      	ble.n	800e47a <_strtod_l+0x782>
 800e468:	4659      	mov	r1, fp
 800e46a:	4652      	mov	r2, sl
 800e46c:	4620      	mov	r0, r4
 800e46e:	f7ff f9d3 	bl	800d818 <__lshift>
 800e472:	4683      	mov	fp, r0
 800e474:	2800      	cmp	r0, #0
 800e476:	f43f ae83 	beq.w	800e180 <_strtod_l+0x488>
 800e47a:	9a05      	ldr	r2, [sp, #20]
 800e47c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e47e:	4620      	mov	r0, r4
 800e480:	f7ff fa52 	bl	800d928 <__mdiff>
 800e484:	4605      	mov	r5, r0
 800e486:	2800      	cmp	r0, #0
 800e488:	f43f ae7a 	beq.w	800e180 <_strtod_l+0x488>
 800e48c:	68c3      	ldr	r3, [r0, #12]
 800e48e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e490:	2300      	movs	r3, #0
 800e492:	60c3      	str	r3, [r0, #12]
 800e494:	4659      	mov	r1, fp
 800e496:	f7ff fa2b 	bl	800d8f0 <__mcmp>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	da60      	bge.n	800e560 <_strtod_l+0x868>
 800e49e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4a0:	ea53 0308 	orrs.w	r3, r3, r8
 800e4a4:	f040 8084 	bne.w	800e5b0 <_strtod_l+0x8b8>
 800e4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d17f      	bne.n	800e5b0 <_strtod_l+0x8b8>
 800e4b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4b4:	0d1b      	lsrs	r3, r3, #20
 800e4b6:	051b      	lsls	r3, r3, #20
 800e4b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e4bc:	d978      	bls.n	800e5b0 <_strtod_l+0x8b8>
 800e4be:	696b      	ldr	r3, [r5, #20]
 800e4c0:	b913      	cbnz	r3, 800e4c8 <_strtod_l+0x7d0>
 800e4c2:	692b      	ldr	r3, [r5, #16]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	dd73      	ble.n	800e5b0 <_strtod_l+0x8b8>
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7ff f9a3 	bl	800d818 <__lshift>
 800e4d2:	4659      	mov	r1, fp
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	f7ff fa0b 	bl	800d8f0 <__mcmp>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	dd68      	ble.n	800e5b0 <_strtod_l+0x8b8>
 800e4de:	9904      	ldr	r1, [sp, #16]
 800e4e0:	4a54      	ldr	r2, [pc, #336]	; (800e634 <_strtod_l+0x93c>)
 800e4e2:	464b      	mov	r3, r9
 800e4e4:	2900      	cmp	r1, #0
 800e4e6:	f000 8084 	beq.w	800e5f2 <_strtod_l+0x8fa>
 800e4ea:	ea02 0109 	and.w	r1, r2, r9
 800e4ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e4f2:	dc7e      	bgt.n	800e5f2 <_strtod_l+0x8fa>
 800e4f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e4f8:	f77f aeb3 	ble.w	800e262 <_strtod_l+0x56a>
 800e4fc:	4b4e      	ldr	r3, [pc, #312]	; (800e638 <_strtod_l+0x940>)
 800e4fe:	4640      	mov	r0, r8
 800e500:	4649      	mov	r1, r9
 800e502:	2200      	movs	r2, #0
 800e504:	f7f2 f878 	bl	80005f8 <__aeabi_dmul>
 800e508:	4b4a      	ldr	r3, [pc, #296]	; (800e634 <_strtod_l+0x93c>)
 800e50a:	400b      	ands	r3, r1
 800e50c:	4680      	mov	r8, r0
 800e50e:	4689      	mov	r9, r1
 800e510:	2b00      	cmp	r3, #0
 800e512:	f47f ae3f 	bne.w	800e194 <_strtod_l+0x49c>
 800e516:	2322      	movs	r3, #34	; 0x22
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	e63b      	b.n	800e194 <_strtod_l+0x49c>
 800e51c:	f04f 32ff 	mov.w	r2, #4294967295
 800e520:	fa02 f303 	lsl.w	r3, r2, r3
 800e524:	ea03 0808 	and.w	r8, r3, r8
 800e528:	e6e8      	b.n	800e2fc <_strtod_l+0x604>
 800e52a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e52e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e532:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e536:	36e2      	adds	r6, #226	; 0xe2
 800e538:	fa01 f306 	lsl.w	r3, r1, r6
 800e53c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e540:	e748      	b.n	800e3d4 <_strtod_l+0x6dc>
 800e542:	2100      	movs	r1, #0
 800e544:	2301      	movs	r3, #1
 800e546:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e54a:	e743      	b.n	800e3d4 <_strtod_l+0x6dc>
 800e54c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e54e:	4632      	mov	r2, r6
 800e550:	4620      	mov	r0, r4
 800e552:	f7ff f961 	bl	800d818 <__lshift>
 800e556:	9016      	str	r0, [sp, #88]	; 0x58
 800e558:	2800      	cmp	r0, #0
 800e55a:	f47f af6b 	bne.w	800e434 <_strtod_l+0x73c>
 800e55e:	e60f      	b.n	800e180 <_strtod_l+0x488>
 800e560:	46ca      	mov	sl, r9
 800e562:	d171      	bne.n	800e648 <_strtod_l+0x950>
 800e564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e56a:	b352      	cbz	r2, 800e5c2 <_strtod_l+0x8ca>
 800e56c:	4a33      	ldr	r2, [pc, #204]	; (800e63c <_strtod_l+0x944>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d12a      	bne.n	800e5c8 <_strtod_l+0x8d0>
 800e572:	9b04      	ldr	r3, [sp, #16]
 800e574:	4641      	mov	r1, r8
 800e576:	b1fb      	cbz	r3, 800e5b8 <_strtod_l+0x8c0>
 800e578:	4b2e      	ldr	r3, [pc, #184]	; (800e634 <_strtod_l+0x93c>)
 800e57a:	ea09 0303 	and.w	r3, r9, r3
 800e57e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e582:	f04f 32ff 	mov.w	r2, #4294967295
 800e586:	d81a      	bhi.n	800e5be <_strtod_l+0x8c6>
 800e588:	0d1b      	lsrs	r3, r3, #20
 800e58a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e58e:	fa02 f303 	lsl.w	r3, r2, r3
 800e592:	4299      	cmp	r1, r3
 800e594:	d118      	bne.n	800e5c8 <_strtod_l+0x8d0>
 800e596:	4b2a      	ldr	r3, [pc, #168]	; (800e640 <_strtod_l+0x948>)
 800e598:	459a      	cmp	sl, r3
 800e59a:	d102      	bne.n	800e5a2 <_strtod_l+0x8aa>
 800e59c:	3101      	adds	r1, #1
 800e59e:	f43f adef 	beq.w	800e180 <_strtod_l+0x488>
 800e5a2:	4b24      	ldr	r3, [pc, #144]	; (800e634 <_strtod_l+0x93c>)
 800e5a4:	ea0a 0303 	and.w	r3, sl, r3
 800e5a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e5ac:	f04f 0800 	mov.w	r8, #0
 800e5b0:	9b04      	ldr	r3, [sp, #16]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1a2      	bne.n	800e4fc <_strtod_l+0x804>
 800e5b6:	e5ed      	b.n	800e194 <_strtod_l+0x49c>
 800e5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5bc:	e7e9      	b.n	800e592 <_strtod_l+0x89a>
 800e5be:	4613      	mov	r3, r2
 800e5c0:	e7e7      	b.n	800e592 <_strtod_l+0x89a>
 800e5c2:	ea53 0308 	orrs.w	r3, r3, r8
 800e5c6:	d08a      	beq.n	800e4de <_strtod_l+0x7e6>
 800e5c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5ca:	b1e3      	cbz	r3, 800e606 <_strtod_l+0x90e>
 800e5cc:	ea13 0f0a 	tst.w	r3, sl
 800e5d0:	d0ee      	beq.n	800e5b0 <_strtod_l+0x8b8>
 800e5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5d4:	9a04      	ldr	r2, [sp, #16]
 800e5d6:	4640      	mov	r0, r8
 800e5d8:	4649      	mov	r1, r9
 800e5da:	b1c3      	cbz	r3, 800e60e <_strtod_l+0x916>
 800e5dc:	f7ff fb6f 	bl	800dcbe <sulp>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	ec51 0b18 	vmov	r0, r1, d8
 800e5e8:	f7f1 fe50 	bl	800028c <__adddf3>
 800e5ec:	4680      	mov	r8, r0
 800e5ee:	4689      	mov	r9, r1
 800e5f0:	e7de      	b.n	800e5b0 <_strtod_l+0x8b8>
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e5f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e5fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e600:	f04f 38ff 	mov.w	r8, #4294967295
 800e604:	e7d4      	b.n	800e5b0 <_strtod_l+0x8b8>
 800e606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e608:	ea13 0f08 	tst.w	r3, r8
 800e60c:	e7e0      	b.n	800e5d0 <_strtod_l+0x8d8>
 800e60e:	f7ff fb56 	bl	800dcbe <sulp>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	ec51 0b18 	vmov	r0, r1, d8
 800e61a:	f7f1 fe35 	bl	8000288 <__aeabi_dsub>
 800e61e:	2200      	movs	r2, #0
 800e620:	2300      	movs	r3, #0
 800e622:	4680      	mov	r8, r0
 800e624:	4689      	mov	r9, r1
 800e626:	f7f2 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	d0c0      	beq.n	800e5b0 <_strtod_l+0x8b8>
 800e62e:	e618      	b.n	800e262 <_strtod_l+0x56a>
 800e630:	fffffc02 	.word	0xfffffc02
 800e634:	7ff00000 	.word	0x7ff00000
 800e638:	39500000 	.word	0x39500000
 800e63c:	000fffff 	.word	0x000fffff
 800e640:	7fefffff 	.word	0x7fefffff
 800e644:	08012110 	.word	0x08012110
 800e648:	4659      	mov	r1, fp
 800e64a:	4628      	mov	r0, r5
 800e64c:	f7ff fac0 	bl	800dbd0 <__ratio>
 800e650:	ec57 6b10 	vmov	r6, r7, d0
 800e654:	ee10 0a10 	vmov	r0, s0
 800e658:	2200      	movs	r2, #0
 800e65a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e65e:	4639      	mov	r1, r7
 800e660:	f7f2 fa46 	bl	8000af0 <__aeabi_dcmple>
 800e664:	2800      	cmp	r0, #0
 800e666:	d071      	beq.n	800e74c <_strtod_l+0xa54>
 800e668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d17c      	bne.n	800e768 <_strtod_l+0xa70>
 800e66e:	f1b8 0f00 	cmp.w	r8, #0
 800e672:	d15a      	bne.n	800e72a <_strtod_l+0xa32>
 800e674:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d15d      	bne.n	800e738 <_strtod_l+0xa40>
 800e67c:	4b90      	ldr	r3, [pc, #576]	; (800e8c0 <_strtod_l+0xbc8>)
 800e67e:	2200      	movs	r2, #0
 800e680:	4630      	mov	r0, r6
 800e682:	4639      	mov	r1, r7
 800e684:	f7f2 fa2a 	bl	8000adc <__aeabi_dcmplt>
 800e688:	2800      	cmp	r0, #0
 800e68a:	d15c      	bne.n	800e746 <_strtod_l+0xa4e>
 800e68c:	4630      	mov	r0, r6
 800e68e:	4639      	mov	r1, r7
 800e690:	4b8c      	ldr	r3, [pc, #560]	; (800e8c4 <_strtod_l+0xbcc>)
 800e692:	2200      	movs	r2, #0
 800e694:	f7f1 ffb0 	bl	80005f8 <__aeabi_dmul>
 800e698:	4606      	mov	r6, r0
 800e69a:	460f      	mov	r7, r1
 800e69c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e6a0:	9606      	str	r6, [sp, #24]
 800e6a2:	9307      	str	r3, [sp, #28]
 800e6a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e6ac:	4b86      	ldr	r3, [pc, #536]	; (800e8c8 <_strtod_l+0xbd0>)
 800e6ae:	ea0a 0303 	and.w	r3, sl, r3
 800e6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800e6b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6b6:	4b85      	ldr	r3, [pc, #532]	; (800e8cc <_strtod_l+0xbd4>)
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	f040 8090 	bne.w	800e7de <_strtod_l+0xae6>
 800e6be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e6c2:	ec49 8b10 	vmov	d0, r8, r9
 800e6c6:	f7ff f9b9 	bl	800da3c <__ulp>
 800e6ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6ce:	ec51 0b10 	vmov	r0, r1, d0
 800e6d2:	f7f1 ff91 	bl	80005f8 <__aeabi_dmul>
 800e6d6:	4642      	mov	r2, r8
 800e6d8:	464b      	mov	r3, r9
 800e6da:	f7f1 fdd7 	bl	800028c <__adddf3>
 800e6de:	460b      	mov	r3, r1
 800e6e0:	4979      	ldr	r1, [pc, #484]	; (800e8c8 <_strtod_l+0xbd0>)
 800e6e2:	4a7b      	ldr	r2, [pc, #492]	; (800e8d0 <_strtod_l+0xbd8>)
 800e6e4:	4019      	ands	r1, r3
 800e6e6:	4291      	cmp	r1, r2
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	d944      	bls.n	800e776 <_strtod_l+0xa7e>
 800e6ec:	ee18 2a90 	vmov	r2, s17
 800e6f0:	4b78      	ldr	r3, [pc, #480]	; (800e8d4 <_strtod_l+0xbdc>)
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d104      	bne.n	800e700 <_strtod_l+0xa08>
 800e6f6:	ee18 3a10 	vmov	r3, s16
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	f43f ad40 	beq.w	800e180 <_strtod_l+0x488>
 800e700:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e8d4 <_strtod_l+0xbdc>
 800e704:	f04f 38ff 	mov.w	r8, #4294967295
 800e708:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7fe fe6a 	bl	800d3e4 <_Bfree>
 800e710:	9905      	ldr	r1, [sp, #20]
 800e712:	4620      	mov	r0, r4
 800e714:	f7fe fe66 	bl	800d3e4 <_Bfree>
 800e718:	4659      	mov	r1, fp
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7fe fe62 	bl	800d3e4 <_Bfree>
 800e720:	4629      	mov	r1, r5
 800e722:	4620      	mov	r0, r4
 800e724:	f7fe fe5e 	bl	800d3e4 <_Bfree>
 800e728:	e609      	b.n	800e33e <_strtod_l+0x646>
 800e72a:	f1b8 0f01 	cmp.w	r8, #1
 800e72e:	d103      	bne.n	800e738 <_strtod_l+0xa40>
 800e730:	f1b9 0f00 	cmp.w	r9, #0
 800e734:	f43f ad95 	beq.w	800e262 <_strtod_l+0x56a>
 800e738:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e890 <_strtod_l+0xb98>
 800e73c:	4f60      	ldr	r7, [pc, #384]	; (800e8c0 <_strtod_l+0xbc8>)
 800e73e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e742:	2600      	movs	r6, #0
 800e744:	e7ae      	b.n	800e6a4 <_strtod_l+0x9ac>
 800e746:	4f5f      	ldr	r7, [pc, #380]	; (800e8c4 <_strtod_l+0xbcc>)
 800e748:	2600      	movs	r6, #0
 800e74a:	e7a7      	b.n	800e69c <_strtod_l+0x9a4>
 800e74c:	4b5d      	ldr	r3, [pc, #372]	; (800e8c4 <_strtod_l+0xbcc>)
 800e74e:	4630      	mov	r0, r6
 800e750:	4639      	mov	r1, r7
 800e752:	2200      	movs	r2, #0
 800e754:	f7f1 ff50 	bl	80005f8 <__aeabi_dmul>
 800e758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e75a:	4606      	mov	r6, r0
 800e75c:	460f      	mov	r7, r1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d09c      	beq.n	800e69c <_strtod_l+0x9a4>
 800e762:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e766:	e79d      	b.n	800e6a4 <_strtod_l+0x9ac>
 800e768:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e898 <_strtod_l+0xba0>
 800e76c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e770:	ec57 6b17 	vmov	r6, r7, d7
 800e774:	e796      	b.n	800e6a4 <_strtod_l+0x9ac>
 800e776:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e77a:	9b04      	ldr	r3, [sp, #16]
 800e77c:	46ca      	mov	sl, r9
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1c2      	bne.n	800e708 <_strtod_l+0xa10>
 800e782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e788:	0d1b      	lsrs	r3, r3, #20
 800e78a:	051b      	lsls	r3, r3, #20
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d1bb      	bne.n	800e708 <_strtod_l+0xa10>
 800e790:	4630      	mov	r0, r6
 800e792:	4639      	mov	r1, r7
 800e794:	f7f2 fa90 	bl	8000cb8 <__aeabi_d2lz>
 800e798:	f7f1 ff00 	bl	800059c <__aeabi_l2d>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	f7f1 fd70 	bl	8000288 <__aeabi_dsub>
 800e7a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7ae:	ea43 0308 	orr.w	r3, r3, r8
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	460f      	mov	r7, r1
 800e7b8:	d054      	beq.n	800e864 <_strtod_l+0xb6c>
 800e7ba:	a339      	add	r3, pc, #228	; (adr r3, 800e8a0 <_strtod_l+0xba8>)
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	f7f2 f98c 	bl	8000adc <__aeabi_dcmplt>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	f47f ace5 	bne.w	800e194 <_strtod_l+0x49c>
 800e7ca:	a337      	add	r3, pc, #220	; (adr r3, 800e8a8 <_strtod_l+0xbb0>)
 800e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f2 f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d095      	beq.n	800e708 <_strtod_l+0xa10>
 800e7dc:	e4da      	b.n	800e194 <_strtod_l+0x49c>
 800e7de:	9b04      	ldr	r3, [sp, #16]
 800e7e0:	b333      	cbz	r3, 800e830 <_strtod_l+0xb38>
 800e7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e7e8:	d822      	bhi.n	800e830 <_strtod_l+0xb38>
 800e7ea:	a331      	add	r3, pc, #196	; (adr r3, 800e8b0 <_strtod_l+0xbb8>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f2 f97c 	bl	8000af0 <__aeabi_dcmple>
 800e7f8:	b1a0      	cbz	r0, 800e824 <_strtod_l+0xb2c>
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	f7f2 f9d3 	bl	8000ba8 <__aeabi_d2uiz>
 800e802:	2801      	cmp	r0, #1
 800e804:	bf38      	it	cc
 800e806:	2001      	movcc	r0, #1
 800e808:	f7f1 fe7c 	bl	8000504 <__aeabi_ui2d>
 800e80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e80e:	4606      	mov	r6, r0
 800e810:	460f      	mov	r7, r1
 800e812:	bb23      	cbnz	r3, 800e85e <_strtod_l+0xb66>
 800e814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e818:	9010      	str	r0, [sp, #64]	; 0x40
 800e81a:	9311      	str	r3, [sp, #68]	; 0x44
 800e81c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e820:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e828:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e82c:	1a9b      	subs	r3, r3, r2
 800e82e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e830:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e834:	eeb0 0a48 	vmov.f32	s0, s16
 800e838:	eef0 0a68 	vmov.f32	s1, s17
 800e83c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e840:	f7ff f8fc 	bl	800da3c <__ulp>
 800e844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e848:	ec53 2b10 	vmov	r2, r3, d0
 800e84c:	f7f1 fed4 	bl	80005f8 <__aeabi_dmul>
 800e850:	ec53 2b18 	vmov	r2, r3, d8
 800e854:	f7f1 fd1a 	bl	800028c <__adddf3>
 800e858:	4680      	mov	r8, r0
 800e85a:	4689      	mov	r9, r1
 800e85c:	e78d      	b.n	800e77a <_strtod_l+0xa82>
 800e85e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e862:	e7db      	b.n	800e81c <_strtod_l+0xb24>
 800e864:	a314      	add	r3, pc, #80	; (adr r3, 800e8b8 <_strtod_l+0xbc0>)
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	f7f2 f937 	bl	8000adc <__aeabi_dcmplt>
 800e86e:	e7b3      	b.n	800e7d8 <_strtod_l+0xae0>
 800e870:	2300      	movs	r3, #0
 800e872:	930a      	str	r3, [sp, #40]	; 0x28
 800e874:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e878:	6013      	str	r3, [r2, #0]
 800e87a:	f7ff ba7c 	b.w	800dd76 <_strtod_l+0x7e>
 800e87e:	2a65      	cmp	r2, #101	; 0x65
 800e880:	f43f ab75 	beq.w	800df6e <_strtod_l+0x276>
 800e884:	2a45      	cmp	r2, #69	; 0x45
 800e886:	f43f ab72 	beq.w	800df6e <_strtod_l+0x276>
 800e88a:	2301      	movs	r3, #1
 800e88c:	f7ff bbaa 	b.w	800dfe4 <_strtod_l+0x2ec>
 800e890:	00000000 	.word	0x00000000
 800e894:	bff00000 	.word	0xbff00000
 800e898:	00000000 	.word	0x00000000
 800e89c:	3ff00000 	.word	0x3ff00000
 800e8a0:	94a03595 	.word	0x94a03595
 800e8a4:	3fdfffff 	.word	0x3fdfffff
 800e8a8:	35afe535 	.word	0x35afe535
 800e8ac:	3fe00000 	.word	0x3fe00000
 800e8b0:	ffc00000 	.word	0xffc00000
 800e8b4:	41dfffff 	.word	0x41dfffff
 800e8b8:	94a03595 	.word	0x94a03595
 800e8bc:	3fcfffff 	.word	0x3fcfffff
 800e8c0:	3ff00000 	.word	0x3ff00000
 800e8c4:	3fe00000 	.word	0x3fe00000
 800e8c8:	7ff00000 	.word	0x7ff00000
 800e8cc:	7fe00000 	.word	0x7fe00000
 800e8d0:	7c9fffff 	.word	0x7c9fffff
 800e8d4:	7fefffff 	.word	0x7fefffff

0800e8d8 <_strtod_r>:
 800e8d8:	4b01      	ldr	r3, [pc, #4]	; (800e8e0 <_strtod_r+0x8>)
 800e8da:	f7ff ba0d 	b.w	800dcf8 <_strtod_l>
 800e8de:	bf00      	nop
 800e8e0:	20000344 	.word	0x20000344

0800e8e4 <_strtol_l.constprop.0>:
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ea:	d001      	beq.n	800e8f0 <_strtol_l.constprop.0+0xc>
 800e8ec:	2b24      	cmp	r3, #36	; 0x24
 800e8ee:	d906      	bls.n	800e8fe <_strtol_l.constprop.0+0x1a>
 800e8f0:	f7fd fd5e 	bl	800c3b0 <__errno>
 800e8f4:	2316      	movs	r3, #22
 800e8f6:	6003      	str	r3, [r0, #0]
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e9e4 <_strtol_l.constprop.0+0x100>
 800e902:	460d      	mov	r5, r1
 800e904:	462e      	mov	r6, r5
 800e906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e90a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e90e:	f017 0708 	ands.w	r7, r7, #8
 800e912:	d1f7      	bne.n	800e904 <_strtol_l.constprop.0+0x20>
 800e914:	2c2d      	cmp	r4, #45	; 0x2d
 800e916:	d132      	bne.n	800e97e <_strtol_l.constprop.0+0x9a>
 800e918:	782c      	ldrb	r4, [r5, #0]
 800e91a:	2701      	movs	r7, #1
 800e91c:	1cb5      	adds	r5, r6, #2
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d05b      	beq.n	800e9da <_strtol_l.constprop.0+0xf6>
 800e922:	2b10      	cmp	r3, #16
 800e924:	d109      	bne.n	800e93a <_strtol_l.constprop.0+0x56>
 800e926:	2c30      	cmp	r4, #48	; 0x30
 800e928:	d107      	bne.n	800e93a <_strtol_l.constprop.0+0x56>
 800e92a:	782c      	ldrb	r4, [r5, #0]
 800e92c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e930:	2c58      	cmp	r4, #88	; 0x58
 800e932:	d14d      	bne.n	800e9d0 <_strtol_l.constprop.0+0xec>
 800e934:	786c      	ldrb	r4, [r5, #1]
 800e936:	2310      	movs	r3, #16
 800e938:	3502      	adds	r5, #2
 800e93a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e93e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e942:	f04f 0e00 	mov.w	lr, #0
 800e946:	fbb8 f9f3 	udiv	r9, r8, r3
 800e94a:	4676      	mov	r6, lr
 800e94c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e950:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e954:	f1bc 0f09 	cmp.w	ip, #9
 800e958:	d816      	bhi.n	800e988 <_strtol_l.constprop.0+0xa4>
 800e95a:	4664      	mov	r4, ip
 800e95c:	42a3      	cmp	r3, r4
 800e95e:	dd24      	ble.n	800e9aa <_strtol_l.constprop.0+0xc6>
 800e960:	f1be 3fff 	cmp.w	lr, #4294967295
 800e964:	d008      	beq.n	800e978 <_strtol_l.constprop.0+0x94>
 800e966:	45b1      	cmp	r9, r6
 800e968:	d31c      	bcc.n	800e9a4 <_strtol_l.constprop.0+0xc0>
 800e96a:	d101      	bne.n	800e970 <_strtol_l.constprop.0+0x8c>
 800e96c:	45a2      	cmp	sl, r4
 800e96e:	db19      	blt.n	800e9a4 <_strtol_l.constprop.0+0xc0>
 800e970:	fb06 4603 	mla	r6, r6, r3, r4
 800e974:	f04f 0e01 	mov.w	lr, #1
 800e978:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e97c:	e7e8      	b.n	800e950 <_strtol_l.constprop.0+0x6c>
 800e97e:	2c2b      	cmp	r4, #43	; 0x2b
 800e980:	bf04      	itt	eq
 800e982:	782c      	ldrbeq	r4, [r5, #0]
 800e984:	1cb5      	addeq	r5, r6, #2
 800e986:	e7ca      	b.n	800e91e <_strtol_l.constprop.0+0x3a>
 800e988:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e98c:	f1bc 0f19 	cmp.w	ip, #25
 800e990:	d801      	bhi.n	800e996 <_strtol_l.constprop.0+0xb2>
 800e992:	3c37      	subs	r4, #55	; 0x37
 800e994:	e7e2      	b.n	800e95c <_strtol_l.constprop.0+0x78>
 800e996:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e99a:	f1bc 0f19 	cmp.w	ip, #25
 800e99e:	d804      	bhi.n	800e9aa <_strtol_l.constprop.0+0xc6>
 800e9a0:	3c57      	subs	r4, #87	; 0x57
 800e9a2:	e7db      	b.n	800e95c <_strtol_l.constprop.0+0x78>
 800e9a4:	f04f 3eff 	mov.w	lr, #4294967295
 800e9a8:	e7e6      	b.n	800e978 <_strtol_l.constprop.0+0x94>
 800e9aa:	f1be 3fff 	cmp.w	lr, #4294967295
 800e9ae:	d105      	bne.n	800e9bc <_strtol_l.constprop.0+0xd8>
 800e9b0:	2322      	movs	r3, #34	; 0x22
 800e9b2:	6003      	str	r3, [r0, #0]
 800e9b4:	4646      	mov	r6, r8
 800e9b6:	b942      	cbnz	r2, 800e9ca <_strtol_l.constprop.0+0xe6>
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	e79e      	b.n	800e8fa <_strtol_l.constprop.0+0x16>
 800e9bc:	b107      	cbz	r7, 800e9c0 <_strtol_l.constprop.0+0xdc>
 800e9be:	4276      	negs	r6, r6
 800e9c0:	2a00      	cmp	r2, #0
 800e9c2:	d0f9      	beq.n	800e9b8 <_strtol_l.constprop.0+0xd4>
 800e9c4:	f1be 0f00 	cmp.w	lr, #0
 800e9c8:	d000      	beq.n	800e9cc <_strtol_l.constprop.0+0xe8>
 800e9ca:	1e69      	subs	r1, r5, #1
 800e9cc:	6011      	str	r1, [r2, #0]
 800e9ce:	e7f3      	b.n	800e9b8 <_strtol_l.constprop.0+0xd4>
 800e9d0:	2430      	movs	r4, #48	; 0x30
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1b1      	bne.n	800e93a <_strtol_l.constprop.0+0x56>
 800e9d6:	2308      	movs	r3, #8
 800e9d8:	e7af      	b.n	800e93a <_strtol_l.constprop.0+0x56>
 800e9da:	2c30      	cmp	r4, #48	; 0x30
 800e9dc:	d0a5      	beq.n	800e92a <_strtol_l.constprop.0+0x46>
 800e9de:	230a      	movs	r3, #10
 800e9e0:	e7ab      	b.n	800e93a <_strtol_l.constprop.0+0x56>
 800e9e2:	bf00      	nop
 800e9e4:	08012139 	.word	0x08012139

0800e9e8 <_strtol_r>:
 800e9e8:	f7ff bf7c 	b.w	800e8e4 <_strtol_l.constprop.0>

0800e9ec <__ssputs_r>:
 800e9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9f0:	688e      	ldr	r6, [r1, #8]
 800e9f2:	461f      	mov	r7, r3
 800e9f4:	42be      	cmp	r6, r7
 800e9f6:	680b      	ldr	r3, [r1, #0]
 800e9f8:	4682      	mov	sl, r0
 800e9fa:	460c      	mov	r4, r1
 800e9fc:	4690      	mov	r8, r2
 800e9fe:	d82c      	bhi.n	800ea5a <__ssputs_r+0x6e>
 800ea00:	898a      	ldrh	r2, [r1, #12]
 800ea02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea06:	d026      	beq.n	800ea56 <__ssputs_r+0x6a>
 800ea08:	6965      	ldr	r5, [r4, #20]
 800ea0a:	6909      	ldr	r1, [r1, #16]
 800ea0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea10:	eba3 0901 	sub.w	r9, r3, r1
 800ea14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea18:	1c7b      	adds	r3, r7, #1
 800ea1a:	444b      	add	r3, r9
 800ea1c:	106d      	asrs	r5, r5, #1
 800ea1e:	429d      	cmp	r5, r3
 800ea20:	bf38      	it	cc
 800ea22:	461d      	movcc	r5, r3
 800ea24:	0553      	lsls	r3, r2, #21
 800ea26:	d527      	bpl.n	800ea78 <__ssputs_r+0x8c>
 800ea28:	4629      	mov	r1, r5
 800ea2a:	f7fe fc0f 	bl	800d24c <_malloc_r>
 800ea2e:	4606      	mov	r6, r0
 800ea30:	b360      	cbz	r0, 800ea8c <__ssputs_r+0xa0>
 800ea32:	6921      	ldr	r1, [r4, #16]
 800ea34:	464a      	mov	r2, r9
 800ea36:	f7fd fce7 	bl	800c408 <memcpy>
 800ea3a:	89a3      	ldrh	r3, [r4, #12]
 800ea3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea44:	81a3      	strh	r3, [r4, #12]
 800ea46:	6126      	str	r6, [r4, #16]
 800ea48:	6165      	str	r5, [r4, #20]
 800ea4a:	444e      	add	r6, r9
 800ea4c:	eba5 0509 	sub.w	r5, r5, r9
 800ea50:	6026      	str	r6, [r4, #0]
 800ea52:	60a5      	str	r5, [r4, #8]
 800ea54:	463e      	mov	r6, r7
 800ea56:	42be      	cmp	r6, r7
 800ea58:	d900      	bls.n	800ea5c <__ssputs_r+0x70>
 800ea5a:	463e      	mov	r6, r7
 800ea5c:	6820      	ldr	r0, [r4, #0]
 800ea5e:	4632      	mov	r2, r6
 800ea60:	4641      	mov	r1, r8
 800ea62:	f000 ff14 	bl	800f88e <memmove>
 800ea66:	68a3      	ldr	r3, [r4, #8]
 800ea68:	1b9b      	subs	r3, r3, r6
 800ea6a:	60a3      	str	r3, [r4, #8]
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	4433      	add	r3, r6
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	2000      	movs	r0, #0
 800ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea78:	462a      	mov	r2, r5
 800ea7a:	f001 faf6 	bl	801006a <_realloc_r>
 800ea7e:	4606      	mov	r6, r0
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d1e0      	bne.n	800ea46 <__ssputs_r+0x5a>
 800ea84:	6921      	ldr	r1, [r4, #16]
 800ea86:	4650      	mov	r0, sl
 800ea88:	f7fe fb6c 	bl	800d164 <_free_r>
 800ea8c:	230c      	movs	r3, #12
 800ea8e:	f8ca 3000 	str.w	r3, [sl]
 800ea92:	89a3      	ldrh	r3, [r4, #12]
 800ea94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea98:	81a3      	strh	r3, [r4, #12]
 800ea9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea9e:	e7e9      	b.n	800ea74 <__ssputs_r+0x88>

0800eaa0 <_svfiprintf_r>:
 800eaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa4:	4698      	mov	r8, r3
 800eaa6:	898b      	ldrh	r3, [r1, #12]
 800eaa8:	061b      	lsls	r3, r3, #24
 800eaaa:	b09d      	sub	sp, #116	; 0x74
 800eaac:	4607      	mov	r7, r0
 800eaae:	460d      	mov	r5, r1
 800eab0:	4614      	mov	r4, r2
 800eab2:	d50e      	bpl.n	800ead2 <_svfiprintf_r+0x32>
 800eab4:	690b      	ldr	r3, [r1, #16]
 800eab6:	b963      	cbnz	r3, 800ead2 <_svfiprintf_r+0x32>
 800eab8:	2140      	movs	r1, #64	; 0x40
 800eaba:	f7fe fbc7 	bl	800d24c <_malloc_r>
 800eabe:	6028      	str	r0, [r5, #0]
 800eac0:	6128      	str	r0, [r5, #16]
 800eac2:	b920      	cbnz	r0, 800eace <_svfiprintf_r+0x2e>
 800eac4:	230c      	movs	r3, #12
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	f04f 30ff 	mov.w	r0, #4294967295
 800eacc:	e0d0      	b.n	800ec70 <_svfiprintf_r+0x1d0>
 800eace:	2340      	movs	r3, #64	; 0x40
 800ead0:	616b      	str	r3, [r5, #20]
 800ead2:	2300      	movs	r3, #0
 800ead4:	9309      	str	r3, [sp, #36]	; 0x24
 800ead6:	2320      	movs	r3, #32
 800ead8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800eae0:	2330      	movs	r3, #48	; 0x30
 800eae2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ec88 <_svfiprintf_r+0x1e8>
 800eae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eaea:	f04f 0901 	mov.w	r9, #1
 800eaee:	4623      	mov	r3, r4
 800eaf0:	469a      	mov	sl, r3
 800eaf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaf6:	b10a      	cbz	r2, 800eafc <_svfiprintf_r+0x5c>
 800eaf8:	2a25      	cmp	r2, #37	; 0x25
 800eafa:	d1f9      	bne.n	800eaf0 <_svfiprintf_r+0x50>
 800eafc:	ebba 0b04 	subs.w	fp, sl, r4
 800eb00:	d00b      	beq.n	800eb1a <_svfiprintf_r+0x7a>
 800eb02:	465b      	mov	r3, fp
 800eb04:	4622      	mov	r2, r4
 800eb06:	4629      	mov	r1, r5
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f7ff ff6f 	bl	800e9ec <__ssputs_r>
 800eb0e:	3001      	adds	r0, #1
 800eb10:	f000 80a9 	beq.w	800ec66 <_svfiprintf_r+0x1c6>
 800eb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb16:	445a      	add	r2, fp
 800eb18:	9209      	str	r2, [sp, #36]	; 0x24
 800eb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 80a1 	beq.w	800ec66 <_svfiprintf_r+0x1c6>
 800eb24:	2300      	movs	r3, #0
 800eb26:	f04f 32ff 	mov.w	r2, #4294967295
 800eb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb2e:	f10a 0a01 	add.w	sl, sl, #1
 800eb32:	9304      	str	r3, [sp, #16]
 800eb34:	9307      	str	r3, [sp, #28]
 800eb36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb3a:	931a      	str	r3, [sp, #104]	; 0x68
 800eb3c:	4654      	mov	r4, sl
 800eb3e:	2205      	movs	r2, #5
 800eb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb44:	4850      	ldr	r0, [pc, #320]	; (800ec88 <_svfiprintf_r+0x1e8>)
 800eb46:	f7f1 fb43 	bl	80001d0 <memchr>
 800eb4a:	9a04      	ldr	r2, [sp, #16]
 800eb4c:	b9d8      	cbnz	r0, 800eb86 <_svfiprintf_r+0xe6>
 800eb4e:	06d0      	lsls	r0, r2, #27
 800eb50:	bf44      	itt	mi
 800eb52:	2320      	movmi	r3, #32
 800eb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb58:	0711      	lsls	r1, r2, #28
 800eb5a:	bf44      	itt	mi
 800eb5c:	232b      	movmi	r3, #43	; 0x2b
 800eb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb62:	f89a 3000 	ldrb.w	r3, [sl]
 800eb66:	2b2a      	cmp	r3, #42	; 0x2a
 800eb68:	d015      	beq.n	800eb96 <_svfiprintf_r+0xf6>
 800eb6a:	9a07      	ldr	r2, [sp, #28]
 800eb6c:	4654      	mov	r4, sl
 800eb6e:	2000      	movs	r0, #0
 800eb70:	f04f 0c0a 	mov.w	ip, #10
 800eb74:	4621      	mov	r1, r4
 800eb76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb7a:	3b30      	subs	r3, #48	; 0x30
 800eb7c:	2b09      	cmp	r3, #9
 800eb7e:	d94d      	bls.n	800ec1c <_svfiprintf_r+0x17c>
 800eb80:	b1b0      	cbz	r0, 800ebb0 <_svfiprintf_r+0x110>
 800eb82:	9207      	str	r2, [sp, #28]
 800eb84:	e014      	b.n	800ebb0 <_svfiprintf_r+0x110>
 800eb86:	eba0 0308 	sub.w	r3, r0, r8
 800eb8a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	9304      	str	r3, [sp, #16]
 800eb92:	46a2      	mov	sl, r4
 800eb94:	e7d2      	b.n	800eb3c <_svfiprintf_r+0x9c>
 800eb96:	9b03      	ldr	r3, [sp, #12]
 800eb98:	1d19      	adds	r1, r3, #4
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	9103      	str	r1, [sp, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	bfbb      	ittet	lt
 800eba2:	425b      	neglt	r3, r3
 800eba4:	f042 0202 	orrlt.w	r2, r2, #2
 800eba8:	9307      	strge	r3, [sp, #28]
 800ebaa:	9307      	strlt	r3, [sp, #28]
 800ebac:	bfb8      	it	lt
 800ebae:	9204      	strlt	r2, [sp, #16]
 800ebb0:	7823      	ldrb	r3, [r4, #0]
 800ebb2:	2b2e      	cmp	r3, #46	; 0x2e
 800ebb4:	d10c      	bne.n	800ebd0 <_svfiprintf_r+0x130>
 800ebb6:	7863      	ldrb	r3, [r4, #1]
 800ebb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ebba:	d134      	bne.n	800ec26 <_svfiprintf_r+0x186>
 800ebbc:	9b03      	ldr	r3, [sp, #12]
 800ebbe:	1d1a      	adds	r2, r3, #4
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	9203      	str	r2, [sp, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	bfb8      	it	lt
 800ebc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebcc:	3402      	adds	r4, #2
 800ebce:	9305      	str	r3, [sp, #20]
 800ebd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ec98 <_svfiprintf_r+0x1f8>
 800ebd4:	7821      	ldrb	r1, [r4, #0]
 800ebd6:	2203      	movs	r2, #3
 800ebd8:	4650      	mov	r0, sl
 800ebda:	f7f1 faf9 	bl	80001d0 <memchr>
 800ebde:	b138      	cbz	r0, 800ebf0 <_svfiprintf_r+0x150>
 800ebe0:	9b04      	ldr	r3, [sp, #16]
 800ebe2:	eba0 000a 	sub.w	r0, r0, sl
 800ebe6:	2240      	movs	r2, #64	; 0x40
 800ebe8:	4082      	lsls	r2, r0
 800ebea:	4313      	orrs	r3, r2
 800ebec:	3401      	adds	r4, #1
 800ebee:	9304      	str	r3, [sp, #16]
 800ebf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebf4:	4825      	ldr	r0, [pc, #148]	; (800ec8c <_svfiprintf_r+0x1ec>)
 800ebf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebfa:	2206      	movs	r2, #6
 800ebfc:	f7f1 fae8 	bl	80001d0 <memchr>
 800ec00:	2800      	cmp	r0, #0
 800ec02:	d038      	beq.n	800ec76 <_svfiprintf_r+0x1d6>
 800ec04:	4b22      	ldr	r3, [pc, #136]	; (800ec90 <_svfiprintf_r+0x1f0>)
 800ec06:	bb1b      	cbnz	r3, 800ec50 <_svfiprintf_r+0x1b0>
 800ec08:	9b03      	ldr	r3, [sp, #12]
 800ec0a:	3307      	adds	r3, #7
 800ec0c:	f023 0307 	bic.w	r3, r3, #7
 800ec10:	3308      	adds	r3, #8
 800ec12:	9303      	str	r3, [sp, #12]
 800ec14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec16:	4433      	add	r3, r6
 800ec18:	9309      	str	r3, [sp, #36]	; 0x24
 800ec1a:	e768      	b.n	800eaee <_svfiprintf_r+0x4e>
 800ec1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec20:	460c      	mov	r4, r1
 800ec22:	2001      	movs	r0, #1
 800ec24:	e7a6      	b.n	800eb74 <_svfiprintf_r+0xd4>
 800ec26:	2300      	movs	r3, #0
 800ec28:	3401      	adds	r4, #1
 800ec2a:	9305      	str	r3, [sp, #20]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	f04f 0c0a 	mov.w	ip, #10
 800ec32:	4620      	mov	r0, r4
 800ec34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec38:	3a30      	subs	r2, #48	; 0x30
 800ec3a:	2a09      	cmp	r2, #9
 800ec3c:	d903      	bls.n	800ec46 <_svfiprintf_r+0x1a6>
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d0c6      	beq.n	800ebd0 <_svfiprintf_r+0x130>
 800ec42:	9105      	str	r1, [sp, #20]
 800ec44:	e7c4      	b.n	800ebd0 <_svfiprintf_r+0x130>
 800ec46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e7f0      	b.n	800ec32 <_svfiprintf_r+0x192>
 800ec50:	ab03      	add	r3, sp, #12
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	462a      	mov	r2, r5
 800ec56:	4b0f      	ldr	r3, [pc, #60]	; (800ec94 <_svfiprintf_r+0x1f4>)
 800ec58:	a904      	add	r1, sp, #16
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	f7fc fb02 	bl	800b264 <_printf_float>
 800ec60:	1c42      	adds	r2, r0, #1
 800ec62:	4606      	mov	r6, r0
 800ec64:	d1d6      	bne.n	800ec14 <_svfiprintf_r+0x174>
 800ec66:	89ab      	ldrh	r3, [r5, #12]
 800ec68:	065b      	lsls	r3, r3, #25
 800ec6a:	f53f af2d 	bmi.w	800eac8 <_svfiprintf_r+0x28>
 800ec6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec70:	b01d      	add	sp, #116	; 0x74
 800ec72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec76:	ab03      	add	r3, sp, #12
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	462a      	mov	r2, r5
 800ec7c:	4b05      	ldr	r3, [pc, #20]	; (800ec94 <_svfiprintf_r+0x1f4>)
 800ec7e:	a904      	add	r1, sp, #16
 800ec80:	4638      	mov	r0, r7
 800ec82:	f7fc fd93 	bl	800b7ac <_printf_i>
 800ec86:	e7eb      	b.n	800ec60 <_svfiprintf_r+0x1c0>
 800ec88:	08012239 	.word	0x08012239
 800ec8c:	08012243 	.word	0x08012243
 800ec90:	0800b265 	.word	0x0800b265
 800ec94:	0800e9ed 	.word	0x0800e9ed
 800ec98:	0801223f 	.word	0x0801223f

0800ec9c <_sungetc_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	1c4b      	adds	r3, r1, #1
 800eca0:	4614      	mov	r4, r2
 800eca2:	d103      	bne.n	800ecac <_sungetc_r+0x10>
 800eca4:	f04f 35ff 	mov.w	r5, #4294967295
 800eca8:	4628      	mov	r0, r5
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	8993      	ldrh	r3, [r2, #12]
 800ecae:	f023 0320 	bic.w	r3, r3, #32
 800ecb2:	8193      	strh	r3, [r2, #12]
 800ecb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecb6:	6852      	ldr	r2, [r2, #4]
 800ecb8:	b2cd      	uxtb	r5, r1
 800ecba:	b18b      	cbz	r3, 800ece0 <_sungetc_r+0x44>
 800ecbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	dd08      	ble.n	800ecd4 <_sungetc_r+0x38>
 800ecc2:	6823      	ldr	r3, [r4, #0]
 800ecc4:	1e5a      	subs	r2, r3, #1
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800eccc:	6863      	ldr	r3, [r4, #4]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	6063      	str	r3, [r4, #4]
 800ecd2:	e7e9      	b.n	800eca8 <_sungetc_r+0xc>
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	f000 fda0 	bl	800f81a <__submore>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d0f1      	beq.n	800ecc2 <_sungetc_r+0x26>
 800ecde:	e7e1      	b.n	800eca4 <_sungetc_r+0x8>
 800ece0:	6921      	ldr	r1, [r4, #16]
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	b151      	cbz	r1, 800ecfc <_sungetc_r+0x60>
 800ece6:	4299      	cmp	r1, r3
 800ece8:	d208      	bcs.n	800ecfc <_sungetc_r+0x60>
 800ecea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ecee:	42a9      	cmp	r1, r5
 800ecf0:	d104      	bne.n	800ecfc <_sungetc_r+0x60>
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	3201      	adds	r2, #1
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	6062      	str	r2, [r4, #4]
 800ecfa:	e7d5      	b.n	800eca8 <_sungetc_r+0xc>
 800ecfc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ed00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed04:	6363      	str	r3, [r4, #52]	; 0x34
 800ed06:	2303      	movs	r3, #3
 800ed08:	63a3      	str	r3, [r4, #56]	; 0x38
 800ed0a:	4623      	mov	r3, r4
 800ed0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	2301      	movs	r3, #1
 800ed14:	e7dc      	b.n	800ecd0 <_sungetc_r+0x34>

0800ed16 <__ssrefill_r>:
 800ed16:	b510      	push	{r4, lr}
 800ed18:	460c      	mov	r4, r1
 800ed1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ed1c:	b169      	cbz	r1, 800ed3a <__ssrefill_r+0x24>
 800ed1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed22:	4299      	cmp	r1, r3
 800ed24:	d001      	beq.n	800ed2a <__ssrefill_r+0x14>
 800ed26:	f7fe fa1d 	bl	800d164 <_free_r>
 800ed2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed2c:	6063      	str	r3, [r4, #4]
 800ed2e:	2000      	movs	r0, #0
 800ed30:	6360      	str	r0, [r4, #52]	; 0x34
 800ed32:	b113      	cbz	r3, 800ed3a <__ssrefill_r+0x24>
 800ed34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	6923      	ldr	r3, [r4, #16]
 800ed3c:	6023      	str	r3, [r4, #0]
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	f043 0320 	orr.w	r3, r3, #32
 800ed48:	81a3      	strh	r3, [r4, #12]
 800ed4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4e:	e7f3      	b.n	800ed38 <__ssrefill_r+0x22>

0800ed50 <__ssvfiscanf_r>:
 800ed50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed54:	460c      	mov	r4, r1
 800ed56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ed60:	49a6      	ldr	r1, [pc, #664]	; (800effc <__ssvfiscanf_r+0x2ac>)
 800ed62:	91a0      	str	r1, [sp, #640]	; 0x280
 800ed64:	f10d 0804 	add.w	r8, sp, #4
 800ed68:	49a5      	ldr	r1, [pc, #660]	; (800f000 <__ssvfiscanf_r+0x2b0>)
 800ed6a:	4fa6      	ldr	r7, [pc, #664]	; (800f004 <__ssvfiscanf_r+0x2b4>)
 800ed6c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f008 <__ssvfiscanf_r+0x2b8>
 800ed70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ed74:	4606      	mov	r6, r0
 800ed76:	91a1      	str	r1, [sp, #644]	; 0x284
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	7813      	ldrb	r3, [r2, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f000 815a 	beq.w	800f036 <__ssvfiscanf_r+0x2e6>
 800ed82:	5cf9      	ldrb	r1, [r7, r3]
 800ed84:	f011 0108 	ands.w	r1, r1, #8
 800ed88:	f102 0501 	add.w	r5, r2, #1
 800ed8c:	d019      	beq.n	800edc2 <__ssvfiscanf_r+0x72>
 800ed8e:	6863      	ldr	r3, [r4, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	dd0f      	ble.n	800edb4 <__ssvfiscanf_r+0x64>
 800ed94:	6823      	ldr	r3, [r4, #0]
 800ed96:	781a      	ldrb	r2, [r3, #0]
 800ed98:	5cba      	ldrb	r2, [r7, r2]
 800ed9a:	0712      	lsls	r2, r2, #28
 800ed9c:	d401      	bmi.n	800eda2 <__ssvfiscanf_r+0x52>
 800ed9e:	462a      	mov	r2, r5
 800eda0:	e7eb      	b.n	800ed7a <__ssvfiscanf_r+0x2a>
 800eda2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800eda4:	3201      	adds	r2, #1
 800eda6:	9245      	str	r2, [sp, #276]	; 0x114
 800eda8:	6862      	ldr	r2, [r4, #4]
 800edaa:	3301      	adds	r3, #1
 800edac:	3a01      	subs	r2, #1
 800edae:	6062      	str	r2, [r4, #4]
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	e7ec      	b.n	800ed8e <__ssvfiscanf_r+0x3e>
 800edb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800edb6:	4621      	mov	r1, r4
 800edb8:	4630      	mov	r0, r6
 800edba:	4798      	blx	r3
 800edbc:	2800      	cmp	r0, #0
 800edbe:	d0e9      	beq.n	800ed94 <__ssvfiscanf_r+0x44>
 800edc0:	e7ed      	b.n	800ed9e <__ssvfiscanf_r+0x4e>
 800edc2:	2b25      	cmp	r3, #37	; 0x25
 800edc4:	d012      	beq.n	800edec <__ssvfiscanf_r+0x9c>
 800edc6:	469a      	mov	sl, r3
 800edc8:	6863      	ldr	r3, [r4, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f340 8091 	ble.w	800eef2 <__ssvfiscanf_r+0x1a2>
 800edd0:	6822      	ldr	r2, [r4, #0]
 800edd2:	7813      	ldrb	r3, [r2, #0]
 800edd4:	4553      	cmp	r3, sl
 800edd6:	f040 812e 	bne.w	800f036 <__ssvfiscanf_r+0x2e6>
 800edda:	6863      	ldr	r3, [r4, #4]
 800eddc:	3b01      	subs	r3, #1
 800edde:	6063      	str	r3, [r4, #4]
 800ede0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ede2:	3201      	adds	r2, #1
 800ede4:	3301      	adds	r3, #1
 800ede6:	6022      	str	r2, [r4, #0]
 800ede8:	9345      	str	r3, [sp, #276]	; 0x114
 800edea:	e7d8      	b.n	800ed9e <__ssvfiscanf_r+0x4e>
 800edec:	9141      	str	r1, [sp, #260]	; 0x104
 800edee:	9143      	str	r1, [sp, #268]	; 0x10c
 800edf0:	7853      	ldrb	r3, [r2, #1]
 800edf2:	2b2a      	cmp	r3, #42	; 0x2a
 800edf4:	bf02      	ittt	eq
 800edf6:	2310      	moveq	r3, #16
 800edf8:	1c95      	addeq	r5, r2, #2
 800edfa:	9341      	streq	r3, [sp, #260]	; 0x104
 800edfc:	220a      	movs	r2, #10
 800edfe:	46aa      	mov	sl, r5
 800ee00:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ee04:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ee08:	2b09      	cmp	r3, #9
 800ee0a:	d91c      	bls.n	800ee46 <__ssvfiscanf_r+0xf6>
 800ee0c:	487e      	ldr	r0, [pc, #504]	; (800f008 <__ssvfiscanf_r+0x2b8>)
 800ee0e:	2203      	movs	r2, #3
 800ee10:	f7f1 f9de 	bl	80001d0 <memchr>
 800ee14:	b138      	cbz	r0, 800ee26 <__ssvfiscanf_r+0xd6>
 800ee16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ee18:	eba0 0009 	sub.w	r0, r0, r9
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	4083      	lsls	r3, r0
 800ee20:	4313      	orrs	r3, r2
 800ee22:	9341      	str	r3, [sp, #260]	; 0x104
 800ee24:	4655      	mov	r5, sl
 800ee26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee2a:	2b78      	cmp	r3, #120	; 0x78
 800ee2c:	d806      	bhi.n	800ee3c <__ssvfiscanf_r+0xec>
 800ee2e:	2b57      	cmp	r3, #87	; 0x57
 800ee30:	d810      	bhi.n	800ee54 <__ssvfiscanf_r+0x104>
 800ee32:	2b25      	cmp	r3, #37	; 0x25
 800ee34:	d0c7      	beq.n	800edc6 <__ssvfiscanf_r+0x76>
 800ee36:	d857      	bhi.n	800eee8 <__ssvfiscanf_r+0x198>
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d065      	beq.n	800ef08 <__ssvfiscanf_r+0x1b8>
 800ee3c:	2303      	movs	r3, #3
 800ee3e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ee40:	230a      	movs	r3, #10
 800ee42:	9342      	str	r3, [sp, #264]	; 0x108
 800ee44:	e076      	b.n	800ef34 <__ssvfiscanf_r+0x1e4>
 800ee46:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ee48:	fb02 1103 	mla	r1, r2, r3, r1
 800ee4c:	3930      	subs	r1, #48	; 0x30
 800ee4e:	9143      	str	r1, [sp, #268]	; 0x10c
 800ee50:	4655      	mov	r5, sl
 800ee52:	e7d4      	b.n	800edfe <__ssvfiscanf_r+0xae>
 800ee54:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ee58:	2a20      	cmp	r2, #32
 800ee5a:	d8ef      	bhi.n	800ee3c <__ssvfiscanf_r+0xec>
 800ee5c:	a101      	add	r1, pc, #4	; (adr r1, 800ee64 <__ssvfiscanf_r+0x114>)
 800ee5e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ee62:	bf00      	nop
 800ee64:	0800ef17 	.word	0x0800ef17
 800ee68:	0800ee3d 	.word	0x0800ee3d
 800ee6c:	0800ee3d 	.word	0x0800ee3d
 800ee70:	0800ef75 	.word	0x0800ef75
 800ee74:	0800ee3d 	.word	0x0800ee3d
 800ee78:	0800ee3d 	.word	0x0800ee3d
 800ee7c:	0800ee3d 	.word	0x0800ee3d
 800ee80:	0800ee3d 	.word	0x0800ee3d
 800ee84:	0800ee3d 	.word	0x0800ee3d
 800ee88:	0800ee3d 	.word	0x0800ee3d
 800ee8c:	0800ee3d 	.word	0x0800ee3d
 800ee90:	0800ef8b 	.word	0x0800ef8b
 800ee94:	0800ef71 	.word	0x0800ef71
 800ee98:	0800eeef 	.word	0x0800eeef
 800ee9c:	0800eeef 	.word	0x0800eeef
 800eea0:	0800eeef 	.word	0x0800eeef
 800eea4:	0800ee3d 	.word	0x0800ee3d
 800eea8:	0800ef2d 	.word	0x0800ef2d
 800eeac:	0800ee3d 	.word	0x0800ee3d
 800eeb0:	0800ee3d 	.word	0x0800ee3d
 800eeb4:	0800ee3d 	.word	0x0800ee3d
 800eeb8:	0800ee3d 	.word	0x0800ee3d
 800eebc:	0800ef9b 	.word	0x0800ef9b
 800eec0:	0800ef69 	.word	0x0800ef69
 800eec4:	0800ef0f 	.word	0x0800ef0f
 800eec8:	0800ee3d 	.word	0x0800ee3d
 800eecc:	0800ee3d 	.word	0x0800ee3d
 800eed0:	0800ef97 	.word	0x0800ef97
 800eed4:	0800ee3d 	.word	0x0800ee3d
 800eed8:	0800ef71 	.word	0x0800ef71
 800eedc:	0800ee3d 	.word	0x0800ee3d
 800eee0:	0800ee3d 	.word	0x0800ee3d
 800eee4:	0800ef17 	.word	0x0800ef17
 800eee8:	3b45      	subs	r3, #69	; 0x45
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d8a6      	bhi.n	800ee3c <__ssvfiscanf_r+0xec>
 800eeee:	2305      	movs	r3, #5
 800eef0:	e01f      	b.n	800ef32 <__ssvfiscanf_r+0x1e2>
 800eef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eef4:	4621      	mov	r1, r4
 800eef6:	4630      	mov	r0, r6
 800eef8:	4798      	blx	r3
 800eefa:	2800      	cmp	r0, #0
 800eefc:	f43f af68 	beq.w	800edd0 <__ssvfiscanf_r+0x80>
 800ef00:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ef02:	2800      	cmp	r0, #0
 800ef04:	f040 808d 	bne.w	800f022 <__ssvfiscanf_r+0x2d2>
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	e08f      	b.n	800f02e <__ssvfiscanf_r+0x2de>
 800ef0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ef10:	f042 0220 	orr.w	r2, r2, #32
 800ef14:	9241      	str	r2, [sp, #260]	; 0x104
 800ef16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ef18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef1c:	9241      	str	r2, [sp, #260]	; 0x104
 800ef1e:	2210      	movs	r2, #16
 800ef20:	2b6f      	cmp	r3, #111	; 0x6f
 800ef22:	9242      	str	r2, [sp, #264]	; 0x108
 800ef24:	bf34      	ite	cc
 800ef26:	2303      	movcc	r3, #3
 800ef28:	2304      	movcs	r3, #4
 800ef2a:	e002      	b.n	800ef32 <__ssvfiscanf_r+0x1e2>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	9342      	str	r3, [sp, #264]	; 0x108
 800ef30:	2303      	movs	r3, #3
 800ef32:	9347      	str	r3, [sp, #284]	; 0x11c
 800ef34:	6863      	ldr	r3, [r4, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	dd3d      	ble.n	800efb6 <__ssvfiscanf_r+0x266>
 800ef3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ef3c:	0659      	lsls	r1, r3, #25
 800ef3e:	d404      	bmi.n	800ef4a <__ssvfiscanf_r+0x1fa>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	781a      	ldrb	r2, [r3, #0]
 800ef44:	5cba      	ldrb	r2, [r7, r2]
 800ef46:	0712      	lsls	r2, r2, #28
 800ef48:	d43c      	bmi.n	800efc4 <__ssvfiscanf_r+0x274>
 800ef4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	dc4b      	bgt.n	800efe8 <__ssvfiscanf_r+0x298>
 800ef50:	466b      	mov	r3, sp
 800ef52:	4622      	mov	r2, r4
 800ef54:	a941      	add	r1, sp, #260	; 0x104
 800ef56:	4630      	mov	r0, r6
 800ef58:	f000 f9b6 	bl	800f2c8 <_scanf_chars>
 800ef5c:	2801      	cmp	r0, #1
 800ef5e:	d06a      	beq.n	800f036 <__ssvfiscanf_r+0x2e6>
 800ef60:	2802      	cmp	r0, #2
 800ef62:	f47f af1c 	bne.w	800ed9e <__ssvfiscanf_r+0x4e>
 800ef66:	e7cb      	b.n	800ef00 <__ssvfiscanf_r+0x1b0>
 800ef68:	2308      	movs	r3, #8
 800ef6a:	9342      	str	r3, [sp, #264]	; 0x108
 800ef6c:	2304      	movs	r3, #4
 800ef6e:	e7e0      	b.n	800ef32 <__ssvfiscanf_r+0x1e2>
 800ef70:	220a      	movs	r2, #10
 800ef72:	e7d5      	b.n	800ef20 <__ssvfiscanf_r+0x1d0>
 800ef74:	4629      	mov	r1, r5
 800ef76:	4640      	mov	r0, r8
 800ef78:	f000 fc16 	bl	800f7a8 <__sccl>
 800ef7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ef7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef82:	9341      	str	r3, [sp, #260]	; 0x104
 800ef84:	4605      	mov	r5, r0
 800ef86:	2301      	movs	r3, #1
 800ef88:	e7d3      	b.n	800ef32 <__ssvfiscanf_r+0x1e2>
 800ef8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ef8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef90:	9341      	str	r3, [sp, #260]	; 0x104
 800ef92:	2300      	movs	r3, #0
 800ef94:	e7cd      	b.n	800ef32 <__ssvfiscanf_r+0x1e2>
 800ef96:	2302      	movs	r3, #2
 800ef98:	e7cb      	b.n	800ef32 <__ssvfiscanf_r+0x1e2>
 800ef9a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ef9c:	06c3      	lsls	r3, r0, #27
 800ef9e:	f53f aefe 	bmi.w	800ed9e <__ssvfiscanf_r+0x4e>
 800efa2:	9b00      	ldr	r3, [sp, #0]
 800efa4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800efa6:	1d19      	adds	r1, r3, #4
 800efa8:	9100      	str	r1, [sp, #0]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	07c0      	lsls	r0, r0, #31
 800efae:	bf4c      	ite	mi
 800efb0:	801a      	strhmi	r2, [r3, #0]
 800efb2:	601a      	strpl	r2, [r3, #0]
 800efb4:	e6f3      	b.n	800ed9e <__ssvfiscanf_r+0x4e>
 800efb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800efb8:	4621      	mov	r1, r4
 800efba:	4630      	mov	r0, r6
 800efbc:	4798      	blx	r3
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d0bb      	beq.n	800ef3a <__ssvfiscanf_r+0x1ea>
 800efc2:	e79d      	b.n	800ef00 <__ssvfiscanf_r+0x1b0>
 800efc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800efc6:	3201      	adds	r2, #1
 800efc8:	9245      	str	r2, [sp, #276]	; 0x114
 800efca:	6862      	ldr	r2, [r4, #4]
 800efcc:	3a01      	subs	r2, #1
 800efce:	2a00      	cmp	r2, #0
 800efd0:	6062      	str	r2, [r4, #4]
 800efd2:	dd02      	ble.n	800efda <__ssvfiscanf_r+0x28a>
 800efd4:	3301      	adds	r3, #1
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	e7b2      	b.n	800ef40 <__ssvfiscanf_r+0x1f0>
 800efda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800efdc:	4621      	mov	r1, r4
 800efde:	4630      	mov	r0, r6
 800efe0:	4798      	blx	r3
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d0ac      	beq.n	800ef40 <__ssvfiscanf_r+0x1f0>
 800efe6:	e78b      	b.n	800ef00 <__ssvfiscanf_r+0x1b0>
 800efe8:	2b04      	cmp	r3, #4
 800efea:	dc0f      	bgt.n	800f00c <__ssvfiscanf_r+0x2bc>
 800efec:	466b      	mov	r3, sp
 800efee:	4622      	mov	r2, r4
 800eff0:	a941      	add	r1, sp, #260	; 0x104
 800eff2:	4630      	mov	r0, r6
 800eff4:	f000 f9c2 	bl	800f37c <_scanf_i>
 800eff8:	e7b0      	b.n	800ef5c <__ssvfiscanf_r+0x20c>
 800effa:	bf00      	nop
 800effc:	0800ec9d 	.word	0x0800ec9d
 800f000:	0800ed17 	.word	0x0800ed17
 800f004:	08012139 	.word	0x08012139
 800f008:	0801223f 	.word	0x0801223f
 800f00c:	4b0b      	ldr	r3, [pc, #44]	; (800f03c <__ssvfiscanf_r+0x2ec>)
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f43f aec5 	beq.w	800ed9e <__ssvfiscanf_r+0x4e>
 800f014:	466b      	mov	r3, sp
 800f016:	4622      	mov	r2, r4
 800f018:	a941      	add	r1, sp, #260	; 0x104
 800f01a:	4630      	mov	r0, r6
 800f01c:	f7fc fce8 	bl	800b9f0 <_scanf_float>
 800f020:	e79c      	b.n	800ef5c <__ssvfiscanf_r+0x20c>
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f028:	bf18      	it	ne
 800f02a:	f04f 30ff 	movne.w	r0, #4294967295
 800f02e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f036:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f038:	e7f9      	b.n	800f02e <__ssvfiscanf_r+0x2de>
 800f03a:	bf00      	nop
 800f03c:	0800b9f1 	.word	0x0800b9f1

0800f040 <__sfputc_r>:
 800f040:	6893      	ldr	r3, [r2, #8]
 800f042:	3b01      	subs	r3, #1
 800f044:	2b00      	cmp	r3, #0
 800f046:	b410      	push	{r4}
 800f048:	6093      	str	r3, [r2, #8]
 800f04a:	da08      	bge.n	800f05e <__sfputc_r+0x1e>
 800f04c:	6994      	ldr	r4, [r2, #24]
 800f04e:	42a3      	cmp	r3, r4
 800f050:	db01      	blt.n	800f056 <__sfputc_r+0x16>
 800f052:	290a      	cmp	r1, #10
 800f054:	d103      	bne.n	800f05e <__sfputc_r+0x1e>
 800f056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f05a:	f7fd b8c1 	b.w	800c1e0 <__swbuf_r>
 800f05e:	6813      	ldr	r3, [r2, #0]
 800f060:	1c58      	adds	r0, r3, #1
 800f062:	6010      	str	r0, [r2, #0]
 800f064:	7019      	strb	r1, [r3, #0]
 800f066:	4608      	mov	r0, r1
 800f068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <__sfputs_r>:
 800f06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f070:	4606      	mov	r6, r0
 800f072:	460f      	mov	r7, r1
 800f074:	4614      	mov	r4, r2
 800f076:	18d5      	adds	r5, r2, r3
 800f078:	42ac      	cmp	r4, r5
 800f07a:	d101      	bne.n	800f080 <__sfputs_r+0x12>
 800f07c:	2000      	movs	r0, #0
 800f07e:	e007      	b.n	800f090 <__sfputs_r+0x22>
 800f080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f084:	463a      	mov	r2, r7
 800f086:	4630      	mov	r0, r6
 800f088:	f7ff ffda 	bl	800f040 <__sfputc_r>
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	d1f3      	bne.n	800f078 <__sfputs_r+0xa>
 800f090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f094 <_vfiprintf_r>:
 800f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f098:	460d      	mov	r5, r1
 800f09a:	b09d      	sub	sp, #116	; 0x74
 800f09c:	4614      	mov	r4, r2
 800f09e:	4698      	mov	r8, r3
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	b118      	cbz	r0, 800f0ac <_vfiprintf_r+0x18>
 800f0a4:	6a03      	ldr	r3, [r0, #32]
 800f0a6:	b90b      	cbnz	r3, 800f0ac <_vfiprintf_r+0x18>
 800f0a8:	f7fc ff2c 	bl	800bf04 <__sinit>
 800f0ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0ae:	07d9      	lsls	r1, r3, #31
 800f0b0:	d405      	bmi.n	800f0be <_vfiprintf_r+0x2a>
 800f0b2:	89ab      	ldrh	r3, [r5, #12]
 800f0b4:	059a      	lsls	r2, r3, #22
 800f0b6:	d402      	bmi.n	800f0be <_vfiprintf_r+0x2a>
 800f0b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0ba:	f7fd f9a3 	bl	800c404 <__retarget_lock_acquire_recursive>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	071b      	lsls	r3, r3, #28
 800f0c2:	d501      	bpl.n	800f0c8 <_vfiprintf_r+0x34>
 800f0c4:	692b      	ldr	r3, [r5, #16]
 800f0c6:	b99b      	cbnz	r3, 800f0f0 <_vfiprintf_r+0x5c>
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f7fd f8c6 	bl	800c25c <__swsetup_r>
 800f0d0:	b170      	cbz	r0, 800f0f0 <_vfiprintf_r+0x5c>
 800f0d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0d4:	07dc      	lsls	r4, r3, #31
 800f0d6:	d504      	bpl.n	800f0e2 <_vfiprintf_r+0x4e>
 800f0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0dc:	b01d      	add	sp, #116	; 0x74
 800f0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e2:	89ab      	ldrh	r3, [r5, #12]
 800f0e4:	0598      	lsls	r0, r3, #22
 800f0e6:	d4f7      	bmi.n	800f0d8 <_vfiprintf_r+0x44>
 800f0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0ea:	f7fd f98c 	bl	800c406 <__retarget_lock_release_recursive>
 800f0ee:	e7f3      	b.n	800f0d8 <_vfiprintf_r+0x44>
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f4:	2320      	movs	r3, #32
 800f0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0fe:	2330      	movs	r3, #48	; 0x30
 800f100:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f2b4 <_vfiprintf_r+0x220>
 800f104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f108:	f04f 0901 	mov.w	r9, #1
 800f10c:	4623      	mov	r3, r4
 800f10e:	469a      	mov	sl, r3
 800f110:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f114:	b10a      	cbz	r2, 800f11a <_vfiprintf_r+0x86>
 800f116:	2a25      	cmp	r2, #37	; 0x25
 800f118:	d1f9      	bne.n	800f10e <_vfiprintf_r+0x7a>
 800f11a:	ebba 0b04 	subs.w	fp, sl, r4
 800f11e:	d00b      	beq.n	800f138 <_vfiprintf_r+0xa4>
 800f120:	465b      	mov	r3, fp
 800f122:	4622      	mov	r2, r4
 800f124:	4629      	mov	r1, r5
 800f126:	4630      	mov	r0, r6
 800f128:	f7ff ffa1 	bl	800f06e <__sfputs_r>
 800f12c:	3001      	adds	r0, #1
 800f12e:	f000 80a9 	beq.w	800f284 <_vfiprintf_r+0x1f0>
 800f132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f134:	445a      	add	r2, fp
 800f136:	9209      	str	r2, [sp, #36]	; 0x24
 800f138:	f89a 3000 	ldrb.w	r3, [sl]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f000 80a1 	beq.w	800f284 <_vfiprintf_r+0x1f0>
 800f142:	2300      	movs	r3, #0
 800f144:	f04f 32ff 	mov.w	r2, #4294967295
 800f148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f14c:	f10a 0a01 	add.w	sl, sl, #1
 800f150:	9304      	str	r3, [sp, #16]
 800f152:	9307      	str	r3, [sp, #28]
 800f154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f158:	931a      	str	r3, [sp, #104]	; 0x68
 800f15a:	4654      	mov	r4, sl
 800f15c:	2205      	movs	r2, #5
 800f15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f162:	4854      	ldr	r0, [pc, #336]	; (800f2b4 <_vfiprintf_r+0x220>)
 800f164:	f7f1 f834 	bl	80001d0 <memchr>
 800f168:	9a04      	ldr	r2, [sp, #16]
 800f16a:	b9d8      	cbnz	r0, 800f1a4 <_vfiprintf_r+0x110>
 800f16c:	06d1      	lsls	r1, r2, #27
 800f16e:	bf44      	itt	mi
 800f170:	2320      	movmi	r3, #32
 800f172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f176:	0713      	lsls	r3, r2, #28
 800f178:	bf44      	itt	mi
 800f17a:	232b      	movmi	r3, #43	; 0x2b
 800f17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f180:	f89a 3000 	ldrb.w	r3, [sl]
 800f184:	2b2a      	cmp	r3, #42	; 0x2a
 800f186:	d015      	beq.n	800f1b4 <_vfiprintf_r+0x120>
 800f188:	9a07      	ldr	r2, [sp, #28]
 800f18a:	4654      	mov	r4, sl
 800f18c:	2000      	movs	r0, #0
 800f18e:	f04f 0c0a 	mov.w	ip, #10
 800f192:	4621      	mov	r1, r4
 800f194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f198:	3b30      	subs	r3, #48	; 0x30
 800f19a:	2b09      	cmp	r3, #9
 800f19c:	d94d      	bls.n	800f23a <_vfiprintf_r+0x1a6>
 800f19e:	b1b0      	cbz	r0, 800f1ce <_vfiprintf_r+0x13a>
 800f1a0:	9207      	str	r2, [sp, #28]
 800f1a2:	e014      	b.n	800f1ce <_vfiprintf_r+0x13a>
 800f1a4:	eba0 0308 	sub.w	r3, r0, r8
 800f1a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	9304      	str	r3, [sp, #16]
 800f1b0:	46a2      	mov	sl, r4
 800f1b2:	e7d2      	b.n	800f15a <_vfiprintf_r+0xc6>
 800f1b4:	9b03      	ldr	r3, [sp, #12]
 800f1b6:	1d19      	adds	r1, r3, #4
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	9103      	str	r1, [sp, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	bfbb      	ittet	lt
 800f1c0:	425b      	neglt	r3, r3
 800f1c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c6:	9307      	strge	r3, [sp, #28]
 800f1c8:	9307      	strlt	r3, [sp, #28]
 800f1ca:	bfb8      	it	lt
 800f1cc:	9204      	strlt	r2, [sp, #16]
 800f1ce:	7823      	ldrb	r3, [r4, #0]
 800f1d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f1d2:	d10c      	bne.n	800f1ee <_vfiprintf_r+0x15a>
 800f1d4:	7863      	ldrb	r3, [r4, #1]
 800f1d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f1d8:	d134      	bne.n	800f244 <_vfiprintf_r+0x1b0>
 800f1da:	9b03      	ldr	r3, [sp, #12]
 800f1dc:	1d1a      	adds	r2, r3, #4
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	9203      	str	r2, [sp, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	bfb8      	it	lt
 800f1e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1ea:	3402      	adds	r4, #2
 800f1ec:	9305      	str	r3, [sp, #20]
 800f1ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f2c4 <_vfiprintf_r+0x230>
 800f1f2:	7821      	ldrb	r1, [r4, #0]
 800f1f4:	2203      	movs	r2, #3
 800f1f6:	4650      	mov	r0, sl
 800f1f8:	f7f0 ffea 	bl	80001d0 <memchr>
 800f1fc:	b138      	cbz	r0, 800f20e <_vfiprintf_r+0x17a>
 800f1fe:	9b04      	ldr	r3, [sp, #16]
 800f200:	eba0 000a 	sub.w	r0, r0, sl
 800f204:	2240      	movs	r2, #64	; 0x40
 800f206:	4082      	lsls	r2, r0
 800f208:	4313      	orrs	r3, r2
 800f20a:	3401      	adds	r4, #1
 800f20c:	9304      	str	r3, [sp, #16]
 800f20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f212:	4829      	ldr	r0, [pc, #164]	; (800f2b8 <_vfiprintf_r+0x224>)
 800f214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f218:	2206      	movs	r2, #6
 800f21a:	f7f0 ffd9 	bl	80001d0 <memchr>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d03f      	beq.n	800f2a2 <_vfiprintf_r+0x20e>
 800f222:	4b26      	ldr	r3, [pc, #152]	; (800f2bc <_vfiprintf_r+0x228>)
 800f224:	bb1b      	cbnz	r3, 800f26e <_vfiprintf_r+0x1da>
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	3307      	adds	r3, #7
 800f22a:	f023 0307 	bic.w	r3, r3, #7
 800f22e:	3308      	adds	r3, #8
 800f230:	9303      	str	r3, [sp, #12]
 800f232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f234:	443b      	add	r3, r7
 800f236:	9309      	str	r3, [sp, #36]	; 0x24
 800f238:	e768      	b.n	800f10c <_vfiprintf_r+0x78>
 800f23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f23e:	460c      	mov	r4, r1
 800f240:	2001      	movs	r0, #1
 800f242:	e7a6      	b.n	800f192 <_vfiprintf_r+0xfe>
 800f244:	2300      	movs	r3, #0
 800f246:	3401      	adds	r4, #1
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	4619      	mov	r1, r3
 800f24c:	f04f 0c0a 	mov.w	ip, #10
 800f250:	4620      	mov	r0, r4
 800f252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f256:	3a30      	subs	r2, #48	; 0x30
 800f258:	2a09      	cmp	r2, #9
 800f25a:	d903      	bls.n	800f264 <_vfiprintf_r+0x1d0>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0c6      	beq.n	800f1ee <_vfiprintf_r+0x15a>
 800f260:	9105      	str	r1, [sp, #20]
 800f262:	e7c4      	b.n	800f1ee <_vfiprintf_r+0x15a>
 800f264:	fb0c 2101 	mla	r1, ip, r1, r2
 800f268:	4604      	mov	r4, r0
 800f26a:	2301      	movs	r3, #1
 800f26c:	e7f0      	b.n	800f250 <_vfiprintf_r+0x1bc>
 800f26e:	ab03      	add	r3, sp, #12
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	462a      	mov	r2, r5
 800f274:	4b12      	ldr	r3, [pc, #72]	; (800f2c0 <_vfiprintf_r+0x22c>)
 800f276:	a904      	add	r1, sp, #16
 800f278:	4630      	mov	r0, r6
 800f27a:	f7fb fff3 	bl	800b264 <_printf_float>
 800f27e:	4607      	mov	r7, r0
 800f280:	1c78      	adds	r0, r7, #1
 800f282:	d1d6      	bne.n	800f232 <_vfiprintf_r+0x19e>
 800f284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f286:	07d9      	lsls	r1, r3, #31
 800f288:	d405      	bmi.n	800f296 <_vfiprintf_r+0x202>
 800f28a:	89ab      	ldrh	r3, [r5, #12]
 800f28c:	059a      	lsls	r2, r3, #22
 800f28e:	d402      	bmi.n	800f296 <_vfiprintf_r+0x202>
 800f290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f292:	f7fd f8b8 	bl	800c406 <__retarget_lock_release_recursive>
 800f296:	89ab      	ldrh	r3, [r5, #12]
 800f298:	065b      	lsls	r3, r3, #25
 800f29a:	f53f af1d 	bmi.w	800f0d8 <_vfiprintf_r+0x44>
 800f29e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2a0:	e71c      	b.n	800f0dc <_vfiprintf_r+0x48>
 800f2a2:	ab03      	add	r3, sp, #12
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	462a      	mov	r2, r5
 800f2a8:	4b05      	ldr	r3, [pc, #20]	; (800f2c0 <_vfiprintf_r+0x22c>)
 800f2aa:	a904      	add	r1, sp, #16
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f7fc fa7d 	bl	800b7ac <_printf_i>
 800f2b2:	e7e4      	b.n	800f27e <_vfiprintf_r+0x1ea>
 800f2b4:	08012239 	.word	0x08012239
 800f2b8:	08012243 	.word	0x08012243
 800f2bc:	0800b265 	.word	0x0800b265
 800f2c0:	0800f06f 	.word	0x0800f06f
 800f2c4:	0801223f 	.word	0x0801223f

0800f2c8 <_scanf_chars>:
 800f2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2cc:	4615      	mov	r5, r2
 800f2ce:	688a      	ldr	r2, [r1, #8]
 800f2d0:	4680      	mov	r8, r0
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	b932      	cbnz	r2, 800f2e4 <_scanf_chars+0x1c>
 800f2d6:	698a      	ldr	r2, [r1, #24]
 800f2d8:	2a00      	cmp	r2, #0
 800f2da:	bf0c      	ite	eq
 800f2dc:	2201      	moveq	r2, #1
 800f2de:	f04f 32ff 	movne.w	r2, #4294967295
 800f2e2:	608a      	str	r2, [r1, #8]
 800f2e4:	6822      	ldr	r2, [r4, #0]
 800f2e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f378 <_scanf_chars+0xb0>
 800f2ea:	06d1      	lsls	r1, r2, #27
 800f2ec:	bf5f      	itttt	pl
 800f2ee:	681a      	ldrpl	r2, [r3, #0]
 800f2f0:	1d11      	addpl	r1, r2, #4
 800f2f2:	6019      	strpl	r1, [r3, #0]
 800f2f4:	6816      	ldrpl	r6, [r2, #0]
 800f2f6:	2700      	movs	r7, #0
 800f2f8:	69a0      	ldr	r0, [r4, #24]
 800f2fa:	b188      	cbz	r0, 800f320 <_scanf_chars+0x58>
 800f2fc:	2801      	cmp	r0, #1
 800f2fe:	d107      	bne.n	800f310 <_scanf_chars+0x48>
 800f300:	682a      	ldr	r2, [r5, #0]
 800f302:	7811      	ldrb	r1, [r2, #0]
 800f304:	6962      	ldr	r2, [r4, #20]
 800f306:	5c52      	ldrb	r2, [r2, r1]
 800f308:	b952      	cbnz	r2, 800f320 <_scanf_chars+0x58>
 800f30a:	2f00      	cmp	r7, #0
 800f30c:	d031      	beq.n	800f372 <_scanf_chars+0xaa>
 800f30e:	e022      	b.n	800f356 <_scanf_chars+0x8e>
 800f310:	2802      	cmp	r0, #2
 800f312:	d120      	bne.n	800f356 <_scanf_chars+0x8e>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f31c:	071b      	lsls	r3, r3, #28
 800f31e:	d41a      	bmi.n	800f356 <_scanf_chars+0x8e>
 800f320:	6823      	ldr	r3, [r4, #0]
 800f322:	06da      	lsls	r2, r3, #27
 800f324:	bf5e      	ittt	pl
 800f326:	682b      	ldrpl	r3, [r5, #0]
 800f328:	781b      	ldrbpl	r3, [r3, #0]
 800f32a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f32e:	682a      	ldr	r2, [r5, #0]
 800f330:	686b      	ldr	r3, [r5, #4]
 800f332:	3201      	adds	r2, #1
 800f334:	602a      	str	r2, [r5, #0]
 800f336:	68a2      	ldr	r2, [r4, #8]
 800f338:	3b01      	subs	r3, #1
 800f33a:	3a01      	subs	r2, #1
 800f33c:	606b      	str	r3, [r5, #4]
 800f33e:	3701      	adds	r7, #1
 800f340:	60a2      	str	r2, [r4, #8]
 800f342:	b142      	cbz	r2, 800f356 <_scanf_chars+0x8e>
 800f344:	2b00      	cmp	r3, #0
 800f346:	dcd7      	bgt.n	800f2f8 <_scanf_chars+0x30>
 800f348:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f34c:	4629      	mov	r1, r5
 800f34e:	4640      	mov	r0, r8
 800f350:	4798      	blx	r3
 800f352:	2800      	cmp	r0, #0
 800f354:	d0d0      	beq.n	800f2f8 <_scanf_chars+0x30>
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	f013 0310 	ands.w	r3, r3, #16
 800f35c:	d105      	bne.n	800f36a <_scanf_chars+0xa2>
 800f35e:	68e2      	ldr	r2, [r4, #12]
 800f360:	3201      	adds	r2, #1
 800f362:	60e2      	str	r2, [r4, #12]
 800f364:	69a2      	ldr	r2, [r4, #24]
 800f366:	b102      	cbz	r2, 800f36a <_scanf_chars+0xa2>
 800f368:	7033      	strb	r3, [r6, #0]
 800f36a:	6923      	ldr	r3, [r4, #16]
 800f36c:	443b      	add	r3, r7
 800f36e:	6123      	str	r3, [r4, #16]
 800f370:	2000      	movs	r0, #0
 800f372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f376:	bf00      	nop
 800f378:	08012139 	.word	0x08012139

0800f37c <_scanf_i>:
 800f37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f380:	4698      	mov	r8, r3
 800f382:	4b74      	ldr	r3, [pc, #464]	; (800f554 <_scanf_i+0x1d8>)
 800f384:	460c      	mov	r4, r1
 800f386:	4682      	mov	sl, r0
 800f388:	4616      	mov	r6, r2
 800f38a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f38e:	b087      	sub	sp, #28
 800f390:	ab03      	add	r3, sp, #12
 800f392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f396:	4b70      	ldr	r3, [pc, #448]	; (800f558 <_scanf_i+0x1dc>)
 800f398:	69a1      	ldr	r1, [r4, #24]
 800f39a:	4a70      	ldr	r2, [pc, #448]	; (800f55c <_scanf_i+0x1e0>)
 800f39c:	2903      	cmp	r1, #3
 800f39e:	bf18      	it	ne
 800f3a0:	461a      	movne	r2, r3
 800f3a2:	68a3      	ldr	r3, [r4, #8]
 800f3a4:	9201      	str	r2, [sp, #4]
 800f3a6:	1e5a      	subs	r2, r3, #1
 800f3a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f3ac:	bf88      	it	hi
 800f3ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f3b2:	4627      	mov	r7, r4
 800f3b4:	bf82      	ittt	hi
 800f3b6:	eb03 0905 	addhi.w	r9, r3, r5
 800f3ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f3be:	60a3      	strhi	r3, [r4, #8]
 800f3c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f3c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f3c8:	bf98      	it	ls
 800f3ca:	f04f 0900 	movls.w	r9, #0
 800f3ce:	6023      	str	r3, [r4, #0]
 800f3d0:	463d      	mov	r5, r7
 800f3d2:	f04f 0b00 	mov.w	fp, #0
 800f3d6:	6831      	ldr	r1, [r6, #0]
 800f3d8:	ab03      	add	r3, sp, #12
 800f3da:	7809      	ldrb	r1, [r1, #0]
 800f3dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f3e0:	2202      	movs	r2, #2
 800f3e2:	f7f0 fef5 	bl	80001d0 <memchr>
 800f3e6:	b328      	cbz	r0, 800f434 <_scanf_i+0xb8>
 800f3e8:	f1bb 0f01 	cmp.w	fp, #1
 800f3ec:	d159      	bne.n	800f4a2 <_scanf_i+0x126>
 800f3ee:	6862      	ldr	r2, [r4, #4]
 800f3f0:	b92a      	cbnz	r2, 800f3fe <_scanf_i+0x82>
 800f3f2:	6822      	ldr	r2, [r4, #0]
 800f3f4:	2308      	movs	r3, #8
 800f3f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3fa:	6063      	str	r3, [r4, #4]
 800f3fc:	6022      	str	r2, [r4, #0]
 800f3fe:	6822      	ldr	r2, [r4, #0]
 800f400:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f404:	6022      	str	r2, [r4, #0]
 800f406:	68a2      	ldr	r2, [r4, #8]
 800f408:	1e51      	subs	r1, r2, #1
 800f40a:	60a1      	str	r1, [r4, #8]
 800f40c:	b192      	cbz	r2, 800f434 <_scanf_i+0xb8>
 800f40e:	6832      	ldr	r2, [r6, #0]
 800f410:	1c51      	adds	r1, r2, #1
 800f412:	6031      	str	r1, [r6, #0]
 800f414:	7812      	ldrb	r2, [r2, #0]
 800f416:	f805 2b01 	strb.w	r2, [r5], #1
 800f41a:	6872      	ldr	r2, [r6, #4]
 800f41c:	3a01      	subs	r2, #1
 800f41e:	2a00      	cmp	r2, #0
 800f420:	6072      	str	r2, [r6, #4]
 800f422:	dc07      	bgt.n	800f434 <_scanf_i+0xb8>
 800f424:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f428:	4631      	mov	r1, r6
 800f42a:	4650      	mov	r0, sl
 800f42c:	4790      	blx	r2
 800f42e:	2800      	cmp	r0, #0
 800f430:	f040 8085 	bne.w	800f53e <_scanf_i+0x1c2>
 800f434:	f10b 0b01 	add.w	fp, fp, #1
 800f438:	f1bb 0f03 	cmp.w	fp, #3
 800f43c:	d1cb      	bne.n	800f3d6 <_scanf_i+0x5a>
 800f43e:	6863      	ldr	r3, [r4, #4]
 800f440:	b90b      	cbnz	r3, 800f446 <_scanf_i+0xca>
 800f442:	230a      	movs	r3, #10
 800f444:	6063      	str	r3, [r4, #4]
 800f446:	6863      	ldr	r3, [r4, #4]
 800f448:	4945      	ldr	r1, [pc, #276]	; (800f560 <_scanf_i+0x1e4>)
 800f44a:	6960      	ldr	r0, [r4, #20]
 800f44c:	1ac9      	subs	r1, r1, r3
 800f44e:	f000 f9ab 	bl	800f7a8 <__sccl>
 800f452:	f04f 0b00 	mov.w	fp, #0
 800f456:	68a3      	ldr	r3, [r4, #8]
 800f458:	6822      	ldr	r2, [r4, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d03d      	beq.n	800f4da <_scanf_i+0x15e>
 800f45e:	6831      	ldr	r1, [r6, #0]
 800f460:	6960      	ldr	r0, [r4, #20]
 800f462:	f891 c000 	ldrb.w	ip, [r1]
 800f466:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d035      	beq.n	800f4da <_scanf_i+0x15e>
 800f46e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f472:	d124      	bne.n	800f4be <_scanf_i+0x142>
 800f474:	0510      	lsls	r0, r2, #20
 800f476:	d522      	bpl.n	800f4be <_scanf_i+0x142>
 800f478:	f10b 0b01 	add.w	fp, fp, #1
 800f47c:	f1b9 0f00 	cmp.w	r9, #0
 800f480:	d003      	beq.n	800f48a <_scanf_i+0x10e>
 800f482:	3301      	adds	r3, #1
 800f484:	f109 39ff 	add.w	r9, r9, #4294967295
 800f488:	60a3      	str	r3, [r4, #8]
 800f48a:	6873      	ldr	r3, [r6, #4]
 800f48c:	3b01      	subs	r3, #1
 800f48e:	2b00      	cmp	r3, #0
 800f490:	6073      	str	r3, [r6, #4]
 800f492:	dd1b      	ble.n	800f4cc <_scanf_i+0x150>
 800f494:	6833      	ldr	r3, [r6, #0]
 800f496:	3301      	adds	r3, #1
 800f498:	6033      	str	r3, [r6, #0]
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	3b01      	subs	r3, #1
 800f49e:	60a3      	str	r3, [r4, #8]
 800f4a0:	e7d9      	b.n	800f456 <_scanf_i+0xda>
 800f4a2:	f1bb 0f02 	cmp.w	fp, #2
 800f4a6:	d1ae      	bne.n	800f406 <_scanf_i+0x8a>
 800f4a8:	6822      	ldr	r2, [r4, #0]
 800f4aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f4ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f4b2:	d1bf      	bne.n	800f434 <_scanf_i+0xb8>
 800f4b4:	2310      	movs	r3, #16
 800f4b6:	6063      	str	r3, [r4, #4]
 800f4b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f4bc:	e7a2      	b.n	800f404 <_scanf_i+0x88>
 800f4be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f4c2:	6022      	str	r2, [r4, #0]
 800f4c4:	780b      	ldrb	r3, [r1, #0]
 800f4c6:	f805 3b01 	strb.w	r3, [r5], #1
 800f4ca:	e7de      	b.n	800f48a <_scanf_i+0x10e>
 800f4cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f4d0:	4631      	mov	r1, r6
 800f4d2:	4650      	mov	r0, sl
 800f4d4:	4798      	blx	r3
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	d0df      	beq.n	800f49a <_scanf_i+0x11e>
 800f4da:	6823      	ldr	r3, [r4, #0]
 800f4dc:	05d9      	lsls	r1, r3, #23
 800f4de:	d50d      	bpl.n	800f4fc <_scanf_i+0x180>
 800f4e0:	42bd      	cmp	r5, r7
 800f4e2:	d909      	bls.n	800f4f8 <_scanf_i+0x17c>
 800f4e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f4e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4ec:	4632      	mov	r2, r6
 800f4ee:	4650      	mov	r0, sl
 800f4f0:	4798      	blx	r3
 800f4f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800f4f6:	464d      	mov	r5, r9
 800f4f8:	42bd      	cmp	r5, r7
 800f4fa:	d028      	beq.n	800f54e <_scanf_i+0x1d2>
 800f4fc:	6822      	ldr	r2, [r4, #0]
 800f4fe:	f012 0210 	ands.w	r2, r2, #16
 800f502:	d113      	bne.n	800f52c <_scanf_i+0x1b0>
 800f504:	702a      	strb	r2, [r5, #0]
 800f506:	6863      	ldr	r3, [r4, #4]
 800f508:	9e01      	ldr	r6, [sp, #4]
 800f50a:	4639      	mov	r1, r7
 800f50c:	4650      	mov	r0, sl
 800f50e:	47b0      	blx	r6
 800f510:	f8d8 3000 	ldr.w	r3, [r8]
 800f514:	6821      	ldr	r1, [r4, #0]
 800f516:	1d1a      	adds	r2, r3, #4
 800f518:	f8c8 2000 	str.w	r2, [r8]
 800f51c:	f011 0f20 	tst.w	r1, #32
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	d00f      	beq.n	800f544 <_scanf_i+0x1c8>
 800f524:	6018      	str	r0, [r3, #0]
 800f526:	68e3      	ldr	r3, [r4, #12]
 800f528:	3301      	adds	r3, #1
 800f52a:	60e3      	str	r3, [r4, #12]
 800f52c:	6923      	ldr	r3, [r4, #16]
 800f52e:	1bed      	subs	r5, r5, r7
 800f530:	445d      	add	r5, fp
 800f532:	442b      	add	r3, r5
 800f534:	6123      	str	r3, [r4, #16]
 800f536:	2000      	movs	r0, #0
 800f538:	b007      	add	sp, #28
 800f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53e:	f04f 0b00 	mov.w	fp, #0
 800f542:	e7ca      	b.n	800f4da <_scanf_i+0x15e>
 800f544:	07ca      	lsls	r2, r1, #31
 800f546:	bf4c      	ite	mi
 800f548:	8018      	strhmi	r0, [r3, #0]
 800f54a:	6018      	strpl	r0, [r3, #0]
 800f54c:	e7eb      	b.n	800f526 <_scanf_i+0x1aa>
 800f54e:	2001      	movs	r0, #1
 800f550:	e7f2      	b.n	800f538 <_scanf_i+0x1bc>
 800f552:	bf00      	nop
 800f554:	08010a4c 	.word	0x08010a4c
 800f558:	080101ad 	.word	0x080101ad
 800f55c:	0800e9e9 	.word	0x0800e9e9
 800f560:	0801225a 	.word	0x0801225a

0800f564 <__sflush_r>:
 800f564:	898a      	ldrh	r2, [r1, #12]
 800f566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f56a:	4605      	mov	r5, r0
 800f56c:	0710      	lsls	r0, r2, #28
 800f56e:	460c      	mov	r4, r1
 800f570:	d458      	bmi.n	800f624 <__sflush_r+0xc0>
 800f572:	684b      	ldr	r3, [r1, #4]
 800f574:	2b00      	cmp	r3, #0
 800f576:	dc05      	bgt.n	800f584 <__sflush_r+0x20>
 800f578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	dc02      	bgt.n	800f584 <__sflush_r+0x20>
 800f57e:	2000      	movs	r0, #0
 800f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f586:	2e00      	cmp	r6, #0
 800f588:	d0f9      	beq.n	800f57e <__sflush_r+0x1a>
 800f58a:	2300      	movs	r3, #0
 800f58c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f590:	682f      	ldr	r7, [r5, #0]
 800f592:	6a21      	ldr	r1, [r4, #32]
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	d032      	beq.n	800f5fe <__sflush_r+0x9a>
 800f598:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f59a:	89a3      	ldrh	r3, [r4, #12]
 800f59c:	075a      	lsls	r2, r3, #29
 800f59e:	d505      	bpl.n	800f5ac <__sflush_r+0x48>
 800f5a0:	6863      	ldr	r3, [r4, #4]
 800f5a2:	1ac0      	subs	r0, r0, r3
 800f5a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5a6:	b10b      	cbz	r3, 800f5ac <__sflush_r+0x48>
 800f5a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5aa:	1ac0      	subs	r0, r0, r3
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5b2:	6a21      	ldr	r1, [r4, #32]
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	47b0      	blx	r6
 800f5b8:	1c43      	adds	r3, r0, #1
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	d106      	bne.n	800f5cc <__sflush_r+0x68>
 800f5be:	6829      	ldr	r1, [r5, #0]
 800f5c0:	291d      	cmp	r1, #29
 800f5c2:	d82b      	bhi.n	800f61c <__sflush_r+0xb8>
 800f5c4:	4a29      	ldr	r2, [pc, #164]	; (800f66c <__sflush_r+0x108>)
 800f5c6:	410a      	asrs	r2, r1
 800f5c8:	07d6      	lsls	r6, r2, #31
 800f5ca:	d427      	bmi.n	800f61c <__sflush_r+0xb8>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	6062      	str	r2, [r4, #4]
 800f5d0:	04d9      	lsls	r1, r3, #19
 800f5d2:	6922      	ldr	r2, [r4, #16]
 800f5d4:	6022      	str	r2, [r4, #0]
 800f5d6:	d504      	bpl.n	800f5e2 <__sflush_r+0x7e>
 800f5d8:	1c42      	adds	r2, r0, #1
 800f5da:	d101      	bne.n	800f5e0 <__sflush_r+0x7c>
 800f5dc:	682b      	ldr	r3, [r5, #0]
 800f5de:	b903      	cbnz	r3, 800f5e2 <__sflush_r+0x7e>
 800f5e0:	6560      	str	r0, [r4, #84]	; 0x54
 800f5e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5e4:	602f      	str	r7, [r5, #0]
 800f5e6:	2900      	cmp	r1, #0
 800f5e8:	d0c9      	beq.n	800f57e <__sflush_r+0x1a>
 800f5ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5ee:	4299      	cmp	r1, r3
 800f5f0:	d002      	beq.n	800f5f8 <__sflush_r+0x94>
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f7fd fdb6 	bl	800d164 <_free_r>
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	6360      	str	r0, [r4, #52]	; 0x34
 800f5fc:	e7c0      	b.n	800f580 <__sflush_r+0x1c>
 800f5fe:	2301      	movs	r3, #1
 800f600:	4628      	mov	r0, r5
 800f602:	47b0      	blx	r6
 800f604:	1c41      	adds	r1, r0, #1
 800f606:	d1c8      	bne.n	800f59a <__sflush_r+0x36>
 800f608:	682b      	ldr	r3, [r5, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d0c5      	beq.n	800f59a <__sflush_r+0x36>
 800f60e:	2b1d      	cmp	r3, #29
 800f610:	d001      	beq.n	800f616 <__sflush_r+0xb2>
 800f612:	2b16      	cmp	r3, #22
 800f614:	d101      	bne.n	800f61a <__sflush_r+0xb6>
 800f616:	602f      	str	r7, [r5, #0]
 800f618:	e7b1      	b.n	800f57e <__sflush_r+0x1a>
 800f61a:	89a3      	ldrh	r3, [r4, #12]
 800f61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f620:	81a3      	strh	r3, [r4, #12]
 800f622:	e7ad      	b.n	800f580 <__sflush_r+0x1c>
 800f624:	690f      	ldr	r7, [r1, #16]
 800f626:	2f00      	cmp	r7, #0
 800f628:	d0a9      	beq.n	800f57e <__sflush_r+0x1a>
 800f62a:	0793      	lsls	r3, r2, #30
 800f62c:	680e      	ldr	r6, [r1, #0]
 800f62e:	bf08      	it	eq
 800f630:	694b      	ldreq	r3, [r1, #20]
 800f632:	600f      	str	r7, [r1, #0]
 800f634:	bf18      	it	ne
 800f636:	2300      	movne	r3, #0
 800f638:	eba6 0807 	sub.w	r8, r6, r7
 800f63c:	608b      	str	r3, [r1, #8]
 800f63e:	f1b8 0f00 	cmp.w	r8, #0
 800f642:	dd9c      	ble.n	800f57e <__sflush_r+0x1a>
 800f644:	6a21      	ldr	r1, [r4, #32]
 800f646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f648:	4643      	mov	r3, r8
 800f64a:	463a      	mov	r2, r7
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b0      	blx	r6
 800f650:	2800      	cmp	r0, #0
 800f652:	dc06      	bgt.n	800f662 <__sflush_r+0xfe>
 800f654:	89a3      	ldrh	r3, [r4, #12]
 800f656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f65a:	81a3      	strh	r3, [r4, #12]
 800f65c:	f04f 30ff 	mov.w	r0, #4294967295
 800f660:	e78e      	b.n	800f580 <__sflush_r+0x1c>
 800f662:	4407      	add	r7, r0
 800f664:	eba8 0800 	sub.w	r8, r8, r0
 800f668:	e7e9      	b.n	800f63e <__sflush_r+0xda>
 800f66a:	bf00      	nop
 800f66c:	dfbffffe 	.word	0xdfbffffe

0800f670 <_fflush_r>:
 800f670:	b538      	push	{r3, r4, r5, lr}
 800f672:	690b      	ldr	r3, [r1, #16]
 800f674:	4605      	mov	r5, r0
 800f676:	460c      	mov	r4, r1
 800f678:	b913      	cbnz	r3, 800f680 <_fflush_r+0x10>
 800f67a:	2500      	movs	r5, #0
 800f67c:	4628      	mov	r0, r5
 800f67e:	bd38      	pop	{r3, r4, r5, pc}
 800f680:	b118      	cbz	r0, 800f68a <_fflush_r+0x1a>
 800f682:	6a03      	ldr	r3, [r0, #32]
 800f684:	b90b      	cbnz	r3, 800f68a <_fflush_r+0x1a>
 800f686:	f7fc fc3d 	bl	800bf04 <__sinit>
 800f68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d0f3      	beq.n	800f67a <_fflush_r+0xa>
 800f692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f694:	07d0      	lsls	r0, r2, #31
 800f696:	d404      	bmi.n	800f6a2 <_fflush_r+0x32>
 800f698:	0599      	lsls	r1, r3, #22
 800f69a:	d402      	bmi.n	800f6a2 <_fflush_r+0x32>
 800f69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f69e:	f7fc feb1 	bl	800c404 <__retarget_lock_acquire_recursive>
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	4621      	mov	r1, r4
 800f6a6:	f7ff ff5d 	bl	800f564 <__sflush_r>
 800f6aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6ac:	07da      	lsls	r2, r3, #31
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	d4e4      	bmi.n	800f67c <_fflush_r+0xc>
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	059b      	lsls	r3, r3, #22
 800f6b6:	d4e1      	bmi.n	800f67c <_fflush_r+0xc>
 800f6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6ba:	f7fc fea4 	bl	800c406 <__retarget_lock_release_recursive>
 800f6be:	e7dd      	b.n	800f67c <_fflush_r+0xc>

0800f6c0 <fiprintf>:
 800f6c0:	b40e      	push	{r1, r2, r3}
 800f6c2:	b503      	push	{r0, r1, lr}
 800f6c4:	4601      	mov	r1, r0
 800f6c6:	ab03      	add	r3, sp, #12
 800f6c8:	4805      	ldr	r0, [pc, #20]	; (800f6e0 <fiprintf+0x20>)
 800f6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ce:	6800      	ldr	r0, [r0, #0]
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	f7ff fcdf 	bl	800f094 <_vfiprintf_r>
 800f6d6:	b002      	add	sp, #8
 800f6d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6dc:	b003      	add	sp, #12
 800f6de:	4770      	bx	lr
 800f6e0:	20000340 	.word	0x20000340

0800f6e4 <__swhatbuf_r>:
 800f6e4:	b570      	push	{r4, r5, r6, lr}
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ec:	2900      	cmp	r1, #0
 800f6ee:	b096      	sub	sp, #88	; 0x58
 800f6f0:	4615      	mov	r5, r2
 800f6f2:	461e      	mov	r6, r3
 800f6f4:	da0d      	bge.n	800f712 <__swhatbuf_r+0x2e>
 800f6f6:	89a3      	ldrh	r3, [r4, #12]
 800f6f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f6fc:	f04f 0100 	mov.w	r1, #0
 800f700:	bf0c      	ite	eq
 800f702:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f706:	2340      	movne	r3, #64	; 0x40
 800f708:	2000      	movs	r0, #0
 800f70a:	6031      	str	r1, [r6, #0]
 800f70c:	602b      	str	r3, [r5, #0]
 800f70e:	b016      	add	sp, #88	; 0x58
 800f710:	bd70      	pop	{r4, r5, r6, pc}
 800f712:	466a      	mov	r2, sp
 800f714:	f000 f8e8 	bl	800f8e8 <_fstat_r>
 800f718:	2800      	cmp	r0, #0
 800f71a:	dbec      	blt.n	800f6f6 <__swhatbuf_r+0x12>
 800f71c:	9901      	ldr	r1, [sp, #4]
 800f71e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f722:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f726:	4259      	negs	r1, r3
 800f728:	4159      	adcs	r1, r3
 800f72a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f72e:	e7eb      	b.n	800f708 <__swhatbuf_r+0x24>

0800f730 <__smakebuf_r>:
 800f730:	898b      	ldrh	r3, [r1, #12]
 800f732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f734:	079d      	lsls	r5, r3, #30
 800f736:	4606      	mov	r6, r0
 800f738:	460c      	mov	r4, r1
 800f73a:	d507      	bpl.n	800f74c <__smakebuf_r+0x1c>
 800f73c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	6123      	str	r3, [r4, #16]
 800f744:	2301      	movs	r3, #1
 800f746:	6163      	str	r3, [r4, #20]
 800f748:	b002      	add	sp, #8
 800f74a:	bd70      	pop	{r4, r5, r6, pc}
 800f74c:	ab01      	add	r3, sp, #4
 800f74e:	466a      	mov	r2, sp
 800f750:	f7ff ffc8 	bl	800f6e4 <__swhatbuf_r>
 800f754:	9900      	ldr	r1, [sp, #0]
 800f756:	4605      	mov	r5, r0
 800f758:	4630      	mov	r0, r6
 800f75a:	f7fd fd77 	bl	800d24c <_malloc_r>
 800f75e:	b948      	cbnz	r0, 800f774 <__smakebuf_r+0x44>
 800f760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f764:	059a      	lsls	r2, r3, #22
 800f766:	d4ef      	bmi.n	800f748 <__smakebuf_r+0x18>
 800f768:	f023 0303 	bic.w	r3, r3, #3
 800f76c:	f043 0302 	orr.w	r3, r3, #2
 800f770:	81a3      	strh	r3, [r4, #12]
 800f772:	e7e3      	b.n	800f73c <__smakebuf_r+0xc>
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	6020      	str	r0, [r4, #0]
 800f778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77c:	81a3      	strh	r3, [r4, #12]
 800f77e:	9b00      	ldr	r3, [sp, #0]
 800f780:	6163      	str	r3, [r4, #20]
 800f782:	9b01      	ldr	r3, [sp, #4]
 800f784:	6120      	str	r0, [r4, #16]
 800f786:	b15b      	cbz	r3, 800f7a0 <__smakebuf_r+0x70>
 800f788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f78c:	4630      	mov	r0, r6
 800f78e:	f000 f8bd 	bl	800f90c <_isatty_r>
 800f792:	b128      	cbz	r0, 800f7a0 <__smakebuf_r+0x70>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	f023 0303 	bic.w	r3, r3, #3
 800f79a:	f043 0301 	orr.w	r3, r3, #1
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	89a3      	ldrh	r3, [r4, #12]
 800f7a2:	431d      	orrs	r5, r3
 800f7a4:	81a5      	strh	r5, [r4, #12]
 800f7a6:	e7cf      	b.n	800f748 <__smakebuf_r+0x18>

0800f7a8 <__sccl>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	780b      	ldrb	r3, [r1, #0]
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	2b5e      	cmp	r3, #94	; 0x5e
 800f7b0:	bf0b      	itete	eq
 800f7b2:	784b      	ldrbeq	r3, [r1, #1]
 800f7b4:	1c4a      	addne	r2, r1, #1
 800f7b6:	1c8a      	addeq	r2, r1, #2
 800f7b8:	2100      	movne	r1, #0
 800f7ba:	bf08      	it	eq
 800f7bc:	2101      	moveq	r1, #1
 800f7be:	3801      	subs	r0, #1
 800f7c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f7c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f7c8:	42a8      	cmp	r0, r5
 800f7ca:	d1fb      	bne.n	800f7c4 <__sccl+0x1c>
 800f7cc:	b90b      	cbnz	r3, 800f7d2 <__sccl+0x2a>
 800f7ce:	1e50      	subs	r0, r2, #1
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
 800f7d2:	f081 0101 	eor.w	r1, r1, #1
 800f7d6:	54e1      	strb	r1, [r4, r3]
 800f7d8:	4610      	mov	r0, r2
 800f7da:	4602      	mov	r2, r0
 800f7dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f7e0:	2d2d      	cmp	r5, #45	; 0x2d
 800f7e2:	d005      	beq.n	800f7f0 <__sccl+0x48>
 800f7e4:	2d5d      	cmp	r5, #93	; 0x5d
 800f7e6:	d016      	beq.n	800f816 <__sccl+0x6e>
 800f7e8:	2d00      	cmp	r5, #0
 800f7ea:	d0f1      	beq.n	800f7d0 <__sccl+0x28>
 800f7ec:	462b      	mov	r3, r5
 800f7ee:	e7f2      	b.n	800f7d6 <__sccl+0x2e>
 800f7f0:	7846      	ldrb	r6, [r0, #1]
 800f7f2:	2e5d      	cmp	r6, #93	; 0x5d
 800f7f4:	d0fa      	beq.n	800f7ec <__sccl+0x44>
 800f7f6:	42b3      	cmp	r3, r6
 800f7f8:	dcf8      	bgt.n	800f7ec <__sccl+0x44>
 800f7fa:	3002      	adds	r0, #2
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	3201      	adds	r2, #1
 800f800:	4296      	cmp	r6, r2
 800f802:	54a1      	strb	r1, [r4, r2]
 800f804:	dcfb      	bgt.n	800f7fe <__sccl+0x56>
 800f806:	1af2      	subs	r2, r6, r3
 800f808:	3a01      	subs	r2, #1
 800f80a:	1c5d      	adds	r5, r3, #1
 800f80c:	42b3      	cmp	r3, r6
 800f80e:	bfa8      	it	ge
 800f810:	2200      	movge	r2, #0
 800f812:	18ab      	adds	r3, r5, r2
 800f814:	e7e1      	b.n	800f7da <__sccl+0x32>
 800f816:	4610      	mov	r0, r2
 800f818:	e7da      	b.n	800f7d0 <__sccl+0x28>

0800f81a <__submore>:
 800f81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81e:	460c      	mov	r4, r1
 800f820:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f826:	4299      	cmp	r1, r3
 800f828:	d11d      	bne.n	800f866 <__submore+0x4c>
 800f82a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f82e:	f7fd fd0d 	bl	800d24c <_malloc_r>
 800f832:	b918      	cbnz	r0, 800f83c <__submore+0x22>
 800f834:	f04f 30ff 	mov.w	r0, #4294967295
 800f838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f840:	63a3      	str	r3, [r4, #56]	; 0x38
 800f842:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f846:	6360      	str	r0, [r4, #52]	; 0x34
 800f848:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f84c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f850:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f854:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f858:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f85c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f860:	6020      	str	r0, [r4, #0]
 800f862:	2000      	movs	r0, #0
 800f864:	e7e8      	b.n	800f838 <__submore+0x1e>
 800f866:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f868:	0077      	lsls	r7, r6, #1
 800f86a:	463a      	mov	r2, r7
 800f86c:	f000 fbfd 	bl	801006a <_realloc_r>
 800f870:	4605      	mov	r5, r0
 800f872:	2800      	cmp	r0, #0
 800f874:	d0de      	beq.n	800f834 <__submore+0x1a>
 800f876:	eb00 0806 	add.w	r8, r0, r6
 800f87a:	4601      	mov	r1, r0
 800f87c:	4632      	mov	r2, r6
 800f87e:	4640      	mov	r0, r8
 800f880:	f7fc fdc2 	bl	800c408 <memcpy>
 800f884:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f888:	f8c4 8000 	str.w	r8, [r4]
 800f88c:	e7e9      	b.n	800f862 <__submore+0x48>

0800f88e <memmove>:
 800f88e:	4288      	cmp	r0, r1
 800f890:	b510      	push	{r4, lr}
 800f892:	eb01 0402 	add.w	r4, r1, r2
 800f896:	d902      	bls.n	800f89e <memmove+0x10>
 800f898:	4284      	cmp	r4, r0
 800f89a:	4623      	mov	r3, r4
 800f89c:	d807      	bhi.n	800f8ae <memmove+0x20>
 800f89e:	1e43      	subs	r3, r0, #1
 800f8a0:	42a1      	cmp	r1, r4
 800f8a2:	d008      	beq.n	800f8b6 <memmove+0x28>
 800f8a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8ac:	e7f8      	b.n	800f8a0 <memmove+0x12>
 800f8ae:	4402      	add	r2, r0
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	428a      	cmp	r2, r1
 800f8b4:	d100      	bne.n	800f8b8 <memmove+0x2a>
 800f8b6:	bd10      	pop	{r4, pc}
 800f8b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f8c0:	e7f7      	b.n	800f8b2 <memmove+0x24>

0800f8c2 <strncmp>:
 800f8c2:	b510      	push	{r4, lr}
 800f8c4:	b16a      	cbz	r2, 800f8e2 <strncmp+0x20>
 800f8c6:	3901      	subs	r1, #1
 800f8c8:	1884      	adds	r4, r0, r2
 800f8ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d103      	bne.n	800f8de <strncmp+0x1c>
 800f8d6:	42a0      	cmp	r0, r4
 800f8d8:	d001      	beq.n	800f8de <strncmp+0x1c>
 800f8da:	2a00      	cmp	r2, #0
 800f8dc:	d1f5      	bne.n	800f8ca <strncmp+0x8>
 800f8de:	1ad0      	subs	r0, r2, r3
 800f8e0:	bd10      	pop	{r4, pc}
 800f8e2:	4610      	mov	r0, r2
 800f8e4:	e7fc      	b.n	800f8e0 <strncmp+0x1e>
	...

0800f8e8 <_fstat_r>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	4d07      	ldr	r5, [pc, #28]	; (800f908 <_fstat_r+0x20>)
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	4608      	mov	r0, r1
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	602b      	str	r3, [r5, #0]
 800f8f6:	f7f5 fa02 	bl	8004cfe <_fstat>
 800f8fa:	1c43      	adds	r3, r0, #1
 800f8fc:	d102      	bne.n	800f904 <_fstat_r+0x1c>
 800f8fe:	682b      	ldr	r3, [r5, #0]
 800f900:	b103      	cbz	r3, 800f904 <_fstat_r+0x1c>
 800f902:	6023      	str	r3, [r4, #0]
 800f904:	bd38      	pop	{r3, r4, r5, pc}
 800f906:	bf00      	nop
 800f908:	20001788 	.word	0x20001788

0800f90c <_isatty_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d06      	ldr	r5, [pc, #24]	; (800f928 <_isatty_r+0x1c>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	602b      	str	r3, [r5, #0]
 800f918:	f7f5 fa01 	bl	8004d1e <_isatty>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_isatty_r+0x1a>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_isatty_r+0x1a>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	20001788 	.word	0x20001788

0800f92c <_sbrk_r>:
 800f92c:	b538      	push	{r3, r4, r5, lr}
 800f92e:	4d06      	ldr	r5, [pc, #24]	; (800f948 <_sbrk_r+0x1c>)
 800f930:	2300      	movs	r3, #0
 800f932:	4604      	mov	r4, r0
 800f934:	4608      	mov	r0, r1
 800f936:	602b      	str	r3, [r5, #0]
 800f938:	f7f5 fa0a 	bl	8004d50 <_sbrk>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	d102      	bne.n	800f946 <_sbrk_r+0x1a>
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	b103      	cbz	r3, 800f946 <_sbrk_r+0x1a>
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	bd38      	pop	{r3, r4, r5, pc}
 800f948:	20001788 	.word	0x20001788
 800f94c:	00000000 	.word	0x00000000

0800f950 <nan>:
 800f950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f958 <nan+0x8>
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	00000000 	.word	0x00000000
 800f95c:	7ff80000 	.word	0x7ff80000

0800f960 <abort>:
 800f960:	b508      	push	{r3, lr}
 800f962:	2006      	movs	r0, #6
 800f964:	f000 fc5a 	bl	801021c <raise>
 800f968:	2001      	movs	r0, #1
 800f96a:	f7f5 f979 	bl	8004c60 <_exit>

0800f96e <_calloc_r>:
 800f96e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f970:	fba1 2402 	umull	r2, r4, r1, r2
 800f974:	b94c      	cbnz	r4, 800f98a <_calloc_r+0x1c>
 800f976:	4611      	mov	r1, r2
 800f978:	9201      	str	r2, [sp, #4]
 800f97a:	f7fd fc67 	bl	800d24c <_malloc_r>
 800f97e:	9a01      	ldr	r2, [sp, #4]
 800f980:	4605      	mov	r5, r0
 800f982:	b930      	cbnz	r0, 800f992 <_calloc_r+0x24>
 800f984:	4628      	mov	r0, r5
 800f986:	b003      	add	sp, #12
 800f988:	bd30      	pop	{r4, r5, pc}
 800f98a:	220c      	movs	r2, #12
 800f98c:	6002      	str	r2, [r0, #0]
 800f98e:	2500      	movs	r5, #0
 800f990:	e7f8      	b.n	800f984 <_calloc_r+0x16>
 800f992:	4621      	mov	r1, r4
 800f994:	f7fc fcba 	bl	800c30c <memset>
 800f998:	e7f4      	b.n	800f984 <_calloc_r+0x16>

0800f99a <rshift>:
 800f99a:	6903      	ldr	r3, [r0, #16]
 800f99c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f9a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9a4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f9a8:	f100 0414 	add.w	r4, r0, #20
 800f9ac:	dd45      	ble.n	800fa3a <rshift+0xa0>
 800f9ae:	f011 011f 	ands.w	r1, r1, #31
 800f9b2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f9b6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f9ba:	d10c      	bne.n	800f9d6 <rshift+0x3c>
 800f9bc:	f100 0710 	add.w	r7, r0, #16
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	42b1      	cmp	r1, r6
 800f9c4:	d334      	bcc.n	800fa30 <rshift+0x96>
 800f9c6:	1a9b      	subs	r3, r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	1eea      	subs	r2, r5, #3
 800f9cc:	4296      	cmp	r6, r2
 800f9ce:	bf38      	it	cc
 800f9d0:	2300      	movcc	r3, #0
 800f9d2:	4423      	add	r3, r4
 800f9d4:	e015      	b.n	800fa02 <rshift+0x68>
 800f9d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f9da:	f1c1 0820 	rsb	r8, r1, #32
 800f9de:	40cf      	lsrs	r7, r1
 800f9e0:	f105 0e04 	add.w	lr, r5, #4
 800f9e4:	46a1      	mov	r9, r4
 800f9e6:	4576      	cmp	r6, lr
 800f9e8:	46f4      	mov	ip, lr
 800f9ea:	d815      	bhi.n	800fa18 <rshift+0x7e>
 800f9ec:	1a9a      	subs	r2, r3, r2
 800f9ee:	0092      	lsls	r2, r2, #2
 800f9f0:	3a04      	subs	r2, #4
 800f9f2:	3501      	adds	r5, #1
 800f9f4:	42ae      	cmp	r6, r5
 800f9f6:	bf38      	it	cc
 800f9f8:	2200      	movcc	r2, #0
 800f9fa:	18a3      	adds	r3, r4, r2
 800f9fc:	50a7      	str	r7, [r4, r2]
 800f9fe:	b107      	cbz	r7, 800fa02 <rshift+0x68>
 800fa00:	3304      	adds	r3, #4
 800fa02:	1b1a      	subs	r2, r3, r4
 800fa04:	42a3      	cmp	r3, r4
 800fa06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fa0a:	bf08      	it	eq
 800fa0c:	2300      	moveq	r3, #0
 800fa0e:	6102      	str	r2, [r0, #16]
 800fa10:	bf08      	it	eq
 800fa12:	6143      	streq	r3, [r0, #20]
 800fa14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa18:	f8dc c000 	ldr.w	ip, [ip]
 800fa1c:	fa0c fc08 	lsl.w	ip, ip, r8
 800fa20:	ea4c 0707 	orr.w	r7, ip, r7
 800fa24:	f849 7b04 	str.w	r7, [r9], #4
 800fa28:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fa2c:	40cf      	lsrs	r7, r1
 800fa2e:	e7da      	b.n	800f9e6 <rshift+0x4c>
 800fa30:	f851 cb04 	ldr.w	ip, [r1], #4
 800fa34:	f847 cf04 	str.w	ip, [r7, #4]!
 800fa38:	e7c3      	b.n	800f9c2 <rshift+0x28>
 800fa3a:	4623      	mov	r3, r4
 800fa3c:	e7e1      	b.n	800fa02 <rshift+0x68>

0800fa3e <__hexdig_fun>:
 800fa3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fa42:	2b09      	cmp	r3, #9
 800fa44:	d802      	bhi.n	800fa4c <__hexdig_fun+0xe>
 800fa46:	3820      	subs	r0, #32
 800fa48:	b2c0      	uxtb	r0, r0
 800fa4a:	4770      	bx	lr
 800fa4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fa50:	2b05      	cmp	r3, #5
 800fa52:	d801      	bhi.n	800fa58 <__hexdig_fun+0x1a>
 800fa54:	3847      	subs	r0, #71	; 0x47
 800fa56:	e7f7      	b.n	800fa48 <__hexdig_fun+0xa>
 800fa58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fa5c:	2b05      	cmp	r3, #5
 800fa5e:	d801      	bhi.n	800fa64 <__hexdig_fun+0x26>
 800fa60:	3827      	subs	r0, #39	; 0x27
 800fa62:	e7f1      	b.n	800fa48 <__hexdig_fun+0xa>
 800fa64:	2000      	movs	r0, #0
 800fa66:	4770      	bx	lr

0800fa68 <__gethex>:
 800fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa6c:	4617      	mov	r7, r2
 800fa6e:	680a      	ldr	r2, [r1, #0]
 800fa70:	b085      	sub	sp, #20
 800fa72:	f102 0b02 	add.w	fp, r2, #2
 800fa76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fa7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fa7e:	4681      	mov	r9, r0
 800fa80:	468a      	mov	sl, r1
 800fa82:	9302      	str	r3, [sp, #8]
 800fa84:	32fe      	adds	r2, #254	; 0xfe
 800fa86:	eb02 030b 	add.w	r3, r2, fp
 800fa8a:	46d8      	mov	r8, fp
 800fa8c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800fa90:	9301      	str	r3, [sp, #4]
 800fa92:	2830      	cmp	r0, #48	; 0x30
 800fa94:	d0f7      	beq.n	800fa86 <__gethex+0x1e>
 800fa96:	f7ff ffd2 	bl	800fa3e <__hexdig_fun>
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d138      	bne.n	800fb12 <__gethex+0xaa>
 800faa0:	49a7      	ldr	r1, [pc, #668]	; (800fd40 <__gethex+0x2d8>)
 800faa2:	2201      	movs	r2, #1
 800faa4:	4640      	mov	r0, r8
 800faa6:	f7ff ff0c 	bl	800f8c2 <strncmp>
 800faaa:	4606      	mov	r6, r0
 800faac:	2800      	cmp	r0, #0
 800faae:	d169      	bne.n	800fb84 <__gethex+0x11c>
 800fab0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800fab4:	465d      	mov	r5, fp
 800fab6:	f7ff ffc2 	bl	800fa3e <__hexdig_fun>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d064      	beq.n	800fb88 <__gethex+0x120>
 800fabe:	465a      	mov	r2, fp
 800fac0:	7810      	ldrb	r0, [r2, #0]
 800fac2:	2830      	cmp	r0, #48	; 0x30
 800fac4:	4690      	mov	r8, r2
 800fac6:	f102 0201 	add.w	r2, r2, #1
 800faca:	d0f9      	beq.n	800fac0 <__gethex+0x58>
 800facc:	f7ff ffb7 	bl	800fa3e <__hexdig_fun>
 800fad0:	2301      	movs	r3, #1
 800fad2:	fab0 f480 	clz	r4, r0
 800fad6:	0964      	lsrs	r4, r4, #5
 800fad8:	465e      	mov	r6, fp
 800fada:	9301      	str	r3, [sp, #4]
 800fadc:	4642      	mov	r2, r8
 800fade:	4615      	mov	r5, r2
 800fae0:	3201      	adds	r2, #1
 800fae2:	7828      	ldrb	r0, [r5, #0]
 800fae4:	f7ff ffab 	bl	800fa3e <__hexdig_fun>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d1f8      	bne.n	800fade <__gethex+0x76>
 800faec:	4994      	ldr	r1, [pc, #592]	; (800fd40 <__gethex+0x2d8>)
 800faee:	2201      	movs	r2, #1
 800faf0:	4628      	mov	r0, r5
 800faf2:	f7ff fee6 	bl	800f8c2 <strncmp>
 800faf6:	b978      	cbnz	r0, 800fb18 <__gethex+0xb0>
 800faf8:	b946      	cbnz	r6, 800fb0c <__gethex+0xa4>
 800fafa:	1c6e      	adds	r6, r5, #1
 800fafc:	4632      	mov	r2, r6
 800fafe:	4615      	mov	r5, r2
 800fb00:	3201      	adds	r2, #1
 800fb02:	7828      	ldrb	r0, [r5, #0]
 800fb04:	f7ff ff9b 	bl	800fa3e <__hexdig_fun>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d1f8      	bne.n	800fafe <__gethex+0x96>
 800fb0c:	1b73      	subs	r3, r6, r5
 800fb0e:	009e      	lsls	r6, r3, #2
 800fb10:	e004      	b.n	800fb1c <__gethex+0xb4>
 800fb12:	2400      	movs	r4, #0
 800fb14:	4626      	mov	r6, r4
 800fb16:	e7e1      	b.n	800fadc <__gethex+0x74>
 800fb18:	2e00      	cmp	r6, #0
 800fb1a:	d1f7      	bne.n	800fb0c <__gethex+0xa4>
 800fb1c:	782b      	ldrb	r3, [r5, #0]
 800fb1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fb22:	2b50      	cmp	r3, #80	; 0x50
 800fb24:	d13d      	bne.n	800fba2 <__gethex+0x13a>
 800fb26:	786b      	ldrb	r3, [r5, #1]
 800fb28:	2b2b      	cmp	r3, #43	; 0x2b
 800fb2a:	d02f      	beq.n	800fb8c <__gethex+0x124>
 800fb2c:	2b2d      	cmp	r3, #45	; 0x2d
 800fb2e:	d031      	beq.n	800fb94 <__gethex+0x12c>
 800fb30:	1c69      	adds	r1, r5, #1
 800fb32:	f04f 0b00 	mov.w	fp, #0
 800fb36:	7808      	ldrb	r0, [r1, #0]
 800fb38:	f7ff ff81 	bl	800fa3e <__hexdig_fun>
 800fb3c:	1e42      	subs	r2, r0, #1
 800fb3e:	b2d2      	uxtb	r2, r2
 800fb40:	2a18      	cmp	r2, #24
 800fb42:	d82e      	bhi.n	800fba2 <__gethex+0x13a>
 800fb44:	f1a0 0210 	sub.w	r2, r0, #16
 800fb48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb4c:	f7ff ff77 	bl	800fa3e <__hexdig_fun>
 800fb50:	f100 3cff 	add.w	ip, r0, #4294967295
 800fb54:	fa5f fc8c 	uxtb.w	ip, ip
 800fb58:	f1bc 0f18 	cmp.w	ip, #24
 800fb5c:	d91d      	bls.n	800fb9a <__gethex+0x132>
 800fb5e:	f1bb 0f00 	cmp.w	fp, #0
 800fb62:	d000      	beq.n	800fb66 <__gethex+0xfe>
 800fb64:	4252      	negs	r2, r2
 800fb66:	4416      	add	r6, r2
 800fb68:	f8ca 1000 	str.w	r1, [sl]
 800fb6c:	b1dc      	cbz	r4, 800fba6 <__gethex+0x13e>
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	bf14      	ite	ne
 800fb74:	f04f 0800 	movne.w	r8, #0
 800fb78:	f04f 0806 	moveq.w	r8, #6
 800fb7c:	4640      	mov	r0, r8
 800fb7e:	b005      	add	sp, #20
 800fb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb84:	4645      	mov	r5, r8
 800fb86:	4626      	mov	r6, r4
 800fb88:	2401      	movs	r4, #1
 800fb8a:	e7c7      	b.n	800fb1c <__gethex+0xb4>
 800fb8c:	f04f 0b00 	mov.w	fp, #0
 800fb90:	1ca9      	adds	r1, r5, #2
 800fb92:	e7d0      	b.n	800fb36 <__gethex+0xce>
 800fb94:	f04f 0b01 	mov.w	fp, #1
 800fb98:	e7fa      	b.n	800fb90 <__gethex+0x128>
 800fb9a:	230a      	movs	r3, #10
 800fb9c:	fb03 0002 	mla	r0, r3, r2, r0
 800fba0:	e7d0      	b.n	800fb44 <__gethex+0xdc>
 800fba2:	4629      	mov	r1, r5
 800fba4:	e7e0      	b.n	800fb68 <__gethex+0x100>
 800fba6:	eba5 0308 	sub.w	r3, r5, r8
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	4621      	mov	r1, r4
 800fbae:	2b07      	cmp	r3, #7
 800fbb0:	dc0a      	bgt.n	800fbc8 <__gethex+0x160>
 800fbb2:	4648      	mov	r0, r9
 800fbb4:	f7fd fbd6 	bl	800d364 <_Balloc>
 800fbb8:	4604      	mov	r4, r0
 800fbba:	b940      	cbnz	r0, 800fbce <__gethex+0x166>
 800fbbc:	4b61      	ldr	r3, [pc, #388]	; (800fd44 <__gethex+0x2dc>)
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	21e4      	movs	r1, #228	; 0xe4
 800fbc2:	4861      	ldr	r0, [pc, #388]	; (800fd48 <__gethex+0x2e0>)
 800fbc4:	f7fc fc34 	bl	800c430 <__assert_func>
 800fbc8:	3101      	adds	r1, #1
 800fbca:	105b      	asrs	r3, r3, #1
 800fbcc:	e7ef      	b.n	800fbae <__gethex+0x146>
 800fbce:	f100 0a14 	add.w	sl, r0, #20
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	495a      	ldr	r1, [pc, #360]	; (800fd40 <__gethex+0x2d8>)
 800fbd6:	f8cd a004 	str.w	sl, [sp, #4]
 800fbda:	469b      	mov	fp, r3
 800fbdc:	45a8      	cmp	r8, r5
 800fbde:	d342      	bcc.n	800fc66 <__gethex+0x1fe>
 800fbe0:	9801      	ldr	r0, [sp, #4]
 800fbe2:	f840 bb04 	str.w	fp, [r0], #4
 800fbe6:	eba0 000a 	sub.w	r0, r0, sl
 800fbea:	1080      	asrs	r0, r0, #2
 800fbec:	6120      	str	r0, [r4, #16]
 800fbee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fbf2:	4658      	mov	r0, fp
 800fbf4:	f7fd fca8 	bl	800d548 <__hi0bits>
 800fbf8:	683d      	ldr	r5, [r7, #0]
 800fbfa:	eba8 0000 	sub.w	r0, r8, r0
 800fbfe:	42a8      	cmp	r0, r5
 800fc00:	dd59      	ble.n	800fcb6 <__gethex+0x24e>
 800fc02:	eba0 0805 	sub.w	r8, r0, r5
 800fc06:	4641      	mov	r1, r8
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f7fe f837 	bl	800dc7c <__any_on>
 800fc0e:	4683      	mov	fp, r0
 800fc10:	b1b8      	cbz	r0, 800fc42 <__gethex+0x1da>
 800fc12:	f108 33ff 	add.w	r3, r8, #4294967295
 800fc16:	1159      	asrs	r1, r3, #5
 800fc18:	f003 021f 	and.w	r2, r3, #31
 800fc1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fc20:	f04f 0b01 	mov.w	fp, #1
 800fc24:	fa0b f202 	lsl.w	r2, fp, r2
 800fc28:	420a      	tst	r2, r1
 800fc2a:	d00a      	beq.n	800fc42 <__gethex+0x1da>
 800fc2c:	455b      	cmp	r3, fp
 800fc2e:	dd06      	ble.n	800fc3e <__gethex+0x1d6>
 800fc30:	f1a8 0102 	sub.w	r1, r8, #2
 800fc34:	4620      	mov	r0, r4
 800fc36:	f7fe f821 	bl	800dc7c <__any_on>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d138      	bne.n	800fcb0 <__gethex+0x248>
 800fc3e:	f04f 0b02 	mov.w	fp, #2
 800fc42:	4641      	mov	r1, r8
 800fc44:	4620      	mov	r0, r4
 800fc46:	f7ff fea8 	bl	800f99a <rshift>
 800fc4a:	4446      	add	r6, r8
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	42b3      	cmp	r3, r6
 800fc50:	da41      	bge.n	800fcd6 <__gethex+0x26e>
 800fc52:	4621      	mov	r1, r4
 800fc54:	4648      	mov	r0, r9
 800fc56:	f7fd fbc5 	bl	800d3e4 <_Bfree>
 800fc5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	6013      	str	r3, [r2, #0]
 800fc60:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fc64:	e78a      	b.n	800fb7c <__gethex+0x114>
 800fc66:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800fc6a:	2a2e      	cmp	r2, #46	; 0x2e
 800fc6c:	d014      	beq.n	800fc98 <__gethex+0x230>
 800fc6e:	2b20      	cmp	r3, #32
 800fc70:	d106      	bne.n	800fc80 <__gethex+0x218>
 800fc72:	9b01      	ldr	r3, [sp, #4]
 800fc74:	f843 bb04 	str.w	fp, [r3], #4
 800fc78:	f04f 0b00 	mov.w	fp, #0
 800fc7c:	9301      	str	r3, [sp, #4]
 800fc7e:	465b      	mov	r3, fp
 800fc80:	7828      	ldrb	r0, [r5, #0]
 800fc82:	9303      	str	r3, [sp, #12]
 800fc84:	f7ff fedb 	bl	800fa3e <__hexdig_fun>
 800fc88:	9b03      	ldr	r3, [sp, #12]
 800fc8a:	f000 000f 	and.w	r0, r0, #15
 800fc8e:	4098      	lsls	r0, r3
 800fc90:	ea4b 0b00 	orr.w	fp, fp, r0
 800fc94:	3304      	adds	r3, #4
 800fc96:	e7a1      	b.n	800fbdc <__gethex+0x174>
 800fc98:	45a8      	cmp	r8, r5
 800fc9a:	d8e8      	bhi.n	800fc6e <__gethex+0x206>
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	4628      	mov	r0, r5
 800fca0:	9303      	str	r3, [sp, #12]
 800fca2:	f7ff fe0e 	bl	800f8c2 <strncmp>
 800fca6:	4926      	ldr	r1, [pc, #152]	; (800fd40 <__gethex+0x2d8>)
 800fca8:	9b03      	ldr	r3, [sp, #12]
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d1df      	bne.n	800fc6e <__gethex+0x206>
 800fcae:	e795      	b.n	800fbdc <__gethex+0x174>
 800fcb0:	f04f 0b03 	mov.w	fp, #3
 800fcb4:	e7c5      	b.n	800fc42 <__gethex+0x1da>
 800fcb6:	da0b      	bge.n	800fcd0 <__gethex+0x268>
 800fcb8:	eba5 0800 	sub.w	r8, r5, r0
 800fcbc:	4621      	mov	r1, r4
 800fcbe:	4642      	mov	r2, r8
 800fcc0:	4648      	mov	r0, r9
 800fcc2:	f7fd fda9 	bl	800d818 <__lshift>
 800fcc6:	eba6 0608 	sub.w	r6, r6, r8
 800fcca:	4604      	mov	r4, r0
 800fccc:	f100 0a14 	add.w	sl, r0, #20
 800fcd0:	f04f 0b00 	mov.w	fp, #0
 800fcd4:	e7ba      	b.n	800fc4c <__gethex+0x1e4>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	42b3      	cmp	r3, r6
 800fcda:	dd73      	ble.n	800fdc4 <__gethex+0x35c>
 800fcdc:	1b9e      	subs	r6, r3, r6
 800fcde:	42b5      	cmp	r5, r6
 800fce0:	dc34      	bgt.n	800fd4c <__gethex+0x2e4>
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2b02      	cmp	r3, #2
 800fce6:	d023      	beq.n	800fd30 <__gethex+0x2c8>
 800fce8:	2b03      	cmp	r3, #3
 800fcea:	d025      	beq.n	800fd38 <__gethex+0x2d0>
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d115      	bne.n	800fd1c <__gethex+0x2b4>
 800fcf0:	42b5      	cmp	r5, r6
 800fcf2:	d113      	bne.n	800fd1c <__gethex+0x2b4>
 800fcf4:	2d01      	cmp	r5, #1
 800fcf6:	d10b      	bne.n	800fd10 <__gethex+0x2a8>
 800fcf8:	9a02      	ldr	r2, [sp, #8]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	2301      	movs	r3, #1
 800fd00:	6123      	str	r3, [r4, #16]
 800fd02:	f8ca 3000 	str.w	r3, [sl]
 800fd06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd08:	f04f 0862 	mov.w	r8, #98	; 0x62
 800fd0c:	601c      	str	r4, [r3, #0]
 800fd0e:	e735      	b.n	800fb7c <__gethex+0x114>
 800fd10:	1e69      	subs	r1, r5, #1
 800fd12:	4620      	mov	r0, r4
 800fd14:	f7fd ffb2 	bl	800dc7c <__any_on>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	d1ed      	bne.n	800fcf8 <__gethex+0x290>
 800fd1c:	4621      	mov	r1, r4
 800fd1e:	4648      	mov	r0, r9
 800fd20:	f7fd fb60 	bl	800d3e4 <_Bfree>
 800fd24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd26:	2300      	movs	r3, #0
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800fd2e:	e725      	b.n	800fb7c <__gethex+0x114>
 800fd30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d1f2      	bne.n	800fd1c <__gethex+0x2b4>
 800fd36:	e7df      	b.n	800fcf8 <__gethex+0x290>
 800fd38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1dc      	bne.n	800fcf8 <__gethex+0x290>
 800fd3e:	e7ed      	b.n	800fd1c <__gethex+0x2b4>
 800fd40:	080120e4 	.word	0x080120e4
 800fd44:	08011f77 	.word	0x08011f77
 800fd48:	0801226d 	.word	0x0801226d
 800fd4c:	f106 38ff 	add.w	r8, r6, #4294967295
 800fd50:	f1bb 0f00 	cmp.w	fp, #0
 800fd54:	d133      	bne.n	800fdbe <__gethex+0x356>
 800fd56:	f1b8 0f00 	cmp.w	r8, #0
 800fd5a:	d004      	beq.n	800fd66 <__gethex+0x2fe>
 800fd5c:	4641      	mov	r1, r8
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f7fd ff8c 	bl	800dc7c <__any_on>
 800fd64:	4683      	mov	fp, r0
 800fd66:	ea4f 1268 	mov.w	r2, r8, asr #5
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fd70:	f008 081f 	and.w	r8, r8, #31
 800fd74:	fa03 f308 	lsl.w	r3, r3, r8
 800fd78:	4213      	tst	r3, r2
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	bf18      	it	ne
 800fd80:	f04b 0b02 	orrne.w	fp, fp, #2
 800fd84:	1bad      	subs	r5, r5, r6
 800fd86:	f7ff fe08 	bl	800f99a <rshift>
 800fd8a:	687e      	ldr	r6, [r7, #4]
 800fd8c:	f04f 0802 	mov.w	r8, #2
 800fd90:	f1bb 0f00 	cmp.w	fp, #0
 800fd94:	d04a      	beq.n	800fe2c <__gethex+0x3c4>
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2b02      	cmp	r3, #2
 800fd9a:	d016      	beq.n	800fdca <__gethex+0x362>
 800fd9c:	2b03      	cmp	r3, #3
 800fd9e:	d018      	beq.n	800fdd2 <__gethex+0x36a>
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d109      	bne.n	800fdb8 <__gethex+0x350>
 800fda4:	f01b 0f02 	tst.w	fp, #2
 800fda8:	d006      	beq.n	800fdb8 <__gethex+0x350>
 800fdaa:	f8da 3000 	ldr.w	r3, [sl]
 800fdae:	ea4b 0b03 	orr.w	fp, fp, r3
 800fdb2:	f01b 0f01 	tst.w	fp, #1
 800fdb6:	d10f      	bne.n	800fdd8 <__gethex+0x370>
 800fdb8:	f048 0810 	orr.w	r8, r8, #16
 800fdbc:	e036      	b.n	800fe2c <__gethex+0x3c4>
 800fdbe:	f04f 0b01 	mov.w	fp, #1
 800fdc2:	e7d0      	b.n	800fd66 <__gethex+0x2fe>
 800fdc4:	f04f 0801 	mov.w	r8, #1
 800fdc8:	e7e2      	b.n	800fd90 <__gethex+0x328>
 800fdca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdcc:	f1c3 0301 	rsb	r3, r3, #1
 800fdd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d0ef      	beq.n	800fdb8 <__gethex+0x350>
 800fdd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fddc:	f104 0214 	add.w	r2, r4, #20
 800fde0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fdea:	2300      	movs	r3, #0
 800fdec:	4694      	mov	ip, r2
 800fdee:	f852 1b04 	ldr.w	r1, [r2], #4
 800fdf2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800fdf6:	d01e      	beq.n	800fe36 <__gethex+0x3ce>
 800fdf8:	3101      	adds	r1, #1
 800fdfa:	f8cc 1000 	str.w	r1, [ip]
 800fdfe:	f1b8 0f02 	cmp.w	r8, #2
 800fe02:	f104 0214 	add.w	r2, r4, #20
 800fe06:	d13d      	bne.n	800fe84 <__gethex+0x41c>
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	42ab      	cmp	r3, r5
 800fe0e:	d10b      	bne.n	800fe28 <__gethex+0x3c0>
 800fe10:	1169      	asrs	r1, r5, #5
 800fe12:	2301      	movs	r3, #1
 800fe14:	f005 051f 	and.w	r5, r5, #31
 800fe18:	fa03 f505 	lsl.w	r5, r3, r5
 800fe1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe20:	421d      	tst	r5, r3
 800fe22:	bf18      	it	ne
 800fe24:	f04f 0801 	movne.w	r8, #1
 800fe28:	f048 0820 	orr.w	r8, r8, #32
 800fe2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe2e:	601c      	str	r4, [r3, #0]
 800fe30:	9b02      	ldr	r3, [sp, #8]
 800fe32:	601e      	str	r6, [r3, #0]
 800fe34:	e6a2      	b.n	800fb7c <__gethex+0x114>
 800fe36:	4290      	cmp	r0, r2
 800fe38:	f842 3c04 	str.w	r3, [r2, #-4]
 800fe3c:	d8d6      	bhi.n	800fdec <__gethex+0x384>
 800fe3e:	68a2      	ldr	r2, [r4, #8]
 800fe40:	4593      	cmp	fp, r2
 800fe42:	db17      	blt.n	800fe74 <__gethex+0x40c>
 800fe44:	6861      	ldr	r1, [r4, #4]
 800fe46:	4648      	mov	r0, r9
 800fe48:	3101      	adds	r1, #1
 800fe4a:	f7fd fa8b 	bl	800d364 <_Balloc>
 800fe4e:	4682      	mov	sl, r0
 800fe50:	b918      	cbnz	r0, 800fe5a <__gethex+0x3f2>
 800fe52:	4b1b      	ldr	r3, [pc, #108]	; (800fec0 <__gethex+0x458>)
 800fe54:	4602      	mov	r2, r0
 800fe56:	2184      	movs	r1, #132	; 0x84
 800fe58:	e6b3      	b.n	800fbc2 <__gethex+0x15a>
 800fe5a:	6922      	ldr	r2, [r4, #16]
 800fe5c:	3202      	adds	r2, #2
 800fe5e:	f104 010c 	add.w	r1, r4, #12
 800fe62:	0092      	lsls	r2, r2, #2
 800fe64:	300c      	adds	r0, #12
 800fe66:	f7fc facf 	bl	800c408 <memcpy>
 800fe6a:	4621      	mov	r1, r4
 800fe6c:	4648      	mov	r0, r9
 800fe6e:	f7fd fab9 	bl	800d3e4 <_Bfree>
 800fe72:	4654      	mov	r4, sl
 800fe74:	6922      	ldr	r2, [r4, #16]
 800fe76:	1c51      	adds	r1, r2, #1
 800fe78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fe7c:	6121      	str	r1, [r4, #16]
 800fe7e:	2101      	movs	r1, #1
 800fe80:	6151      	str	r1, [r2, #20]
 800fe82:	e7bc      	b.n	800fdfe <__gethex+0x396>
 800fe84:	6921      	ldr	r1, [r4, #16]
 800fe86:	4559      	cmp	r1, fp
 800fe88:	dd0b      	ble.n	800fea2 <__gethex+0x43a>
 800fe8a:	2101      	movs	r1, #1
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f7ff fd84 	bl	800f99a <rshift>
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	3601      	adds	r6, #1
 800fe96:	42b3      	cmp	r3, r6
 800fe98:	f6ff aedb 	blt.w	800fc52 <__gethex+0x1ea>
 800fe9c:	f04f 0801 	mov.w	r8, #1
 800fea0:	e7c2      	b.n	800fe28 <__gethex+0x3c0>
 800fea2:	f015 051f 	ands.w	r5, r5, #31
 800fea6:	d0f9      	beq.n	800fe9c <__gethex+0x434>
 800fea8:	9b01      	ldr	r3, [sp, #4]
 800feaa:	441a      	add	r2, r3
 800feac:	f1c5 0520 	rsb	r5, r5, #32
 800feb0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800feb4:	f7fd fb48 	bl	800d548 <__hi0bits>
 800feb8:	42a8      	cmp	r0, r5
 800feba:	dbe6      	blt.n	800fe8a <__gethex+0x422>
 800febc:	e7ee      	b.n	800fe9c <__gethex+0x434>
 800febe:	bf00      	nop
 800fec0:	08011f77 	.word	0x08011f77

0800fec4 <L_shift>:
 800fec4:	f1c2 0208 	rsb	r2, r2, #8
 800fec8:	0092      	lsls	r2, r2, #2
 800feca:	b570      	push	{r4, r5, r6, lr}
 800fecc:	f1c2 0620 	rsb	r6, r2, #32
 800fed0:	6843      	ldr	r3, [r0, #4]
 800fed2:	6804      	ldr	r4, [r0, #0]
 800fed4:	fa03 f506 	lsl.w	r5, r3, r6
 800fed8:	432c      	orrs	r4, r5
 800feda:	40d3      	lsrs	r3, r2
 800fedc:	6004      	str	r4, [r0, #0]
 800fede:	f840 3f04 	str.w	r3, [r0, #4]!
 800fee2:	4288      	cmp	r0, r1
 800fee4:	d3f4      	bcc.n	800fed0 <L_shift+0xc>
 800fee6:	bd70      	pop	{r4, r5, r6, pc}

0800fee8 <__match>:
 800fee8:	b530      	push	{r4, r5, lr}
 800feea:	6803      	ldr	r3, [r0, #0]
 800feec:	3301      	adds	r3, #1
 800feee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fef2:	b914      	cbnz	r4, 800fefa <__match+0x12>
 800fef4:	6003      	str	r3, [r0, #0]
 800fef6:	2001      	movs	r0, #1
 800fef8:	bd30      	pop	{r4, r5, pc}
 800fefa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fefe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ff02:	2d19      	cmp	r5, #25
 800ff04:	bf98      	it	ls
 800ff06:	3220      	addls	r2, #32
 800ff08:	42a2      	cmp	r2, r4
 800ff0a:	d0f0      	beq.n	800feee <__match+0x6>
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	e7f3      	b.n	800fef8 <__match+0x10>

0800ff10 <__hexnan>:
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	680b      	ldr	r3, [r1, #0]
 800ff16:	6801      	ldr	r1, [r0, #0]
 800ff18:	115e      	asrs	r6, r3, #5
 800ff1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ff1e:	f013 031f 	ands.w	r3, r3, #31
 800ff22:	b087      	sub	sp, #28
 800ff24:	bf18      	it	ne
 800ff26:	3604      	addne	r6, #4
 800ff28:	2500      	movs	r5, #0
 800ff2a:	1f37      	subs	r7, r6, #4
 800ff2c:	4682      	mov	sl, r0
 800ff2e:	4690      	mov	r8, r2
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff36:	46b9      	mov	r9, r7
 800ff38:	463c      	mov	r4, r7
 800ff3a:	9502      	str	r5, [sp, #8]
 800ff3c:	46ab      	mov	fp, r5
 800ff3e:	784a      	ldrb	r2, [r1, #1]
 800ff40:	1c4b      	adds	r3, r1, #1
 800ff42:	9303      	str	r3, [sp, #12]
 800ff44:	b342      	cbz	r2, 800ff98 <__hexnan+0x88>
 800ff46:	4610      	mov	r0, r2
 800ff48:	9105      	str	r1, [sp, #20]
 800ff4a:	9204      	str	r2, [sp, #16]
 800ff4c:	f7ff fd77 	bl	800fa3e <__hexdig_fun>
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d14f      	bne.n	800fff4 <__hexnan+0xe4>
 800ff54:	9a04      	ldr	r2, [sp, #16]
 800ff56:	9905      	ldr	r1, [sp, #20]
 800ff58:	2a20      	cmp	r2, #32
 800ff5a:	d818      	bhi.n	800ff8e <__hexnan+0x7e>
 800ff5c:	9b02      	ldr	r3, [sp, #8]
 800ff5e:	459b      	cmp	fp, r3
 800ff60:	dd13      	ble.n	800ff8a <__hexnan+0x7a>
 800ff62:	454c      	cmp	r4, r9
 800ff64:	d206      	bcs.n	800ff74 <__hexnan+0x64>
 800ff66:	2d07      	cmp	r5, #7
 800ff68:	dc04      	bgt.n	800ff74 <__hexnan+0x64>
 800ff6a:	462a      	mov	r2, r5
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f7ff ffa8 	bl	800fec4 <L_shift>
 800ff74:	4544      	cmp	r4, r8
 800ff76:	d950      	bls.n	801001a <__hexnan+0x10a>
 800ff78:	2300      	movs	r3, #0
 800ff7a:	f1a4 0904 	sub.w	r9, r4, #4
 800ff7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff82:	f8cd b008 	str.w	fp, [sp, #8]
 800ff86:	464c      	mov	r4, r9
 800ff88:	461d      	mov	r5, r3
 800ff8a:	9903      	ldr	r1, [sp, #12]
 800ff8c:	e7d7      	b.n	800ff3e <__hexnan+0x2e>
 800ff8e:	2a29      	cmp	r2, #41	; 0x29
 800ff90:	d155      	bne.n	801003e <__hexnan+0x12e>
 800ff92:	3102      	adds	r1, #2
 800ff94:	f8ca 1000 	str.w	r1, [sl]
 800ff98:	f1bb 0f00 	cmp.w	fp, #0
 800ff9c:	d04f      	beq.n	801003e <__hexnan+0x12e>
 800ff9e:	454c      	cmp	r4, r9
 800ffa0:	d206      	bcs.n	800ffb0 <__hexnan+0xa0>
 800ffa2:	2d07      	cmp	r5, #7
 800ffa4:	dc04      	bgt.n	800ffb0 <__hexnan+0xa0>
 800ffa6:	462a      	mov	r2, r5
 800ffa8:	4649      	mov	r1, r9
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f7ff ff8a 	bl	800fec4 <L_shift>
 800ffb0:	4544      	cmp	r4, r8
 800ffb2:	d934      	bls.n	801001e <__hexnan+0x10e>
 800ffb4:	f1a8 0204 	sub.w	r2, r8, #4
 800ffb8:	4623      	mov	r3, r4
 800ffba:	f853 1b04 	ldr.w	r1, [r3], #4
 800ffbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ffc2:	429f      	cmp	r7, r3
 800ffc4:	d2f9      	bcs.n	800ffba <__hexnan+0xaa>
 800ffc6:	1b3b      	subs	r3, r7, r4
 800ffc8:	f023 0303 	bic.w	r3, r3, #3
 800ffcc:	3304      	adds	r3, #4
 800ffce:	3e03      	subs	r6, #3
 800ffd0:	3401      	adds	r4, #1
 800ffd2:	42a6      	cmp	r6, r4
 800ffd4:	bf38      	it	cc
 800ffd6:	2304      	movcc	r3, #4
 800ffd8:	4443      	add	r3, r8
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f843 2b04 	str.w	r2, [r3], #4
 800ffe0:	429f      	cmp	r7, r3
 800ffe2:	d2fb      	bcs.n	800ffdc <__hexnan+0xcc>
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	b91b      	cbnz	r3, 800fff0 <__hexnan+0xe0>
 800ffe8:	4547      	cmp	r7, r8
 800ffea:	d126      	bne.n	801003a <__hexnan+0x12a>
 800ffec:	2301      	movs	r3, #1
 800ffee:	603b      	str	r3, [r7, #0]
 800fff0:	2005      	movs	r0, #5
 800fff2:	e025      	b.n	8010040 <__hexnan+0x130>
 800fff4:	3501      	adds	r5, #1
 800fff6:	2d08      	cmp	r5, #8
 800fff8:	f10b 0b01 	add.w	fp, fp, #1
 800fffc:	dd06      	ble.n	801000c <__hexnan+0xfc>
 800fffe:	4544      	cmp	r4, r8
 8010000:	d9c3      	bls.n	800ff8a <__hexnan+0x7a>
 8010002:	2300      	movs	r3, #0
 8010004:	f844 3c04 	str.w	r3, [r4, #-4]
 8010008:	2501      	movs	r5, #1
 801000a:	3c04      	subs	r4, #4
 801000c:	6822      	ldr	r2, [r4, #0]
 801000e:	f000 000f 	and.w	r0, r0, #15
 8010012:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010016:	6020      	str	r0, [r4, #0]
 8010018:	e7b7      	b.n	800ff8a <__hexnan+0x7a>
 801001a:	2508      	movs	r5, #8
 801001c:	e7b5      	b.n	800ff8a <__hexnan+0x7a>
 801001e:	9b01      	ldr	r3, [sp, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d0df      	beq.n	800ffe4 <__hexnan+0xd4>
 8010024:	f1c3 0320 	rsb	r3, r3, #32
 8010028:	f04f 32ff 	mov.w	r2, #4294967295
 801002c:	40da      	lsrs	r2, r3
 801002e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010032:	4013      	ands	r3, r2
 8010034:	f846 3c04 	str.w	r3, [r6, #-4]
 8010038:	e7d4      	b.n	800ffe4 <__hexnan+0xd4>
 801003a:	3f04      	subs	r7, #4
 801003c:	e7d2      	b.n	800ffe4 <__hexnan+0xd4>
 801003e:	2004      	movs	r0, #4
 8010040:	b007      	add	sp, #28
 8010042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010046 <__ascii_mbtowc>:
 8010046:	b082      	sub	sp, #8
 8010048:	b901      	cbnz	r1, 801004c <__ascii_mbtowc+0x6>
 801004a:	a901      	add	r1, sp, #4
 801004c:	b142      	cbz	r2, 8010060 <__ascii_mbtowc+0x1a>
 801004e:	b14b      	cbz	r3, 8010064 <__ascii_mbtowc+0x1e>
 8010050:	7813      	ldrb	r3, [r2, #0]
 8010052:	600b      	str	r3, [r1, #0]
 8010054:	7812      	ldrb	r2, [r2, #0]
 8010056:	1e10      	subs	r0, r2, #0
 8010058:	bf18      	it	ne
 801005a:	2001      	movne	r0, #1
 801005c:	b002      	add	sp, #8
 801005e:	4770      	bx	lr
 8010060:	4610      	mov	r0, r2
 8010062:	e7fb      	b.n	801005c <__ascii_mbtowc+0x16>
 8010064:	f06f 0001 	mvn.w	r0, #1
 8010068:	e7f8      	b.n	801005c <__ascii_mbtowc+0x16>

0801006a <_realloc_r>:
 801006a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006e:	4680      	mov	r8, r0
 8010070:	4614      	mov	r4, r2
 8010072:	460e      	mov	r6, r1
 8010074:	b921      	cbnz	r1, 8010080 <_realloc_r+0x16>
 8010076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801007a:	4611      	mov	r1, r2
 801007c:	f7fd b8e6 	b.w	800d24c <_malloc_r>
 8010080:	b92a      	cbnz	r2, 801008e <_realloc_r+0x24>
 8010082:	f7fd f86f 	bl	800d164 <_free_r>
 8010086:	4625      	mov	r5, r4
 8010088:	4628      	mov	r0, r5
 801008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801008e:	f000 f8e1 	bl	8010254 <_malloc_usable_size_r>
 8010092:	4284      	cmp	r4, r0
 8010094:	4607      	mov	r7, r0
 8010096:	d802      	bhi.n	801009e <_realloc_r+0x34>
 8010098:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801009c:	d812      	bhi.n	80100c4 <_realloc_r+0x5a>
 801009e:	4621      	mov	r1, r4
 80100a0:	4640      	mov	r0, r8
 80100a2:	f7fd f8d3 	bl	800d24c <_malloc_r>
 80100a6:	4605      	mov	r5, r0
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d0ed      	beq.n	8010088 <_realloc_r+0x1e>
 80100ac:	42bc      	cmp	r4, r7
 80100ae:	4622      	mov	r2, r4
 80100b0:	4631      	mov	r1, r6
 80100b2:	bf28      	it	cs
 80100b4:	463a      	movcs	r2, r7
 80100b6:	f7fc f9a7 	bl	800c408 <memcpy>
 80100ba:	4631      	mov	r1, r6
 80100bc:	4640      	mov	r0, r8
 80100be:	f7fd f851 	bl	800d164 <_free_r>
 80100c2:	e7e1      	b.n	8010088 <_realloc_r+0x1e>
 80100c4:	4635      	mov	r5, r6
 80100c6:	e7df      	b.n	8010088 <_realloc_r+0x1e>

080100c8 <_strtoul_l.constprop.0>:
 80100c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100cc:	4f36      	ldr	r7, [pc, #216]	; (80101a8 <_strtoul_l.constprop.0+0xe0>)
 80100ce:	4686      	mov	lr, r0
 80100d0:	460d      	mov	r5, r1
 80100d2:	4628      	mov	r0, r5
 80100d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100d8:	5d3e      	ldrb	r6, [r7, r4]
 80100da:	f016 0608 	ands.w	r6, r6, #8
 80100de:	d1f8      	bne.n	80100d2 <_strtoul_l.constprop.0+0xa>
 80100e0:	2c2d      	cmp	r4, #45	; 0x2d
 80100e2:	d130      	bne.n	8010146 <_strtoul_l.constprop.0+0x7e>
 80100e4:	782c      	ldrb	r4, [r5, #0]
 80100e6:	2601      	movs	r6, #1
 80100e8:	1c85      	adds	r5, r0, #2
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d057      	beq.n	801019e <_strtoul_l.constprop.0+0xd6>
 80100ee:	2b10      	cmp	r3, #16
 80100f0:	d109      	bne.n	8010106 <_strtoul_l.constprop.0+0x3e>
 80100f2:	2c30      	cmp	r4, #48	; 0x30
 80100f4:	d107      	bne.n	8010106 <_strtoul_l.constprop.0+0x3e>
 80100f6:	7828      	ldrb	r0, [r5, #0]
 80100f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80100fc:	2858      	cmp	r0, #88	; 0x58
 80100fe:	d149      	bne.n	8010194 <_strtoul_l.constprop.0+0xcc>
 8010100:	786c      	ldrb	r4, [r5, #1]
 8010102:	2310      	movs	r3, #16
 8010104:	3502      	adds	r5, #2
 8010106:	f04f 38ff 	mov.w	r8, #4294967295
 801010a:	2700      	movs	r7, #0
 801010c:	fbb8 f8f3 	udiv	r8, r8, r3
 8010110:	fb03 f908 	mul.w	r9, r3, r8
 8010114:	ea6f 0909 	mvn.w	r9, r9
 8010118:	4638      	mov	r0, r7
 801011a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801011e:	f1bc 0f09 	cmp.w	ip, #9
 8010122:	d815      	bhi.n	8010150 <_strtoul_l.constprop.0+0x88>
 8010124:	4664      	mov	r4, ip
 8010126:	42a3      	cmp	r3, r4
 8010128:	dd23      	ble.n	8010172 <_strtoul_l.constprop.0+0xaa>
 801012a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801012e:	d007      	beq.n	8010140 <_strtoul_l.constprop.0+0x78>
 8010130:	4580      	cmp	r8, r0
 8010132:	d31b      	bcc.n	801016c <_strtoul_l.constprop.0+0xa4>
 8010134:	d101      	bne.n	801013a <_strtoul_l.constprop.0+0x72>
 8010136:	45a1      	cmp	r9, r4
 8010138:	db18      	blt.n	801016c <_strtoul_l.constprop.0+0xa4>
 801013a:	fb00 4003 	mla	r0, r0, r3, r4
 801013e:	2701      	movs	r7, #1
 8010140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010144:	e7e9      	b.n	801011a <_strtoul_l.constprop.0+0x52>
 8010146:	2c2b      	cmp	r4, #43	; 0x2b
 8010148:	bf04      	itt	eq
 801014a:	782c      	ldrbeq	r4, [r5, #0]
 801014c:	1c85      	addeq	r5, r0, #2
 801014e:	e7cc      	b.n	80100ea <_strtoul_l.constprop.0+0x22>
 8010150:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010154:	f1bc 0f19 	cmp.w	ip, #25
 8010158:	d801      	bhi.n	801015e <_strtoul_l.constprop.0+0x96>
 801015a:	3c37      	subs	r4, #55	; 0x37
 801015c:	e7e3      	b.n	8010126 <_strtoul_l.constprop.0+0x5e>
 801015e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010162:	f1bc 0f19 	cmp.w	ip, #25
 8010166:	d804      	bhi.n	8010172 <_strtoul_l.constprop.0+0xaa>
 8010168:	3c57      	subs	r4, #87	; 0x57
 801016a:	e7dc      	b.n	8010126 <_strtoul_l.constprop.0+0x5e>
 801016c:	f04f 37ff 	mov.w	r7, #4294967295
 8010170:	e7e6      	b.n	8010140 <_strtoul_l.constprop.0+0x78>
 8010172:	1c7b      	adds	r3, r7, #1
 8010174:	d106      	bne.n	8010184 <_strtoul_l.constprop.0+0xbc>
 8010176:	2322      	movs	r3, #34	; 0x22
 8010178:	f8ce 3000 	str.w	r3, [lr]
 801017c:	4638      	mov	r0, r7
 801017e:	b932      	cbnz	r2, 801018e <_strtoul_l.constprop.0+0xc6>
 8010180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010184:	b106      	cbz	r6, 8010188 <_strtoul_l.constprop.0+0xc0>
 8010186:	4240      	negs	r0, r0
 8010188:	2a00      	cmp	r2, #0
 801018a:	d0f9      	beq.n	8010180 <_strtoul_l.constprop.0+0xb8>
 801018c:	b107      	cbz	r7, 8010190 <_strtoul_l.constprop.0+0xc8>
 801018e:	1e69      	subs	r1, r5, #1
 8010190:	6011      	str	r1, [r2, #0]
 8010192:	e7f5      	b.n	8010180 <_strtoul_l.constprop.0+0xb8>
 8010194:	2430      	movs	r4, #48	; 0x30
 8010196:	2b00      	cmp	r3, #0
 8010198:	d1b5      	bne.n	8010106 <_strtoul_l.constprop.0+0x3e>
 801019a:	2308      	movs	r3, #8
 801019c:	e7b3      	b.n	8010106 <_strtoul_l.constprop.0+0x3e>
 801019e:	2c30      	cmp	r4, #48	; 0x30
 80101a0:	d0a9      	beq.n	80100f6 <_strtoul_l.constprop.0+0x2e>
 80101a2:	230a      	movs	r3, #10
 80101a4:	e7af      	b.n	8010106 <_strtoul_l.constprop.0+0x3e>
 80101a6:	bf00      	nop
 80101a8:	08012139 	.word	0x08012139

080101ac <_strtoul_r>:
 80101ac:	f7ff bf8c 	b.w	80100c8 <_strtoul_l.constprop.0>

080101b0 <__ascii_wctomb>:
 80101b0:	b149      	cbz	r1, 80101c6 <__ascii_wctomb+0x16>
 80101b2:	2aff      	cmp	r2, #255	; 0xff
 80101b4:	bf85      	ittet	hi
 80101b6:	238a      	movhi	r3, #138	; 0x8a
 80101b8:	6003      	strhi	r3, [r0, #0]
 80101ba:	700a      	strbls	r2, [r1, #0]
 80101bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80101c0:	bf98      	it	ls
 80101c2:	2001      	movls	r0, #1
 80101c4:	4770      	bx	lr
 80101c6:	4608      	mov	r0, r1
 80101c8:	4770      	bx	lr

080101ca <_raise_r>:
 80101ca:	291f      	cmp	r1, #31
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	4604      	mov	r4, r0
 80101d0:	460d      	mov	r5, r1
 80101d2:	d904      	bls.n	80101de <_raise_r+0x14>
 80101d4:	2316      	movs	r3, #22
 80101d6:	6003      	str	r3, [r0, #0]
 80101d8:	f04f 30ff 	mov.w	r0, #4294967295
 80101dc:	bd38      	pop	{r3, r4, r5, pc}
 80101de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101e0:	b112      	cbz	r2, 80101e8 <_raise_r+0x1e>
 80101e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101e6:	b94b      	cbnz	r3, 80101fc <_raise_r+0x32>
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 f831 	bl	8010250 <_getpid_r>
 80101ee:	462a      	mov	r2, r5
 80101f0:	4601      	mov	r1, r0
 80101f2:	4620      	mov	r0, r4
 80101f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101f8:	f000 b818 	b.w	801022c <_kill_r>
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d00a      	beq.n	8010216 <_raise_r+0x4c>
 8010200:	1c59      	adds	r1, r3, #1
 8010202:	d103      	bne.n	801020c <_raise_r+0x42>
 8010204:	2316      	movs	r3, #22
 8010206:	6003      	str	r3, [r0, #0]
 8010208:	2001      	movs	r0, #1
 801020a:	e7e7      	b.n	80101dc <_raise_r+0x12>
 801020c:	2400      	movs	r4, #0
 801020e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010212:	4628      	mov	r0, r5
 8010214:	4798      	blx	r3
 8010216:	2000      	movs	r0, #0
 8010218:	e7e0      	b.n	80101dc <_raise_r+0x12>
	...

0801021c <raise>:
 801021c:	4b02      	ldr	r3, [pc, #8]	; (8010228 <raise+0xc>)
 801021e:	4601      	mov	r1, r0
 8010220:	6818      	ldr	r0, [r3, #0]
 8010222:	f7ff bfd2 	b.w	80101ca <_raise_r>
 8010226:	bf00      	nop
 8010228:	20000340 	.word	0x20000340

0801022c <_kill_r>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	4d07      	ldr	r5, [pc, #28]	; (801024c <_kill_r+0x20>)
 8010230:	2300      	movs	r3, #0
 8010232:	4604      	mov	r4, r0
 8010234:	4608      	mov	r0, r1
 8010236:	4611      	mov	r1, r2
 8010238:	602b      	str	r3, [r5, #0]
 801023a:	f7f4 fd01 	bl	8004c40 <_kill>
 801023e:	1c43      	adds	r3, r0, #1
 8010240:	d102      	bne.n	8010248 <_kill_r+0x1c>
 8010242:	682b      	ldr	r3, [r5, #0]
 8010244:	b103      	cbz	r3, 8010248 <_kill_r+0x1c>
 8010246:	6023      	str	r3, [r4, #0]
 8010248:	bd38      	pop	{r3, r4, r5, pc}
 801024a:	bf00      	nop
 801024c:	20001788 	.word	0x20001788

08010250 <_getpid_r>:
 8010250:	f7f4 bcee 	b.w	8004c30 <_getpid>

08010254 <_malloc_usable_size_r>:
 8010254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010258:	1f18      	subs	r0, r3, #4
 801025a:	2b00      	cmp	r3, #0
 801025c:	bfbc      	itt	lt
 801025e:	580b      	ldrlt	r3, [r1, r0]
 8010260:	18c0      	addlt	r0, r0, r3
 8010262:	4770      	bx	lr

08010264 <fmod>:
 8010264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010266:	ed2d 8b02 	vpush	{d8}
 801026a:	ec57 6b10 	vmov	r6, r7, d0
 801026e:	ec55 4b11 	vmov	r4, r5, d1
 8010272:	f000 f825 	bl	80102c0 <__ieee754_fmod>
 8010276:	4622      	mov	r2, r4
 8010278:	462b      	mov	r3, r5
 801027a:	4630      	mov	r0, r6
 801027c:	4639      	mov	r1, r7
 801027e:	eeb0 8a40 	vmov.f32	s16, s0
 8010282:	eef0 8a60 	vmov.f32	s17, s1
 8010286:	f7f0 fc51 	bl	8000b2c <__aeabi_dcmpun>
 801028a:	b990      	cbnz	r0, 80102b2 <fmod+0x4e>
 801028c:	2200      	movs	r2, #0
 801028e:	2300      	movs	r3, #0
 8010290:	4620      	mov	r0, r4
 8010292:	4629      	mov	r1, r5
 8010294:	f7f0 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8010298:	b158      	cbz	r0, 80102b2 <fmod+0x4e>
 801029a:	f7fc f889 	bl	800c3b0 <__errno>
 801029e:	2321      	movs	r3, #33	; 0x21
 80102a0:	6003      	str	r3, [r0, #0]
 80102a2:	2200      	movs	r2, #0
 80102a4:	2300      	movs	r3, #0
 80102a6:	4610      	mov	r0, r2
 80102a8:	4619      	mov	r1, r3
 80102aa:	f7f0 facf 	bl	800084c <__aeabi_ddiv>
 80102ae:	ec41 0b18 	vmov	d8, r0, r1
 80102b2:	eeb0 0a48 	vmov.f32	s0, s16
 80102b6:	eef0 0a68 	vmov.f32	s1, s17
 80102ba:	ecbd 8b02 	vpop	{d8}
 80102be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080102c0 <__ieee754_fmod>:
 80102c0:	ec53 2b11 	vmov	r2, r3, d1
 80102c4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80102c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102cc:	ea5c 0402 	orrs.w	r4, ip, r2
 80102d0:	ec51 0b10 	vmov	r0, r1, d0
 80102d4:	ee11 7a10 	vmov	r7, s2
 80102d8:	ee11 ea10 	vmov	lr, s2
 80102dc:	461e      	mov	r6, r3
 80102de:	d00c      	beq.n	80102fa <__ieee754_fmod+0x3a>
 80102e0:	4c78      	ldr	r4, [pc, #480]	; (80104c4 <__ieee754_fmod+0x204>)
 80102e2:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80102e6:	45a0      	cmp	r8, r4
 80102e8:	4689      	mov	r9, r1
 80102ea:	dc06      	bgt.n	80102fa <__ieee754_fmod+0x3a>
 80102ec:	4254      	negs	r4, r2
 80102ee:	4d76      	ldr	r5, [pc, #472]	; (80104c8 <__ieee754_fmod+0x208>)
 80102f0:	4314      	orrs	r4, r2
 80102f2:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80102f6:	42ac      	cmp	r4, r5
 80102f8:	d909      	bls.n	801030e <__ieee754_fmod+0x4e>
 80102fa:	f7f0 f97d 	bl	80005f8 <__aeabi_dmul>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	f7f0 faa3 	bl	800084c <__aeabi_ddiv>
 8010306:	ec41 0b10 	vmov	d0, r0, r1
 801030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801030e:	45e0      	cmp	r8, ip
 8010310:	ee10 aa10 	vmov	sl, s0
 8010314:	ee10 4a10 	vmov	r4, s0
 8010318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801031c:	dc09      	bgt.n	8010332 <__ieee754_fmod+0x72>
 801031e:	dbf2      	blt.n	8010306 <__ieee754_fmod+0x46>
 8010320:	4290      	cmp	r0, r2
 8010322:	d3f0      	bcc.n	8010306 <__ieee754_fmod+0x46>
 8010324:	d105      	bne.n	8010332 <__ieee754_fmod+0x72>
 8010326:	4b69      	ldr	r3, [pc, #420]	; (80104cc <__ieee754_fmod+0x20c>)
 8010328:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801032c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010330:	e7e9      	b.n	8010306 <__ieee754_fmod+0x46>
 8010332:	4a65      	ldr	r2, [pc, #404]	; (80104c8 <__ieee754_fmod+0x208>)
 8010334:	ea19 0f02 	tst.w	r9, r2
 8010338:	d148      	bne.n	80103cc <__ieee754_fmod+0x10c>
 801033a:	f1b8 0f00 	cmp.w	r8, #0
 801033e:	d13d      	bne.n	80103bc <__ieee754_fmod+0xfc>
 8010340:	4963      	ldr	r1, [pc, #396]	; (80104d0 <__ieee754_fmod+0x210>)
 8010342:	4653      	mov	r3, sl
 8010344:	2b00      	cmp	r3, #0
 8010346:	dc36      	bgt.n	80103b6 <__ieee754_fmod+0xf6>
 8010348:	4216      	tst	r6, r2
 801034a:	d14f      	bne.n	80103ec <__ieee754_fmod+0x12c>
 801034c:	f1bc 0f00 	cmp.w	ip, #0
 8010350:	d144      	bne.n	80103dc <__ieee754_fmod+0x11c>
 8010352:	4a5f      	ldr	r2, [pc, #380]	; (80104d0 <__ieee754_fmod+0x210>)
 8010354:	463b      	mov	r3, r7
 8010356:	2b00      	cmp	r3, #0
 8010358:	dc3d      	bgt.n	80103d6 <__ieee754_fmod+0x116>
 801035a:	485e      	ldr	r0, [pc, #376]	; (80104d4 <__ieee754_fmod+0x214>)
 801035c:	4281      	cmp	r1, r0
 801035e:	db4a      	blt.n	80103f6 <__ieee754_fmod+0x136>
 8010360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010368:	485a      	ldr	r0, [pc, #360]	; (80104d4 <__ieee754_fmod+0x214>)
 801036a:	4282      	cmp	r2, r0
 801036c:	db57      	blt.n	801041e <__ieee754_fmod+0x15e>
 801036e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8010372:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8010376:	1a89      	subs	r1, r1, r2
 8010378:	1b98      	subs	r0, r3, r6
 801037a:	eba4 070e 	sub.w	r7, r4, lr
 801037e:	2900      	cmp	r1, #0
 8010380:	d162      	bne.n	8010448 <__ieee754_fmod+0x188>
 8010382:	4574      	cmp	r4, lr
 8010384:	bf38      	it	cc
 8010386:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801038a:	2800      	cmp	r0, #0
 801038c:	bfa4      	itt	ge
 801038e:	463c      	movge	r4, r7
 8010390:	4603      	movge	r3, r0
 8010392:	ea53 0104 	orrs.w	r1, r3, r4
 8010396:	d0c6      	beq.n	8010326 <__ieee754_fmod+0x66>
 8010398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801039c:	db69      	blt.n	8010472 <__ieee754_fmod+0x1b2>
 801039e:	494d      	ldr	r1, [pc, #308]	; (80104d4 <__ieee754_fmod+0x214>)
 80103a0:	428a      	cmp	r2, r1
 80103a2:	db6c      	blt.n	801047e <__ieee754_fmod+0x1be>
 80103a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80103a8:	432b      	orrs	r3, r5
 80103aa:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80103ae:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80103b2:	4620      	mov	r0, r4
 80103b4:	e7a7      	b.n	8010306 <__ieee754_fmod+0x46>
 80103b6:	3901      	subs	r1, #1
 80103b8:	005b      	lsls	r3, r3, #1
 80103ba:	e7c3      	b.n	8010344 <__ieee754_fmod+0x84>
 80103bc:	4945      	ldr	r1, [pc, #276]	; (80104d4 <__ieee754_fmod+0x214>)
 80103be:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	ddc0      	ble.n	8010348 <__ieee754_fmod+0x88>
 80103c6:	3901      	subs	r1, #1
 80103c8:	005b      	lsls	r3, r3, #1
 80103ca:	e7fa      	b.n	80103c2 <__ieee754_fmod+0x102>
 80103cc:	ea4f 5128 	mov.w	r1, r8, asr #20
 80103d0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80103d4:	e7b8      	b.n	8010348 <__ieee754_fmod+0x88>
 80103d6:	3a01      	subs	r2, #1
 80103d8:	005b      	lsls	r3, r3, #1
 80103da:	e7bc      	b.n	8010356 <__ieee754_fmod+0x96>
 80103dc:	4a3d      	ldr	r2, [pc, #244]	; (80104d4 <__ieee754_fmod+0x214>)
 80103de:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	ddb9      	ble.n	801035a <__ieee754_fmod+0x9a>
 80103e6:	3a01      	subs	r2, #1
 80103e8:	005b      	lsls	r3, r3, #1
 80103ea:	e7fa      	b.n	80103e2 <__ieee754_fmod+0x122>
 80103ec:	ea4f 522c 	mov.w	r2, ip, asr #20
 80103f0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80103f4:	e7b1      	b.n	801035a <__ieee754_fmod+0x9a>
 80103f6:	1a40      	subs	r0, r0, r1
 80103f8:	281f      	cmp	r0, #31
 80103fa:	dc0a      	bgt.n	8010412 <__ieee754_fmod+0x152>
 80103fc:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8010400:	fa08 f800 	lsl.w	r8, r8, r0
 8010404:	fa2a f303 	lsr.w	r3, sl, r3
 8010408:	ea43 0308 	orr.w	r3, r3, r8
 801040c:	fa0a f400 	lsl.w	r4, sl, r0
 8010410:	e7aa      	b.n	8010368 <__ieee754_fmod+0xa8>
 8010412:	4b31      	ldr	r3, [pc, #196]	; (80104d8 <__ieee754_fmod+0x218>)
 8010414:	1a5b      	subs	r3, r3, r1
 8010416:	fa0a f303 	lsl.w	r3, sl, r3
 801041a:	2400      	movs	r4, #0
 801041c:	e7a4      	b.n	8010368 <__ieee754_fmod+0xa8>
 801041e:	1a80      	subs	r0, r0, r2
 8010420:	281f      	cmp	r0, #31
 8010422:	dc0a      	bgt.n	801043a <__ieee754_fmod+0x17a>
 8010424:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8010428:	fa0c fc00 	lsl.w	ip, ip, r0
 801042c:	fa27 f606 	lsr.w	r6, r7, r6
 8010430:	ea46 060c 	orr.w	r6, r6, ip
 8010434:	fa07 fe00 	lsl.w	lr, r7, r0
 8010438:	e79d      	b.n	8010376 <__ieee754_fmod+0xb6>
 801043a:	4e27      	ldr	r6, [pc, #156]	; (80104d8 <__ieee754_fmod+0x218>)
 801043c:	1ab6      	subs	r6, r6, r2
 801043e:	fa07 f606 	lsl.w	r6, r7, r6
 8010442:	f04f 0e00 	mov.w	lr, #0
 8010446:	e796      	b.n	8010376 <__ieee754_fmod+0xb6>
 8010448:	4574      	cmp	r4, lr
 801044a:	bf38      	it	cc
 801044c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8010450:	2800      	cmp	r0, #0
 8010452:	da05      	bge.n	8010460 <__ieee754_fmod+0x1a0>
 8010454:	0fe0      	lsrs	r0, r4, #31
 8010456:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801045a:	0064      	lsls	r4, r4, #1
 801045c:	3901      	subs	r1, #1
 801045e:	e78b      	b.n	8010378 <__ieee754_fmod+0xb8>
 8010460:	ea50 0307 	orrs.w	r3, r0, r7
 8010464:	f43f af5f 	beq.w	8010326 <__ieee754_fmod+0x66>
 8010468:	0ffb      	lsrs	r3, r7, #31
 801046a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801046e:	007c      	lsls	r4, r7, #1
 8010470:	e7f4      	b.n	801045c <__ieee754_fmod+0x19c>
 8010472:	0fe1      	lsrs	r1, r4, #31
 8010474:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010478:	0064      	lsls	r4, r4, #1
 801047a:	3a01      	subs	r2, #1
 801047c:	e78c      	b.n	8010398 <__ieee754_fmod+0xd8>
 801047e:	1a89      	subs	r1, r1, r2
 8010480:	2914      	cmp	r1, #20
 8010482:	dc0a      	bgt.n	801049a <__ieee754_fmod+0x1da>
 8010484:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8010488:	fa03 f202 	lsl.w	r2, r3, r2
 801048c:	40cc      	lsrs	r4, r1
 801048e:	4322      	orrs	r2, r4
 8010490:	410b      	asrs	r3, r1
 8010492:	ea43 0105 	orr.w	r1, r3, r5
 8010496:	4610      	mov	r0, r2
 8010498:	e735      	b.n	8010306 <__ieee754_fmod+0x46>
 801049a:	291f      	cmp	r1, #31
 801049c:	dc07      	bgt.n	80104ae <__ieee754_fmod+0x1ee>
 801049e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80104a2:	40cc      	lsrs	r4, r1
 80104a4:	fa03 f202 	lsl.w	r2, r3, r2
 80104a8:	4322      	orrs	r2, r4
 80104aa:	462b      	mov	r3, r5
 80104ac:	e7f1      	b.n	8010492 <__ieee754_fmod+0x1d2>
 80104ae:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80104b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80104b6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80104ba:	32e2      	adds	r2, #226	; 0xe2
 80104bc:	fa43 f202 	asr.w	r2, r3, r2
 80104c0:	e7f3      	b.n	80104aa <__ieee754_fmod+0x1ea>
 80104c2:	bf00      	nop
 80104c4:	7fefffff 	.word	0x7fefffff
 80104c8:	7ff00000 	.word	0x7ff00000
 80104cc:	080122d0 	.word	0x080122d0
 80104d0:	fffffbed 	.word	0xfffffbed
 80104d4:	fffffc02 	.word	0xfffffc02
 80104d8:	fffffbe2 	.word	0xfffffbe2

080104dc <_init>:
 80104dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104de:	bf00      	nop
 80104e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104e2:	bc08      	pop	{r3}
 80104e4:	469e      	mov	lr, r3
 80104e6:	4770      	bx	lr

080104e8 <_fini>:
 80104e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ea:	bf00      	nop
 80104ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ee:	bc08      	pop	{r3}
 80104f0:	469e      	mov	lr, r3
 80104f2:	4770      	bx	lr
